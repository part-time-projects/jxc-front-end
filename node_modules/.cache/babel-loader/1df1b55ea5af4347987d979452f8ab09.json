{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\components\\jeecg\\JTreeSelect.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\components\\jeecg\\JTreeSelect.vue","mtime":1648374777540},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/*\n* 异步树加载组件 通过传入表名 显示字段 存储字段 加载一个树控件\n* <j-tree-select dict=\"aa_tree_test,aad,id\" pid-field=\"pid\" ></j-tree-select>\n* */\nimport { getAction } from '@/api/manage';\nexport default {\n  name: 'JTreeSelect',\n  props: {\n    value: {\n      type: String,\n      required: false\n    },\n    placeholder: {\n      type: String,\n      default: '请选择',\n      required: false\n    },\n    dict: {\n      type: String,\n      default: '',\n      required: false\n    },\n    pidField: {\n      type: String,\n      default: 'pid',\n      required: false\n    },\n    pidValue: {\n      type: String,\n      default: '',\n      required: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    hasChildField: {\n      type: String,\n      default: '',\n      required: false\n    },\n    condition: {\n      type: String,\n      default: '',\n      required: false\n    },\n    // 是否支持多选\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    loadTriggleChange: {\n      type: Boolean,\n      default: false,\n      required: false\n    }\n  },\n  data: function data() {\n    return {\n      treeValue: null,\n      treeData: [],\n      url: \"/sys/dict/loadTreeData\",\n      view: '/sys/dict/loadDictItem/',\n      tableName: \"\",\n      text: \"\",\n      code: \"\"\n    };\n  },\n  watch: {\n    value: function value() {\n      this.loadItemByCode();\n    },\n    dict: function dict() {\n      this.initDictInfo();\n      this.loadRoot();\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    this.validateProp().then(function () {\n      _this.initDictInfo();\n\n      _this.loadRoot();\n\n      _this.loadItemByCode();\n    });\n  },\n  methods: {\n    loadItemByCode: function loadItemByCode() {\n      var _this2 = this;\n\n      if (!this.value || this.value == \"0\") {\n        this.treeValue = null;\n      } else {\n        getAction(\"\".concat(this.view).concat(this.dict), {\n          key: this.value\n        }).then(function (res) {\n          if (res.success) {\n            var values = _this2.value.split(',');\n\n            _this2.treeValue = res.result.map(function (item, index) {\n              return {\n                key: values[index],\n                value: values[index],\n                label: item\n              };\n            });\n\n            _this2.onLoadTriggleChange(res.result[0]);\n          }\n        });\n      }\n    },\n    onLoadTriggleChange: function onLoadTriggleChange(text) {\n      //只有单选才会触发\n      if (!this.multiple && this.loadTriggleChange) {\n        this.$emit('change', this.value, text);\n      }\n    },\n    initDictInfo: function initDictInfo() {\n      var arr = this.dict.split(\",\");\n      this.tableName = arr[0];\n      this.text = arr[1];\n      this.code = arr[2];\n    },\n    asyncLoadTreeData: function asyncLoadTreeData(treeNode) {\n      var _this3 = this;\n\n      return new Promise(function (resolve) {\n        if (treeNode.$vnode.children) {\n          resolve();\n          return;\n        }\n\n        var pid = treeNode.$vnode.key;\n        var param = {\n          pid: pid,\n          tableName: _this3.tableName,\n          text: _this3.text,\n          code: _this3.code,\n          pidField: _this3.pidField,\n          hasChildField: _this3.hasChildField,\n          condition: _this3.condition\n        };\n        getAction(_this3.url, param).then(function (res) {\n          if (res.success) {\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n              for (var _iterator = res.result[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var i = _step.value;\n                i.value = i.key;\n\n                if (i.leaf == false) {\n                  i.isLeaf = false;\n                } else if (i.leaf == true) {\n                  i.isLeaf = true;\n                }\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n\n            _this3.addChildren(pid, res.result, _this3.treeData);\n\n            _this3.treeData = _toConsumableArray(_this3.treeData);\n          }\n\n          resolve();\n        });\n      });\n    },\n    addChildren: function addChildren(pid, children, treeArray) {\n      if (treeArray && treeArray.length > 0) {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = treeArray[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var item = _step2.value;\n\n            if (item.key == pid) {\n              if (!children || children.length == 0) {\n                item.isLeaf = true;\n              } else {\n                item.children = children;\n              }\n\n              break;\n            } else {\n              this.addChildren(pid, children, item.children);\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n    },\n    loadRoot: function loadRoot() {\n      var _this4 = this;\n\n      var param = {\n        pid: this.pidValue,\n        tableName: this.tableName,\n        text: this.text,\n        code: this.code,\n        pidField: this.pidField,\n        hasChildField: this.hasChildField,\n        condition: this.condition\n      };\n      getAction(this.url, param).then(function (res) {\n        if (res.success && res.result) {\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n\n          try {\n            for (var _iterator3 = res.result[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var i = _step3.value;\n              i.value = i.key;\n\n              if (i.leaf == false) {\n                i.isLeaf = false;\n              } else if (i.leaf == true) {\n                i.isLeaf = true;\n              }\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n\n          _this4.treeData = _toConsumableArray(res.result);\n        } else {\n          console.log(\"数根节点查询结果-else\", res);\n        }\n      });\n    },\n    onChange: function onChange(value) {\n      if (!value) {\n        this.$emit('change', '');\n        this.treeValue = null;\n      } else if (value instanceof Array) {\n        this.$emit('change', value.map(function (item) {\n          return item.value;\n        }).join(','));\n        this.treeValue = value;\n      } else {\n        this.$emit('change', value.value, value.label);\n        this.treeValue = value;\n      }\n    },\n    onSearch: function onSearch(value) {\n      console.log(value);\n    },\n    getCurrTreeData: function getCurrTreeData() {\n      return this.treeData;\n    },\n    validateProp: function validateProp() {\n      var _this5 = this;\n\n      var mycondition = this.condition;\n      return new Promise(function (resolve, reject) {\n        if (!mycondition) {\n          resolve();\n        } else {\n          try {\n            var test = JSON.parse(mycondition);\n            console.log(\"aaaaasdsdd\", _typeof(test));\n\n            if (_typeof(test) == 'object' && test) {\n              resolve();\n            } else {\n              _this5.$message.error(\"组件JTreeSelect-condition传值有误，需要一个json字符串!\");\n\n              reject();\n            }\n          } catch (e) {\n            _this5.$message.error(\"组件JTreeSelect-condition传值有误，需要一个json字符串!\");\n\n            reject();\n          }\n        }\n      });\n    }\n  },\n  //2.2新增 在组件内定义 指定父组件调用时候的传值属性和事件类型 这个牛逼\n  model: {\n    prop: 'value',\n    event: 'change'\n  }\n};",null]}