{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\components\\ListColumnsSetter.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\components\\ListColumnsSetter.vue","mtime":1648374777613},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Vue from \"vue\";\nexport default {\n  name: \"ListColumnsSetter\",\n  props: {\n    columns: {\n      type: Array,\n      required: true\n    },\n    defColumns: {\n      type: Array,\n      required: true\n    },\n    ignoreColumns: {\n      type: Array,\n      default: function _default() {\n        return ['rowIndex', 'action', 'flag'];\n      }\n    },\n    listName: {\n      type: String,\n      default: ''\n    }\n  },\n  model: {\n    prop: 'columns',\n    event: 'change'\n  },\n  data: function data() {\n    return {\n      defColumns_: [],\n      settingColumns: []\n    };\n  },\n  computed: {\n    ls_key: function ls_key() {\n      return this.$route.name + '/' + this.listName + ':colsettings';\n    }\n  },\n  mounted: function mounted() {\n    var _this$defColumns_;\n\n    (_this$defColumns_ = this.defColumns_).push.apply(_this$defColumns_, _toConsumableArray(this.defColumns));\n\n    this.initColumns();\n  },\n  methods: {\n    initColumns: function initColumns() {\n      var _this = this;\n\n      //权限过滤（列权限控制时打开，修改第二个参数为授权码前缀）\n      //this.defColumns_ = colAuthFilter(this.defColumns_,'testdemo:');\n      var colSettings = Vue.ls.get(this.ls_key);\n      var columns = [];\n\n      if (colSettings === null || colSettings === undefined) {\n        var allSettingColumns = [];\n        this.defColumns_.forEach(function (item, i, array) {\n          allSettingColumns.push(item.dataIndex);\n        });\n        this.settingColumns = allSettingColumns;\n        columns = this.defColumns_;\n      } else {\n        this.settingColumns = colSettings;\n        columns = this.defColumns_.filter(function (item) {\n          if (_this.ignoreColumns.includes(item.key) || _this.ignoreColumns.includes(item.dataIndex)) {\n            return true;\n          }\n\n          if (colSettings.includes(item.dataIndex)) {\n            return true;\n          }\n\n          return false;\n        });\n      }\n\n      this.$emit('change', columns);\n    },\n    //列设置更改事件\n    onColSettingsChange: function onColSettingsChange(checkedValues) {\n      var _this2 = this;\n\n      Vue.ls.set(this.ls_key, checkedValues, 7 * 24 * 60 * 60 * 1000);\n      this.settingColumns = checkedValues;\n      var columns = this.defColumns_.filter(function (item) {\n        if (_this2.ignoreColumns.includes(item.key) || _this2.ignoreColumns.includes(item.dataIndex)) {\n          return true;\n        }\n\n        if (_this2.settingColumns.includes(item.dataIndex)) {\n          return true;\n        }\n\n        return false;\n      });\n      this.$emit('change', columns);\n    }\n  }\n};",null]}