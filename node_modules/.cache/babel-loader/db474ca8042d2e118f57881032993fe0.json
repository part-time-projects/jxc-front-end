{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\views\\system\\modules\\DepartAuthModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\views\\system\\modules\\DepartAuthModal.vue","mtime":1648374778148},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { queryTreeListForRole, queryDepartPermission, saveDepartPermission } from '@/api/api';\nimport DepartDataruleModal from './DepartDataruleModal';\nexport default {\n  name: 'DepartAuthModal',\n  components: {\n    DepartDataruleModal: DepartDataruleModal\n  },\n  data: function data() {\n    return {\n      departId: \"\",\n      treeData: [],\n      defaultCheckedKeys: [],\n      checkedKeys: [],\n      halfCheckedKeys: [],\n      expandedKeysss: [],\n      allTreeKeys: [],\n      autoExpandParent: true,\n      checkStrictly: false,\n      title: \"部门权限配置\",\n      visible: false,\n      loading: false,\n      selectedKeys: []\n    };\n  },\n  methods: {\n    onTreeNodeSelect: function onTreeNodeSelect(id) {\n      if (id && id.length > 0) {\n        this.selectedKeys = id;\n      }\n\n      this.$refs.datarule.show(this.selectedKeys[0], this.departId);\n    },\n    onCheck: function onCheck(checkedKeys, _ref) {\n      var halfCheckedKeys = _ref.halfCheckedKeys;\n      // 保存选中的和半选中的，后面保存的时候合并提交\n      this.checkedKeys = checkedKeys;\n      this.halfCheckedKeys = halfCheckedKeys;\n    },\n    show: function show(departId) {\n      this.departId = departId;\n      this.loadData();\n    },\n    close: function close() {\n      this.reset();\n      this.$emit('close');\n      this.visible = false;\n    },\n    onExpand: function onExpand(expandedKeys) {\n      this.expandedKeysss = expandedKeys;\n      this.autoExpandParent = false;\n    },\n    reset: function reset() {\n      this.expandedKeysss = [];\n      this.checkedKeys = [];\n      this.defaultCheckedKeys = [];\n      this.loading = false;\n    },\n    expandAll: function expandAll() {\n      this.expandedKeysss = this.allTreeKeys;\n    },\n    closeAll: function closeAll() {\n      this.expandedKeysss = [];\n    },\n    checkALL: function checkALL() {\n      this.checkedKeys = this.allTreeKeys;\n    },\n    cancelCheckALL: function cancelCheckALL() {\n      this.checkedKeys = [];\n    },\n    handleCancel: function handleCancel() {\n      this.close();\n    },\n    handleSubmit: function handleSubmit() {\n      var that = this;\n\n      if (!that.departId) {\n        this.$message.warning('请点击选择一个部门!');\n      }\n\n      var checkedKeys = [].concat(_toConsumableArray(that.checkedKeys), _toConsumableArray(that.halfCheckedKeys));\n      var permissionIds = checkedKeys.join(\",\");\n      var params = {\n        departId: that.departId,\n        permissionIds: permissionIds,\n        lastpermissionIds: that.defaultCheckedKeys.join(\",\")\n      };\n      that.loading = true;\n      saveDepartPermission(params).then(function (res) {\n        if (res.success) {\n          that.$message.success(res.message);\n          that.loading = false;\n          that.loadData();\n        } else {\n          that.$message.error(res.message);\n          that.loading = false;\n        }\n      });\n    },\n    convertTreeListToKeyLeafPairs: function convertTreeListToKeyLeafPairs(treeList) {\n      var keyLeafPair = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = treeList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _step$value = _step.value,\n              key = _step$value.key,\n              isLeaf = _step$value.isLeaf,\n              children = _step$value.children;\n          keyLeafPair.push({\n            key: key,\n            isLeaf: isLeaf\n          });\n\n          if (children && children.length > 0) {\n            this.convertTreeListToKeyLeafPairs(children, keyLeafPair);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return keyLeafPair;\n    },\n    emptyCurrForm: function emptyCurrForm() {\n      this.form.resetFields();\n    },\n    loadData: function loadData() {\n      var _this = this;\n\n      queryTreeListForRole().then(function (res) {\n        _this.treeData = res.result.treeList;\n        _this.allTreeKeys = res.result.ids;\n\n        var keyLeafPairs = _this.convertTreeListToKeyLeafPairs(_this.treeData);\n\n        queryDepartPermission({\n          departId: _this.departId\n        }).then(function (res) {\n          // 过滤出 leaf node 即可，即选中的\n          // Tree组件中checkStrictly默认为false的时候，选中子节点，父节点会自动设置选中或半选中\n          // 保存 checkedKeys 以及 halfCheckedKeys 以便于未做任何操作时提交表单数据\n          var checkedKeys = _toConsumableArray(res.result).filter(function (key) {\n            var keyLeafPair = keyLeafPairs.filter(function (item) {\n              return item.key === key;\n            })[0];\n            return keyLeafPair && keyLeafPair.isLeaf;\n          });\n\n          var halfCheckedKeys = _toConsumableArray(res.result).filter(function (key) {\n            var keyLeafPair = keyLeafPairs.filter(function (item) {\n              return item.key === key;\n            })[0];\n            return keyLeafPair && !keyLeafPair.isLeaf;\n          });\n\n          _this.checkedKeys = _toConsumableArray(checkedKeys);\n          _this.halfCheckedKeys = _toConsumableArray(halfCheckedKeys);\n          _this.defaultCheckedKeys = [].concat(_toConsumableArray(halfCheckedKeys), _toConsumableArray(checkedKeys));\n          _this.expandedKeysss = _this.allTreeKeys;\n        });\n      });\n    }\n  }\n};",null]}