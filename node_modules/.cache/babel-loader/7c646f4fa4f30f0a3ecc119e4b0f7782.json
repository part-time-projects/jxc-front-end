{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\components\\OnlCgreportSelectModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\components\\OnlCgreportSelectModal.vue","mtime":1648374777614},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport '@/assets/less/TableExpand.less';\nimport { getAction } from '@/api/manage';\nimport { filterMultiDictText } from '@/components/dict/JDictSelectUtil';\nimport { filterObj } from '@/utils/util';\nexport default {\n  name: \"OnlCgreportSelectModal\",\n  mixins: [],\n  components: {},\n  props: {\n    title: {\n      type: String,\n      default: '选择'\n    },\n    reportId: {\n      type: String,\n      required: true\n    },\n    params: {\n      //对应sqlParams\n      type: Object,\n      default: function _default() {\n        return {};\n      } //函数体需带括号\n\n    },\n    multiSelectable: {\n      type: Boolean,\n      default: false\n    },\n    width: {\n      type: Number,\n      default: 1000\n    },\n    fullscreen: {\n      type: Boolean,\n      default: false\n    },\n    switchFullscreen: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data: function data() {\n    return {\n      visible: false,\n      //报表定义中的查询字段\n      queryFields: [],\n      //查询参数，多个页面的查询参数用 ReportId 作为键来区分\n      queryParamsMap: {},\n      //报表定义SQL中嵌入的参数\n      sqlParams: {},\n      sorter: {\n        column: '',\n        order: 'desc'\n      },\n      dictOptions: {},\n      toggleSearchStatus: false,\n      //搜索 展开/关闭\n      description: '',\n      url: {\n        getColumnsAndData: '/online/cgreport/api/getColumnsAndData/',\n        getqueryFields: '/online/cgreport/api/getQueryInfo/',\n        getSqlParams: '/online/cgreport/api/getParamsInfo/'\n      },\n      table: {\n        loading: true,\n        // 表头\n        columns: [],\n        //数据集\n        dataSource: [],\n        // 选择器\n        selectedRowKeys: [],\n        selectionRows: [],\n        scroll: {\n          x: true\n        },\n        // 分页参数\n        pagination: {\n          current: 1,\n          pageSize: 10,\n          pageSizeOptions: ['10', '20', '30'],\n          showTotal: function showTotal(total, range) {\n            return range[0] + '-' + range[1] + ' 共' + total + '条';\n          },\n          showQuickJumper: true,\n          showSizeChanger: true,\n          total: 0\n        }\n      },\n      cgreportHeadName: \"\"\n    };\n  },\n  mounted: function mounted() {\n    this.initSqlParams();\n    this.initQueryFields();\n  },\n  computed: {\n    queryParams: {\n      get: function get() {\n        return this.queryParamsMap[this.reportId];\n      },\n      set: function set(newVal) {\n        this.$set(this.queryParamsMap, this.reportId, newVal);\n      }\n    }\n  },\n  methods: {\n    //报表定义SQL中嵌入的参数\n    initSqlParams: function initSqlParams() {\n      var _this = this;\n\n      this.sqlParams = {};\n      getAction(\"\".concat(this.url.getSqlParams).concat(this.reportId)).then(function (res) {\n        if (res.success) {\n          if (res.result && res.result.length > 0) {\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n              for (var _iterator = res.result[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var i = _step.value;\n                //参数来自引用本Modal时设置的属性\n                _this.sqlParams['self_' + i.paramName] = !_this.params[i.paramName] ? \"\" : _this.params[i.paramName];\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n          }\n        } else {\n          _this.$message.warning(res.message);\n        } // this.loadData()\n\n      });\n    },\n    //报表的动态查询参数\n    initQueryFields: function initQueryFields() {\n      var _this2 = this;\n\n      getAction(\"\".concat(this.url.getqueryFields).concat(this.reportId)).then(function (res) {\n        if (res.success) {\n          _this2.queryFields = res.result;\n        } else {\n          _this2.$message.warning(res.message);\n        }\n\n        _this2.loadData();\n      });\n    },\n    //显示本Modal前，调用本函数传递引用页面form或table值作为查询条件参数；\n    //readonly为true，表示传入的有值参数不能修改。\n    initQueryParams: function initQueryParams(queryParams) {\n      var readOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var queryFields = [];\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.queryFields[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var item = _step2.value;\n          item.readOnly = false;\n\n          if (readOnly) {\n            for (var x in queryParams) {\n              if (item.field === x) {\n                if (queryParams[x]) item.readOnly = queryParams[x] !== '';\n                break;\n              }\n            }\n          }\n\n          queryFields.push(item);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      this.queryFields = queryFields;\n      this.queryParams = queryParams;\n      this.loadData();\n    },\n    loadData: function loadData(arg) {\n      var _this3 = this;\n\n      if (arg === 1) {\n        this.table.pagination.current = 1;\n      }\n\n      var params = this.getQueryParams(); //查询条件\n\n      this.table.loading = true;\n      getAction(\"\".concat(this.url.getColumnsAndData).concat(this.reportId), params).then(function (res) {\n        if (res.success) {\n          var _res$result = res.result,\n              data = _res$result.data,\n              columns = _res$result.columns,\n              cgreportHeadName = _res$result.cgreportHeadName,\n              dictOptions = _res$result.dictOptions,\n              fieldHrefSlots = _res$result.fieldHrefSlots;\n          _this3.dictOptions = dictOptions;\n\n          for (var a = 0; a < columns.length; a++) {\n            if (columns[a].customRender) {\n              (function () {\n                var field_name = columns[a].customRender;\n\n                columns[a].customRender = function (t) {\n                  return t ? filterMultiDictText(_this3.dictOptions[field_name], t + '') : t;\n                };\n              })();\n            }\n          }\n\n          _this3.table.columns = _toConsumableArray(columns);\n          _this3.cgreportHeadName = cgreportHeadName;\n          _this3.fieldHrefSlots = fieldHrefSlots;\n\n          if (data) {\n            _this3.table.pagination.total = Number(data.total);\n            _this3.table.dataSource = data.records;\n          } else {\n            _this3.table.pagination.total = 0;\n            _this3.table.dataSource = [];\n          }\n        } else {\n          _this3.$message.warn('查询失败：' + res.message);\n        }\n      }).catch(function (e) {\n        console.error(e);\n\n        _this3.$message.error('查询失败');\n      }).finally(function () {\n        _this3.table.loading = false;\n      });\n    },\n    getQueryParams: function getQueryParams() {\n      var param = Object.assign({}, this.queryParams, this.sorter, this.sqlParams);\n      param.pageNo = this.table.pagination.current;\n      param.pageSize = this.table.pagination.pageSize;\n      return filterObj(param);\n    },\n    searchByQuery: function searchByQuery() {\n      this.loadData(1);\n    },\n    searchReset: function searchReset() {\n      var queryParams = {};\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.queryFields[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var item = _step3.value;\n          if (item.readOnly) queryParam[item.field] = this.queryParams[item.field];\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      this.queryParams = queryParams;\n      this.loadData(1);\n    },\n    handleToggleSearch: function handleToggleSearch() {\n      this.toggleSearchStatus = !this.toggleSearchStatus;\n    },\n    handleChangeInTableSelect: function handleChangeInTableSelect(selectedRowKeys, selectionRows) {\n      this.table.selectedRowKeys = selectedRowKeys;\n      this.table.selectionRows = selectionRows;\n    },\n    handleChangeInTable: function handleChangeInTable(pagination, filters, sorter) {\n      //分页、排序、筛选变化时触发\n      if (Object.keys(sorter).length > 0) {\n        this.sorter.column = sorter.field;\n        this.sorter.order = 'ascend' === sorter.order ? 'asc' : 'desc';\n      } else {\n        this.sorter.column = null;\n        this.sorter.order = null;\n      }\n\n      this.table.pagination = pagination;\n      this.loadData();\n    },\n    handleOk: function handleOk() {\n      this.$emit(\"callback\", this.table.selectionRows);\n    }\n  }\n};",{"version":3,"sources":["OnlCgreportSelectModal.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <j-modal\r\n    :visible.sync=\"visible\"\r\n    :width=\"width\"\r\n    :title=\"title\"\r\n    :fullscreen.sync=\"fullscreen\"\r\n    :switchFullscreen=\"switchFullscreen\"\r\n    @ok=\"handleOk\">\r\n`\r\n    <div class=\"table-page-search-wrapper\">\r\n      <a-form layout=\"inline\">\r\n        <a-row :gutter=\"24\" v-if=\"queryFields && queryFields.length>0\">\r\n          <template v-for=\"(item,index) in queryFields\">\r\n            <template v-if=\"!item.readOnly\">\r\n              <a-col v-if=\"item.view.indexOf('Date')>=0\" :md=\"12\" :sm=\"16\" :key=\" 'query'+index \" v-show=\"index<3 || toggleSearchStatus\">\r\n                <onl-cgreport-query-form-item :queryParam=\"queryParams\" :item=\"item\" :dictOptions=\"dictOptions\"></onl-cgreport-query-form-item>\r\n              </a-col>\r\n              <a-col v-else  :md=\"6\" :sm=\"8\" :key=\" 'query'+index \" v-show=\"index<3 || toggleSearchStatus\">\r\n                <onl-cgreport-query-form-item :queryParam=\"queryParams\" :item=\"item\" :dictOptions=\"dictOptions\"></onl-cgreport-query-form-item>\r\n              </a-col>\r\n            </template>\r\n            <template v-else>\r\n              <a-col :md=\"6\" :sm=\"8\" v-show=\"index<3 || toggleSearchStatus\">\r\n                <a-form-item :label=\"item.label\">\r\n                  <a-input disabled v-model=\"queryParams[item.field]\"></a-input>\r\n                </a-form-item>\r\n              </a-col>\r\n            </template>\r\n          </template>\r\n\r\n          <a-col :md=\"6\" :sm=\"8\">\r\n            <span style=\"float: left;overflow: hidden;\" class=\"table-page-search-submitButtons\">\r\n              <a-button type=\"primary\" @click=\"searchByQuery\" icon=\"search\">查询</a-button>\r\n              <a-button @click=\"searchReset\" icon=\"reload\" style=\"margin-left: 8px\">重置</a-button>\r\n              <a @click=\"handleToggleSearch\" style=\"margin-left: 8px\" v-if=\"queryFields.length>3\">\r\n                {{ toggleSearchStatus ? '收起' : '展开' }}\r\n                <a-icon :type=\"toggleSearchStatus ? 'up' : 'down'\"/>\r\n              </a>\r\n            </span>\r\n          </a-col>\r\n        </a-row>\r\n      </a-form>\r\n    </div>\r\n\r\n    <a-table\r\n      ref=\"table\"\r\n      size=\"small\"\r\n      bordered\r\n      rowKey=\"id\"\r\n      :columns=\"table.columns\"\r\n      :dataSource=\"table.dataSource\"\r\n      :pagination=\"table.pagination\"\r\n      :loading=\"table.loading\"\r\n      :scroll=\"table.scroll\"\r\n      :rowSelection=\"{\r\n        fixed: true,\r\n        columnWidth: 40,\r\n        type: multiSelectable ? 'checkbox':'radio',\r\n        selectedRowKeys: table.selectedRowKeys,\r\n        onChange: handleChangeInTableSelect}\"\r\n      @change=\"handleChangeInTable\"\r\n      style=\"min-height: 300px\"\r\n      class=\"j-table-force-nowrap\">\r\n    </a-table>\r\n\r\n  </j-modal>\r\n</template>\r\n\r\n<script>\r\n  import '@/assets/less/TableExpand.less'\r\n  import { getAction } from '@/api/manage'\r\n  import { filterMultiDictText } from '@/components/dict/JDictSelectUtil'\r\n  import {filterObj} from '@/utils/util';\r\n\r\n  export default {\r\n    name: \"OnlCgreportSelectModal\",\r\n    mixins: [],\r\n    components: {\r\n    },\r\n\r\n    props: {\r\n      title: {\r\n        type: String,\r\n        default: '选择'\r\n      },\r\n      reportId: {\r\n        type: String,\r\n        required: true\r\n      },\r\n      params: {//对应sqlParams\r\n        type: Object,\r\n        default:() => ({}) //函数体需带括号\r\n        },\r\n      multiSelectable: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      width: {\r\n        type: Number,\r\n        default: 1000\r\n      },\r\n      fullscreen: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      switchFullscreen: {\r\n        type: Boolean,\r\n        default: true\r\n      },\r\n    },\r\n\r\n    data() {\r\n      return {\r\n        visible: false,\r\n        //报表定义中的查询字段\r\n        queryFields: [],\r\n        //查询参数，多个页面的查询参数用 ReportId 作为键来区分\r\n        queryParamsMap: {},\r\n        //报表定义SQL中嵌入的参数\r\n        sqlParams:{},\r\n        sorter: {\r\n          column: '',\r\n          order: 'desc',\r\n        },\r\n        dictOptions: {},\r\n        toggleSearchStatus: false, //搜索 展开/关闭\r\n        description: '',\r\n        url: {\r\n          getColumnsAndData: '/online/cgreport/api/getColumnsAndData/',\r\n          getqueryFields: '/online/cgreport/api/getQueryInfo/',\r\n          getSqlParams:'/online/cgreport/api/getParamsInfo/'\r\n        },\r\n        table: {\r\n          loading: true,\r\n          // 表头\r\n          columns: [],\r\n          //数据集\r\n          dataSource: [],\r\n          // 选择器\r\n          selectedRowKeys: [],\r\n          selectionRows: [],\r\n          scroll: { x: true },\r\n          // 分页参数\r\n          pagination: {\r\n            current: 1,\r\n            pageSize: 10,\r\n            pageSizeOptions: ['10', '20', '30'],\r\n            showTotal: (total, range) => {\r\n              return range[0] + '-' + range[1] + ' 共' + total + '条'\r\n            },\r\n            showQuickJumper: true,\r\n            showSizeChanger: true,\r\n            total: 0\r\n          }\r\n        },\r\n        cgreportHeadName:\"\"\r\n      }\r\n    },\r\n\r\n    mounted() {\r\n      this.initSqlParams();\r\n      this.initQueryFields();\r\n    },\r\n\r\n    computed: {\r\n      queryParams: {\r\n        get() {\r\n          return this.queryParamsMap[this.reportId]\r\n        },\r\n        set(newVal) {\r\n          this.$set(this.queryParamsMap, this.reportId, newVal)\r\n        }\r\n      }\r\n    },\r\n    methods: {\r\n      //报表定义SQL中嵌入的参数\r\n      initSqlParams(){\r\n        this.sqlParams={}\r\n        getAction(`${this.url.getSqlParams}${this.reportId}`).then((res) => {\r\n          if (res.success) {\r\n            if(res.result && res.result.length>0){\r\n              for(let i of res.result){\r\n                //参数来自引用本Modal时设置的属性\r\n                this.sqlParams['self_'+i.paramName] = (!this.params[i.paramName]) ? \"\" : this.params[i.paramName];\r\n              }\r\n            }\r\n          } else {\r\n            this.$message.warning(res.message)\r\n          }\r\n          // this.loadData()\r\n        })\r\n      },\r\n\r\n      //报表的动态查询参数\r\n      initQueryFields() {\r\n        getAction(`${this.url.getqueryFields}${this.reportId}`).then((res) => {\r\n          if (res.success) {\r\n            this.queryFields = res.result\r\n          } else {\r\n            this.$message.warning(res.message)\r\n          }\r\n          this.loadData()\r\n        })\r\n      },\r\n\r\n      //显示本Modal前，调用本函数传递引用页面form或table值作为查询条件参数；\r\n      //readonly为true，表示传入的有值参数不能修改。\r\n      initQueryParams(queryParams, readOnly = true) {\r\n        let queryFields = [];\r\n        for(let item of this.queryFields) {\r\n          item.readOnly = false;\r\n          if (readOnly){\r\n            for(let x in queryParams){\r\n              if (item.field === x) {\r\n                if (queryParams[x]) item.readOnly = queryParams[x]!=='';\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          queryFields.push(item);\r\n        }\r\n        this.queryFields = queryFields;\r\n        this.queryParams = queryParams;\r\n        this.loadData();\r\n      },\r\n\r\n      loadData(arg) {\r\n        if (arg === 1) {\r\n          this.table.pagination.current = 1\r\n        }\r\n        let params = this.getQueryParams();//查询条件\r\n        this.table.loading = true\r\n\r\n        getAction(`${this.url.getColumnsAndData}${this.reportId}`, params).then(res => {\r\n          if (res.success) {\r\n            let { data, columns, cgreportHeadName, dictOptions, fieldHrefSlots } = res.result\r\n\r\n            this.dictOptions = dictOptions\r\n            for(let a=0;a<columns.length;a++){\r\n              if(columns[a].customRender){\r\n                let field_name = columns[a].customRender;\r\n                columns[a].customRender = (t => t ? filterMultiDictText(this.dictOptions[field_name], t + '') : t)\r\n              }\r\n            }\r\n            this.table.columns = [...columns]\r\n            this.cgreportHeadName = cgreportHeadName\r\n            this.fieldHrefSlots = fieldHrefSlots\r\n            if (data) {\r\n              this.table.pagination.total = Number(data.total)\r\n              this.table.dataSource = data.records\r\n            } else {\r\n              this.table.pagination.total = 0\r\n              this.table.dataSource = []\r\n            }\r\n\r\n          }else{\r\n            this.$message.warn('查询失败：'+res.message)\r\n          }\r\n\r\n        }).catch((e) => {\r\n          console.error(e)\r\n          this.$message.error('查询失败')\r\n        }).finally(() => {\r\n          this.table.loading = false\r\n        })\r\n      },\r\n      getQueryParams() {\r\n        let param = Object.assign({}, this.queryParams, this.sorter,this.sqlParams);\r\n        param.pageNo = this.table.pagination.current;\r\n        param.pageSize = this.table.pagination.pageSize;\r\n        return filterObj(param);\r\n      },\r\n      searchByQuery() {\r\n        this.loadData(1);\r\n      },\r\n      searchReset() {\r\n        let queryParams = {};\r\n        for(let item of this.queryFields) {\r\n          if (item.readOnly)  queryParam[item.field] = this.queryParams[item.field];\r\n        }\r\n        this.queryParams = queryParams;\r\n        this.loadData(1);\r\n      },\r\n      handleToggleSearch() {\r\n        this.toggleSearchStatus = !this.toggleSearchStatus;\r\n      },\r\n      handleChangeInTableSelect(selectedRowKeys, selectionRows) {\r\n        this.table.selectedRowKeys = selectedRowKeys\r\n        this.table.selectionRows = selectionRows\r\n      },\r\n      handleChangeInTable(pagination, filters, sorter) {\r\n        //分页、排序、筛选变化时触发\r\n        if (Object.keys(sorter).length > 0) {\r\n          this.sorter.column = sorter.field\r\n          this.sorter.order = 'ascend' === sorter.order ? 'asc' : 'desc'\r\n        } else {\r\n          this.sorter.column = null\r\n          this.sorter.order = null\r\n        }\r\n        this.table.pagination = pagination\r\n        this.loadData()\r\n      },\r\n\r\n      handleOk(){\r\n        this.$emit(\"callback\", this.table.selectionRows);\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n  .div {\r\n    display: flex;\r\n    align-items: center;\r\n    height: 500px\r\n  }\r\n</style>"],"sourceRoot":"src/views/erp/components"}]}