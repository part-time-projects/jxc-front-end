{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\views\\modules\\online\\cgform\\auto\\OnlCgformAutoList.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\views\\modules\\online\\cgform\\auto\\OnlCgformAutoList.vue","mtime":1648374778125},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { HrefJump } from '@/mixins/OnlAutoListMixin';\nimport { postAction, getAction, deleteAction, downFile } from '@/api/manage';\nimport { filterMultiDictText } from '@/components/dict/JDictSelectUtil';\nimport { cloneObject, filterObj } from '@/utils/util';\nimport JImportModal from '@/components/jeecg/JImportModal';\nimport JSuperQuery from '@comp/jeecg/JSuperQuery';\nimport ButtonExpHandler from './ButtonExpHandler';\nexport default {\n  name: 'OnlCgFormAutoList',\n  mixins: [HrefJump],\n  components: {\n    JSuperQuery: JSuperQuery,\n    JImportModal: JImportModal\n  },\n  data: function data() {\n    return {\n      code: '',\n      description: '在线报表功能测试页面',\n      currentTableName: \"\",\n      url: {\n        getQueryInfo: '/online/cgform/api/getQueryInfo/',\n        getColumns: '/online/cgform/api/getColumns/',\n        getData: '/online/cgform/api/getData/',\n        optPre: \"/online/cgform/api/form/\",\n        exportXls: '/online/cgform/api/exportXls/',\n        buttonAction: '/online/cgform/api/doButton'\n      },\n      flowCodePre: \"onl_\",\n      isorter: {\n        column: 'createTime',\n        order: 'desc'\n      },\n      //dictOptions:{fieldName:[]}\n      dictOptions: {},\n      cgButtonLinkList: [],\n      cgButtonList: [],\n      queryInfo: [],\n      // 查询参数，多个页面的查询参数用 code 作为键来区分\n      queryParamsMap: {},\n      toggleSearchStatus: false,\n      table: {\n        loading: true,\n        scroll: {\n          x: false\n        },\n        // 表头\n        columns: [],\n        //数据集\n        dataSource: [],\n        // 选择器\n        selectedRowKeys: [],\n        selectionRows: [],\n        // 分页参数\n        pagination: {}\n      },\n      metaPagination: {\n        current: 1,\n        pageSize: 10,\n        pageSizeOptions: ['10', '20', '30'],\n        showTotal: function showTotal(total, range) {\n          return range[0] + '-' + range[1] + ' 共' + total + '条';\n        },\n        showQuickJumper: true,\n        showSizeChanger: true,\n        total: 0\n      },\n      actionColumn: {\n        title: '操作',\n        dataIndex: 'action',\n        scopedSlots: {\n          customRender: 'action'\n        },\n        fixed: \"right\",\n        align: \"center\",\n        width: 150\n      },\n      formTemplate: \"99\",\n      EnhanceJS: '',\n      hideColumns: [],\n      buttonSwitch: {\n        add: true,\n        update: true,\n        delete: true,\n        batch_delete: true,\n        import: true,\n        export: true,\n        detail: true\n      },\n      hasBpmStatus: false,\n      checkboxFlag: false,\n      // 高级查询\n      superQuery: {\n        // 字段列表\n        fieldList: [],\n        // 查询参数\n        params: '',\n        // 查询条件拼接方式 'and' or 'or'\n        matchType: 'and'\n      }\n    };\n  },\n  created: function created() {\n    this.initAutoList();\n  },\n  mounted: function mounted() {\n    this.cgButtonJsHandler('mounted');\n  },\n  watch: {\n    '$route': function $route() {\n      // 刷新参数放到这里去触发，就可以刷新相同界面了\n      this.initAutoList();\n    }\n  },\n  computed: {\n    rowSelectionConfig: function rowSelectionConfig() {\n      if (!this.checkboxFlag) {\n        return null;\n      }\n\n      return {\n        fixed: true,\n        selectedRowKeys: this.table.selectedRowKeys,\n        onChange: this.handleChangeInTableSelect\n      };\n    },\n    queryParam: {\n      get: function get() {\n        return this.queryParamsMap[this.code];\n      },\n      set: function set(newVal) {\n        this.$set(this.queryParamsMap, this.code, newVal);\n      }\n    }\n  },\n  methods: {\n    hasBpmStatusFilter: function hasBpmStatusFilter() {\n      var columnObjs = this.table.columns;\n      var columns = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = columnObjs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var item = _step.value;\n          columns.push(item.dataIndex);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (columns.includes('bpm_status') || columns.includes('BPM_STATUS')) {\n        this.hasBpmStatus = true;\n      } else {\n        this.hasBpmStatus = false;\n      }\n    },\n    initQueryInfo: function initQueryInfo() {\n      var _this = this;\n\n      getAction(\"\".concat(this.url.getQueryInfo).concat(this.code)).then(function (res) {\n        console.log(\"--onlineList-获取查询条件配置\", res);\n\n        if (res.success) {\n          _this.queryInfo = res.result;\n        } else {\n          _this.$message.warning(res.message);\n        }\n      });\n    },\n    initAutoList: function initAutoList() {\n      var _this2 = this;\n\n      if (!this.$route.params.code) {\n        return false;\n      } // 清空高级查询条件\n\n\n      this.superQuery.params = '';\n\n      if (this.$refs.superQuery) {\n        this.$refs.superQuery.handleReset();\n      }\n\n      this.table.loading = true;\n      this.code = this.$route.params.code;\n\n      if (!this.queryParam) {\n        this.queryParam = {};\n      }\n\n      getAction(\"\".concat(this.url.getColumns).concat(this.code)).then(function (res) {\n        console.log(\"--onlineList-加载动态列>>\", res);\n\n        if (res.success) {\n          if (res.result.checkboxFlag == 'Y') {\n            _this2.checkboxFlag = true;\n          } else {\n            _this2.checkboxFlag = false;\n          }\n\n          if (res.result.paginationFlag == 'Y') {\n            _this2.table.pagination = _objectSpread({}, _this2.metaPagination);\n          } else {\n            _this2.table.pagination = false;\n          }\n\n          _this2.fieldHrefSlots = res.result.fieldHrefSlots;\n          _this2.dictOptions = res.result.dictOptions;\n          _this2.formTemplate = res.result.formTemplate;\n          _this2.description = res.result.description;\n          _this2.currentTableName = res.result.currentTableName;\n\n          _this2.initCgButtonList(res.result.cgButtonList);\n\n          _this2.initCgEnhanceJs(res.result.enhanceJs);\n\n          _this2.initButtonSwitch(res.result.hideColumns);\n\n          var currColumns = res.result.columns;\n\n          for (var a = 0; a < currColumns.length; a++) {\n            if (currColumns[a].customRender) {\n              (function () {\n                var dictCode = currColumns[a].customRender;\n                var replaceFlag = '_replace_text_';\n\n                if (dictCode.startsWith(replaceFlag)) {\n                  var textFieldName = dictCode.replace(replaceFlag, '');\n\n                  currColumns[a].customRender = function (text, record) {\n                    return record[textFieldName];\n                  };\n                } else {\n                  currColumns[a].customRender = function (text) {\n                    return filterMultiDictText(_this2.dictOptions[dictCode], text);\n                  };\n                }\n              })();\n            }\n          }\n\n          if (res.result.scrollFlag == 1) {\n            _this2.table.scroll = {\n              x: '115%'\n            };\n          } else {\n            _this2.table.scroll = {\n              x: false\n            };\n          }\n\n          currColumns.push(_this2.actionColumn);\n          _this2.table.columns = _toConsumableArray(currColumns);\n\n          _this2.hasBpmStatusFilter();\n\n          _this2.loadData();\n\n          _this2.initQueryInfo(); //加载新路由，清空checkbox选中\n\n\n          _this2.table.selectedRowKeys = [];\n        } else {\n          _this2.$message.warning(res.message);\n        }\n      });\n    },\n    loadData: function loadData(arg) {\n      var _this3 = this;\n\n      if (this.table.pagination) {\n        if (arg == 1) {\n          this.table.pagination.current = 1;\n        }\n\n        this.table.loading = true;\n        var params = this.getQueryParams(); //查询条件\n\n        console.log(\"--onlineList-查询条件-->\", params);\n        getAction(\"\".concat(this.url.getData).concat(this.code), params).then(function (res) {\n          console.log(\"--onlineList-列表数据\", res);\n\n          if (res.success) {\n            var result = res.result;\n\n            if (Number(result.total) > 0) {\n              _this3.table.pagination.total = Number(result.total);\n              _this3.table.dataSource = result.records;\n            } else {\n              _this3.table.pagination.total = 0;\n              _this3.table.dataSource = []; //this.$message.warning(\"查无数据\")\n            }\n          } else {\n            _this3.$message.warning(res.message);\n          }\n        }).finally(function () {\n          _this3.table.loading = false;\n        });\n      } else {\n        this.loadDataNoPage();\n      }\n    },\n    loadDataNoPage: function loadDataNoPage() {\n      var _this4 = this;\n\n      this.table.loading = true;\n      var param = this.getQueryParams(); //查询条件\n\n      param['pageSize'] = -521;\n      getAction(\"\".concat(this.url.getData).concat(this.code), filterObj(param)).then(function (res) {\n        console.log(\"--onlineList-列表数据\", res);\n\n        if (res.success) {\n          var result = res.result;\n\n          if (Number(result.total) > 0) {\n            _this4.table.dataSource = result.records;\n          } else {\n            _this4.table.dataSource = [];\n          }\n        } else {\n          _this4.$message.warning(res.message);\n        }\n      }).finally(function () {\n        _this4.table.loading = false;\n      });\n    },\n    getQueryParams: function getQueryParams() {\n      var param = Object.assign({}, this.queryParam, this.isorter);\n      param.pageNo = this.table.pagination.current;\n      param.pageSize = this.table.pagination.pageSize;\n      param.superQueryMatchType = this.superQuery.matchType;\n      param.superQueryParams = encodeURIComponent(this.superQuery.params);\n      return filterObj(param);\n    },\n    handleChangeInTableSelect: function handleChangeInTableSelect(selectedRowKeys, selectionRows) {\n      this.table.selectedRowKeys = selectedRowKeys;\n      this.table.selectionRows = selectionRows;\n      this.selectedRowKeys = selectedRowKeys;\n    },\n    handleTableChange: function handleTableChange(pagination, filters, sorter) {\n      //TODO 筛选\n      if (Object.keys(sorter).length > 0) {\n        this.isorter.column = sorter.field;\n        this.isorter.order = \"ascend\" == sorter.order ? \"asc\" : \"desc\";\n      }\n\n      this.table.pagination = pagination;\n      this.loadData();\n    },\n    handleAdd: function handleAdd() {\n      this.cgButtonJsHandler('beforeAdd');\n      this.$refs.modal.add(this.formTemplate);\n    },\n    handleImportXls: function handleImportXls() {\n      this.$refs.importModal.show();\n    },\n    importOk: function importOk() {\n      this.loadData(1);\n    },\n    handleExportXls2: function handleExportXls2() {\n      var param = this.queryParam;\n\n      if (this.table.selectedRowKeys && this.table.selectedRowKeys.length > 0) {\n        param['selections'] = this.table.selectedRowKeys.join(\",\");\n      }\n\n      var paramsStr = encodeURI(JSON.stringify(param));\n      console.log('paramsStr: ' + paramsStr);\n      var url = window._CONFIG['domianURL'] + this.url.exportXls + this.code + \"?paramsStr=\" + paramsStr;\n      window.location.href = url;\n    },\n    handleExportXls: function handleExportXls() {\n      var _this5 = this;\n\n      var param = this.queryParam;\n\n      if (this.table.selectedRowKeys && this.table.selectedRowKeys.length > 0) {\n        param['selections'] = this.table.selectedRowKeys.join(\",\");\n      }\n\n      console.log(\"导出参数\", param);\n      var paramsStr = JSON.stringify(filterObj(param));\n      downFile(this.url.exportXls + this.code, {\n        paramsStr: paramsStr\n      }).then(function (data) {\n        if (!data) {\n          _this5.$message.warning(\"文件下载失败\");\n\n          return;\n        }\n\n        if (typeof window.navigator.msSaveBlob !== 'undefined') {\n          window.navigator.msSaveBlob(new Blob([data]), _this5.description + '.xls');\n        } else {\n          var url = window.URL.createObjectURL(new Blob([data]));\n          var link = document.createElement('a');\n          link.style.display = 'none';\n          link.href = url;\n          link.setAttribute('download', _this5.description + '.xls');\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link); //下载完成移除元素\n\n          window.URL.revokeObjectURL(url); //释放掉blob对象\n        }\n      });\n    },\n    handleEdit: function handleEdit(record) {\n      this.cgButtonLinkHandler(record, \"beforeEdit\", \"js\");\n      this.$refs.modal.edit(this.formTemplate, record.id);\n    },\n    showLinkButton: function showLinkButton(item, record) {\n      var btn = new ButtonExpHandler(item.exp, record);\n      return btn.show;\n    },\n    handleDetail: function handleDetail(record) {\n      this.$refs.modal.detail(this.formTemplate, record.id);\n    },\n    handleDeleteOne: function handleDeleteOne(record) {\n      this.cgButtonLinkHandler(record, \"beforeDelete\", \"js\");\n      this.handleDelete(record.id);\n    },\n    handleDelete: function handleDelete(id) {\n      var _this6 = this;\n\n      deleteAction(this.url.optPre + this.code + \"/\" + id).then(function (res) {\n        if (res.success) {\n          _this6.$message.success(res.message);\n\n          _this6.loadData();\n        } else {\n          _this6.$message.warning(res.message);\n        }\n      });\n    },\n    handleFormSuccess: function handleFormSuccess() {\n      this.loadData();\n    },\n    // 查询完 schema 后，生成高级查询的字段列表\n    handleGetSchema: function handleGetSchema(schema) {\n      if (schema && schema.properties) {\n        var setField = function setField(array, field) {\n          var type = field.type || 'string';\n          type = type === 'inputNumber' ? 'number' : type;\n          array.push({\n            type: type,\n            value: field.key,\n            text: field.title,\n            // 额外字典参数\n            dictCode: field.dictCode,\n            dictTable: field.dictTable,\n            dictText: field.dictText,\n            options: field.enum || field.options,\n            order: field.order\n          });\n        };\n\n        var fieldList = [];\n\n        for (var key in schema.properties) {\n          if (!schema.properties.hasOwnProperty(key)) {\n            continue;\n          }\n\n          var field = schema.properties[key]; // tab = 子表\n\n          if (field.view === 'tab') {\n            var subTable = {\n              type: 'sub-table',\n              value: field.key,\n              text: field.describe,\n              children: []\n            };\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = field.columns[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var column = _step2.value;\n                setField(subTable.children, column);\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n\n            fieldList.push(subTable);\n          } else {\n            field.key = key;\n            setField(fieldList, field);\n          }\n        } // 冒泡排序\n\n\n        for (var i = 0; i < fieldList.length; i++) {\n          for (var j = i + 1; j < fieldList.length; j++) {\n            var temp1 = fieldList[i];\n            var temp2 = fieldList[j];\n\n            if (temp1.order > temp2.order) {\n              fieldList[i] = temp2;\n              fieldList[j] = temp1;\n            }\n          }\n        }\n\n        this.superQuery.fieldList = fieldList;\n      }\n    },\n    onClearSelected: function onClearSelected() {\n      this.table.selectedRowKeys = [];\n      this.table.selectionRows = [];\n    },\n    getImgView: function getImgView(text) {\n      if (text && text.indexOf(\",\") > 0) {\n        text = text.substring(0, text.indexOf(\",\"));\n      }\n\n      return window._CONFIG['staticDomainURL'] + \"/\" + text;\n    },\n    downloadRowFile: function downloadRowFile(text) {\n      if (!text) {\n        this.$message.warning(\"未知的文件\");\n        return;\n      }\n\n      if (text.indexOf(\",\") > 0) {\n        text = text.substring(0, text.indexOf(\",\"));\n      }\n\n      window.open(window._CONFIG['staticDomainURL'] + \"/\" + text); //TODO 下载的方法\n    },\n    handleDelBatch: function handleDelBatch() {\n      if (this.table.selectedRowKeys.length <= 0) {\n        this.$message.warning('请选择一条记录！');\n        return false;\n      } else {\n        var ids = \"\";\n        var that = this;\n        that.table.selectedRowKeys.forEach(function (val) {\n          ids += val + \",\";\n        });\n        that.$confirm({\n          title: \"确认删除\",\n          content: \"是否删除选中数据?\",\n          onOk: function onOk() {\n            that.handleDelete(ids);\n            that.onClearSelected();\n          }\n        });\n      }\n    },\n    searchByquery: function searchByquery() {\n      this.loadData(1);\n    },\n    searchReset: function searchReset() {\n      this.queryParam = {};\n      this.loadData(1);\n    },\n    handleToggleSearch: function handleToggleSearch() {\n      this.toggleSearchStatus = !this.toggleSearchStatus;\n    },\n    getFormatDate: function getFormatDate(text) {\n      if (!text) {\n        return '';\n      }\n\n      var a = text;\n\n      if (a.length > 10) {\n        a = a.substring(0, 10);\n      }\n\n      return a;\n    },\n    getImportUrl: function getImportUrl() {\n      return '/online/cgform/api/importXls/' + this.code;\n    },\n    initCgEnhanceJs: function initCgEnhanceJs(enhanceJs) {\n      //console.log(\"--onlineList-js增强\",enhanceJs)\n      if (enhanceJs) {\n        var Obj = eval(\"(\" + enhanceJs + \")\");\n        this.EnhanceJS = new Obj(getAction, postAction, deleteAction);\n        this.cgButtonJsHandler('created');\n      } else {\n        this.EnhanceJS = '';\n      }\n    },\n    initCgButtonList: function initCgButtonList(btnList) {\n      var linkArr = [];\n      var buttonArr = [];\n\n      if (btnList && btnList.length > 0) {\n        for (var i = 0; i < btnList.length; i++) {\n          var temp = btnList[i];\n\n          if (temp.buttonStyle == 'button') {\n            buttonArr.push(temp);\n          } else if (temp.buttonStyle == 'link') {\n            linkArr.push(temp);\n          }\n        }\n      }\n\n      this.cgButtonLinkList = [].concat(linkArr);\n      this.cgButtonList = [].concat(buttonArr);\n    },\n    cgButtonJsHandler: function cgButtonJsHandler(buttonCode) {\n      if (this.EnhanceJS[buttonCode]) {\n        this.EnhanceJS[buttonCode](this);\n      }\n    },\n    cgButtonActionHandler: function cgButtonActionHandler(buttonCode) {\n      var _this7 = this;\n\n      //处理自定义button的 需要配置该button自定义sql\n      if (!this.table.selectedRowKeys || this.table.selectedRowKeys.length == 0) {\n        this.$message.warning(\"请先选中一条记录\");\n        return false;\n      }\n\n      if (this.table.selectedRowKeys.length > 1) {\n        this.$message.warning(\"请只选中一条记录\");\n        return false;\n      }\n\n      var params = {\n        formId: this.code,\n        buttonCode: buttonCode,\n        dataId: this.table.selectedRowKeys[0]\n      };\n      console.log(\"自定义按钮请求后台参数：\", params);\n      postAction(this.url.buttonAction, params).then(function (res) {\n        if (res.success) {\n          _this7.loadData();\n\n          _this7.$message.success(\"处理完成!\");\n        } else {\n          _this7.$message.warning(\"处理失败!\");\n        }\n      });\n    },\n    cgButtonLinkHandler: function cgButtonLinkHandler(record, buttonCode, optType) {\n      var _this8 = this;\n\n      if (optType == \"js\") {\n        if (this.EnhanceJS[buttonCode]) {\n          this.EnhanceJS[buttonCode](this, record);\n        }\n      } else if (optType == \"action\") {\n        var params = {\n          formId: this.code,\n          buttonCode: buttonCode,\n          dataId: record.id\n        };\n        console.log(\"自定义按钮link请求后台参数：\", params);\n        postAction(this.url.buttonAction, params).then(function (res) {\n          if (res.success) {\n            _this8.loadData();\n\n            _this8.$message.success(\"处理完成!\");\n          } else {\n            _this8.$message.warning(\"处理失败!\");\n          }\n        });\n      }\n    },\n    initButtonSwitch: function initButtonSwitch(hideColumns) {\n      var _this9 = this;\n\n      Object.keys(this.buttonSwitch).forEach(function (key) {\n        _this9.buttonSwitch[key] = true;\n      });\n\n      if (hideColumns && hideColumns.length > 0) {\n        Object.keys(this.buttonSwitch).forEach(function (key) {\n          if (hideColumns.indexOf(key) >= 0) {\n            _this9.buttonSwitch[key] = false;\n          }\n        });\n      }\n    },\n    // 高级查询\n    handleSuperQuery: function handleSuperQuery(params, matchType) {\n      if (!params || params.length === 0) {\n        this.superQuery.params = '';\n      } else {\n        this.superQuery.params = JSON.stringify(params);\n      }\n\n      this.superQuery.matchType = matchType;\n      this.loadData();\n    }\n  }\n};",null]}