{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\components\\jeecg\\JMarkdownEditor\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\components\\jeecg\\JMarkdownEditor\\index.vue","mtime":1648374777536},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\nimport 'codemirror/lib/codemirror.css';\nimport 'tui-editor/dist/tui-editor.css';\nimport 'tui-editor/dist/tui-editor-contents.css';\nimport Editor from 'tui-editor';\nimport defaultOptions from './default-options';\nexport default {\n  name: 'JMarkdownEditor',\n  props: {\n    value: {\n      type: String,\n      default: ''\n    },\n    id: {\n      type: String,\n      required: false,\n      default: function _default() {\n        return 'markdown-editor-' + +new Date() + ((Math.random() * 1000).toFixed(0) + '');\n      }\n    },\n    options: {\n      type: Object,\n      default: function _default() {\n        return defaultOptions;\n      }\n    },\n    mode: {\n      type: String,\n      default: 'markdown'\n    },\n    height: {\n      type: String,\n      required: false,\n      default: '300px'\n    },\n    language: {\n      type: String,\n      required: false,\n      default: 'en_US'\n    }\n  },\n  data: function data() {\n    return {\n      editor: null\n    };\n  },\n  computed: {\n    editorOptions: function editorOptions() {\n      var options = Object.assign({}, defaultOptions, this.options);\n      options.initialEditType = this.mode;\n      options.height = this.height;\n      options.language = this.language;\n      return options;\n    }\n  },\n  watch: {\n    value: function value(newValue, preValue) {\n      if (newValue !== preValue && newValue !== this.editor.getValue()) {\n        this.editor.setValue(newValue);\n      }\n    },\n    language: function language(val) {\n      this.destroyEditor();\n      this.initEditor();\n    },\n    height: function height(newValue) {\n      this.editor.height(newValue);\n    },\n    mode: function mode(newValue) {\n      this.editor.changeMode(newValue);\n    }\n  },\n  mounted: function mounted() {\n    this.initEditor();\n  },\n  destroyed: function destroyed() {\n    this.destroyEditor();\n  },\n  methods: {\n    initEditor: function initEditor() {\n      var _this = this;\n\n      this.editor = new Editor(_objectSpread({\n        el: document.getElementById(this.id)\n      }, this.editorOptions));\n\n      if (this.value) {\n        this.editor.setValue(this.value);\n      }\n\n      this.editor.on('change', function () {\n        _this.$emit('change', _this.editor.getValue());\n      });\n    },\n    destroyEditor: function destroyEditor() {\n      if (!this.editor) return;\n      this.editor.off('change');\n      this.editor.remove();\n    },\n    setValue: function setValue(value) {\n      this.editor.setValue(value);\n    },\n    getValue: function getValue() {\n      return this.editor.getValue();\n    },\n    setHtml: function setHtml(value) {\n      this.editor.setHtml(value);\n    },\n    getHtml: function getHtml() {\n      return this.editor.getHtml();\n    }\n  },\n  model: {\n    prop: 'value',\n    event: 'change'\n  }\n};",null]}