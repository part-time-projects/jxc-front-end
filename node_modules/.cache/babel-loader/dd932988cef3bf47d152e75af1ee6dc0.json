{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\views\\system\\modules\\SysDataSourceModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\views\\system\\modules\\SysDataSourceModal.vue","mtime":1648374778160},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport pick from 'lodash.pick';\nimport { httpAction, postAction } from '@/api/manage';\nimport { validateDuplicateValue } from '@/utils/util';\nexport default {\n  name: 'SysDataSourceModal',\n  components: {},\n  data: function data() {\n    var _this = this;\n\n    return {\n      title: '操作',\n      visible: false,\n      model: {},\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 5\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      },\n      confirmLoading: false,\n      form: this.$form.createForm(this),\n      validatorRules: {\n        code: {\n          validateFirst: true,\n          rules: [{\n            required: true,\n            message: '请输入数据源编码!'\n          }, {\n            validator: function validator(rule, value, callback) {\n              var pattern = /^[a-z|A-Z][a-z|A-Z\\d_-]{0,}$/;\n\n              if (!pattern.test(value)) {\n                callback('编码必须以字母开头，可包含数字、下划线、横杠');\n              } else {\n                validateDuplicateValue('sys_data_source', 'code', value, _this.model.id, callback);\n              }\n            }\n          }]\n        },\n        name: {\n          rules: [{\n            required: true,\n            message: '请输入数据源名称!'\n          }]\n        },\n        dbType: {\n          rules: [{\n            required: true,\n            message: '请选择数据库类型!'\n          }]\n        },\n        dbDriver: {\n          rules: [{\n            required: true,\n            message: '请输入驱动类!'\n          }]\n        },\n        dbUrl: {\n          rules: [{\n            required: true,\n            message: '请输入数据源地址!'\n          }]\n        },\n        dbName: {\n          rules: [{\n            required: true,\n            message: '请输入数据库名称!'\n          }]\n        },\n        dbUsername: {\n          rules: [{\n            required: true,\n            message: '请输入用户名!'\n          }]\n        },\n        dbPassword: {\n          rules: [{\n            required: true,\n            message: '请输入密码!'\n          }]\n        }\n      },\n      url: {\n        add: '/sys/dataSource/add',\n        edit: '/sys/dataSource/edit'\n      },\n      dbDriverMap: {\n        // MySQL 数据库\n        '1': {\n          dbDriver: 'com.mysql.jdbc.Driver'\n        },\n        // Oracle\n        '2': {\n          dbDriver: 'oracle.jdbc.OracleDriver'\n        },\n        // SQLServer 数据库\n        '3': {\n          dbDriver: 'com.microsoft.sqlserver.jdbc.SQLServerDriver'\n        }\n      },\n      dbUrlMap: {\n        // MySQL 数据库\n        '1': {\n          dbUrl: 'jdbc:mysql://127.0.0.1:3306/jeecg-boot?characterEncoding=UTF-8&useUnicode=true&useSSL=false'\n        },\n        // Oracle\n        '2': {\n          dbUrl: 'jdbc:oracle:thin:@127.0.0.1:1521:ORCL'\n        },\n        // SQLServer 数据库\n        '3': {\n          dbUrl: 'jdbc:sqlserver://127.0.0.1:1433;SelectMethod=cursor;DatabaseName=jeecgboot'\n        }\n      }\n    };\n  },\n  created: function created() {},\n  methods: {\n    add: function add() {\n      this.edit({});\n    },\n    edit: function edit(record) {\n      var _this2 = this;\n\n      this.form.resetFields();\n      this.model = Object.assign({}, record);\n      this.visible = true;\n      this.$nextTick(function () {\n        _this2.form.setFieldsValue(pick(_this2.model, 'code', 'name', 'remark', 'dbType', 'dbDriver', 'dbUrl', 'dbName', 'dbUsername', 'dbPassword'));\n      });\n    },\n    close: function close() {\n      this.$emit('close');\n      this.visible = false;\n    },\n    handleOk: function handleOk() {\n      var _this3 = this;\n\n      // 触发表单验证\n      this.form.validateFields(function (err, values) {\n        if (!err) {\n          _this3.confirmLoading = true;\n          var formData = Object.assign(_this3.model, values);\n          var httpUrl = _this3.url.add,\n              method = 'post';\n\n          if (_this3.model.id) {\n            httpUrl = _this3.url.edit;\n            method = 'put'; // 由于编码的特殊性，所以不能更改\n\n            formData['code'] = undefined;\n          }\n\n          httpAction(httpUrl, formData, method).then(function (res) {\n            if (res.success) {\n              _this3.$message.success(res.message);\n\n              _this3.$emit('ok');\n\n              _this3.close();\n            } else {\n              _this3.$message.warning(res.message);\n            }\n          }).finally(function () {\n            _this3.confirmLoading = false;\n          });\n        }\n      });\n    },\n    handleCancel: function handleCancel() {\n      this.close();\n    },\n    // 测试数据源配置是否可以正常连接\n    handleTest: function handleTest() {\n      var _this4 = this;\n\n      var keys = ['dbType', 'dbDriver', 'dbUrl', 'dbName', 'dbUsername', 'dbPassword']; // 获取以上字段的值，并清除校验状态\n\n      var fieldsValues = this.form.getFieldsValue(keys);\n      var setFields = {};\n      keys.forEach(function (key) {\n        return setFields[key] = {\n          value: fieldsValues[key],\n          errors: null\n        };\n      }); // 清除校验状态，目的是可以让错误文字闪烁\n\n      this.form.setFields(setFields); // 重新校验\n\n      this.$nextTick(function () {\n        _this4.form.validateFields(keys, function (errors, values) {\n          if (!errors) {\n            var loading = _this4.$message.loading('连接中……', 0);\n\n            postAction('/online/cgreport/api/testConnection', fieldsValues).then(function (res) {\n              if (res.success) {\n                _this4.$message.success('连接成功');\n              } else throw new Error(res.message);\n            }).catch(function (error) {\n              _this4.$warning({\n                title: '连接失败',\n                content: error.message || error\n              });\n            }).finally(function () {\n              return loading();\n            });\n          }\n        });\n      });\n    },\n    // 数据库类型更改时，联动更改数据库驱动\n    handleDbTypeChange: function handleDbTypeChange(val) {\n      var dbDriver = this.dbDriverMap[val];\n      var dbUrl = this.dbUrlMap[val];\n\n      if (dbDriver) {\n        this.form.setFieldsValue(dbDriver);\n      }\n\n      if (dbUrl) {\n        this.form.setFieldsValue(dbUrl);\n      }\n    }\n  }\n};",null]}