{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\components\\jeecgbiz\\JSelectBizComponent\\JSelectBizComponentModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\components\\jeecgbiz\\JSelectBizComponent\\JSelectBizComponentModal.vue","mtime":1648374777546},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getAction } from '@/api/manage';\nimport Ellipsis from '@/components/Ellipsis';\nimport { JeecgListMixin } from '@/mixins/JeecgListMixin';\nimport { cloneObject, pushIfNotExist } from '@/utils/util';\nexport default {\n  name: 'JSelectBizComponentModal',\n  mixins: [JeecgListMixin],\n  components: {\n    Ellipsis: Ellipsis\n  },\n  props: {\n    value: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    valueKey: {\n      type: String,\n      required: true\n    },\n    multiple: {\n      type: Boolean,\n      default: true\n    },\n    width: {\n      type: Number,\n      default: 900\n    },\n    name: {\n      type: String,\n      default: ''\n    },\n    listUrl: {\n      type: String,\n      required: true,\n      default: ''\n    },\n    // 根据 value 获取显示文本的地址，例如存的是 username，可以通过该地址获取到 realname\n    valueUrl: {\n      type: String,\n      default: ''\n    },\n    displayKey: {\n      type: String,\n      default: null\n    },\n    columns: {\n      type: Array,\n      required: true,\n      default: function _default() {\n        return [];\n      }\n    },\n    // 查询条件Code\n    queryParamCode: {\n      type: String,\n      default: null\n    },\n    // 查询条件文字\n    queryParamText: {\n      type: String,\n      default: null\n    },\n    rowKey: {\n      type: String,\n      default: 'id'\n    },\n    // 过长裁剪长度，设置为 -1 代表不裁剪\n    ellipsisLength: {\n      type: Number,\n      default: 12\n    }\n  },\n  data: function data() {\n    var _this = this;\n\n    var h = this.$createElement;\n    return {\n      innerValue: [],\n      // 已选择列表\n      selectedTable: {\n        pagination: false,\n        scroll: {\n          y: 240\n        },\n        columns: [_objectSpread({}, this.columns[0], {\n          width: this.columns[0].widthRight || this.columns[0].width\n        }), {\n          title: '操作',\n          dataIndex: 'action',\n          align: 'center',\n          width: 60,\n          scopedSlots: {\n            customRender: 'action'\n          }\n        }],\n        dataSource: []\n      },\n      renderEllipsis: function renderEllipsis(value) {\n        return h(\"ellipsis\", {\n          \"attrs\": {\n            \"length\": _this.ellipsisLength\n          }\n        }, [value]);\n      },\n      url: {\n        list: this.listUrl\n      },\n\n      /* 分页参数 */\n      ipagination: {\n        current: 1,\n        pageSize: 5,\n        pageSizeOptions: ['5', '10', '20', '30'],\n        showTotal: function showTotal(total, range) {\n          return range[0] + '-' + range[1] + ' 共' + total + '条';\n        },\n        showQuickJumper: true,\n        showSizeChanger: true,\n        total: 0\n      },\n      options: [],\n      dataSourceMap: {}\n    };\n  },\n  computed: {\n    // 表头\n    innerColumns: function innerColumns() {\n      var _this2 = this;\n\n      var columns = cloneObject(this.columns);\n      columns.forEach(function (column) {\n        // 给所有的列加上过长裁剪\n        if (_this2.ellipsisLength !== -1) {\n          column.customRender = function (text) {\n            return _this2.renderEllipsis(text);\n          };\n        }\n      });\n      return columns;\n    }\n  },\n  watch: {\n    value: {\n      deep: true,\n      immediate: true,\n      handler: function handler(val) {\n        this.innerValue = cloneObject(val);\n        this.selectedRowKeys = [];\n        this.valueWatchHandler(val);\n        this.queryOptionsByValue(val);\n      }\n    },\n    dataSource: {\n      deep: true,\n      handler: function handler(val) {\n        this.emitOptions(val);\n        this.valueWatchHandler(this.innerValue);\n      }\n    },\n    selectedRowKeys: {\n      immediate: true,\n      deep: true,\n      handler: function handler(val) {\n        var _this3 = this;\n\n        this.selectedTable.dataSource = val.map(function (key) {\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = _this3.dataSource[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var data = _step.value;\n\n              if (data[_this3.rowKey] === key) {\n                pushIfNotExist(_this3.innerValue, data[_this3.valueKey]);\n                return data;\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = _this3.selectedTable.dataSource[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var _data = _step2.value;\n\n              if (_data[_this3.rowKey] === key) {\n                pushIfNotExist(_this3.innerValue, _data[_this3.valueKey]);\n                return _data;\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          console.warn('未找到选择的行信息，key：' + key);\n          return {};\n        });\n      }\n    }\n  },\n  methods: {\n    /** 关闭弹窗 */\n    close: function close() {\n      this.$emit('update:visible', false);\n    },\n    valueWatchHandler: function valueWatchHandler(val) {\n      var _this4 = this;\n\n      val.forEach(function (item) {\n        _this4.dataSource.concat(_this4.selectedTable.dataSource).forEach(function (data) {\n          if (data[_this4.valueKey] === item) {\n            pushIfNotExist(_this4.selectedRowKeys, data[_this4.rowKey]);\n          }\n        });\n      });\n    },\n    queryOptionsByValue: function queryOptionsByValue(value) {\n      var _getAction,\n          _this5 = this;\n\n      if (!value || value.length === 0) {\n        return;\n      } // 判断options是否存在value，如果已存在数据就不再请求后台了\n\n\n      var notExist = false;\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = value[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var val = _step3.value;\n          var find = false;\n          var _iteratorNormalCompletion4 = true;\n          var _didIteratorError4 = false;\n          var _iteratorError4 = undefined;\n\n          try {\n            for (var _iterator4 = this.options[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n              var option = _step4.value;\n\n              if (val === option.value) {\n                find = true;\n                break;\n              }\n            }\n          } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                _iterator4.return();\n              }\n            } finally {\n              if (_didIteratorError4) {\n                throw _iteratorError4;\n              }\n            }\n          }\n\n          if (!find) {\n            notExist = true;\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      if (!notExist) return;\n      getAction(this.valueUrl || this.listUrl, (_getAction = {}, _defineProperty(_getAction, this.valueKey, value.join(',') + ','), _defineProperty(_getAction, \"pageNo\", 1), _defineProperty(_getAction, \"pageSize\", value.length), _getAction)).then(function (res) {\n        if (res.success) {\n          var dataSource = res.result;\n\n          if (!(dataSource instanceof Array)) {\n            dataSource = res.result.records;\n          }\n\n          _this5.emitOptions(dataSource, function (data) {\n            pushIfNotExist(_this5.innerValue, data[_this5.valueKey]);\n            pushIfNotExist(_this5.selectedRowKeys, data[_this5.rowKey]);\n            pushIfNotExist(_this5.selectedTable.dataSource, data, _this5.rowKey);\n          });\n        }\n      });\n    },\n    emitOptions: function emitOptions(dataSource, callback) {\n      var _this6 = this;\n\n      dataSource.forEach(function (data) {\n        var key = data[_this6.valueKey];\n        _this6.dataSourceMap[key] = data;\n        pushIfNotExist(_this6.options, {\n          label: data[_this6.displayKey || _this6.valueKey],\n          value: key\n        }, 'value');\n        typeof callback === 'function' ? callback(data) : '';\n      });\n      this.$emit('options', this.options, this.dataSourceMap);\n    },\n\n    /** 完成选择 */\n    handleOk: function handleOk() {\n      var _this7 = this;\n\n      var value = this.selectedTable.dataSource.map(function (data) {\n        return data[_this7.valueKey];\n      });\n      this.$emit('input', value);\n      this.close();\n    },\n\n    /** 删除已选择的 */\n    handleDeleteSelected: function handleDeleteSelected(record, index) {\n      this.selectedRowKeys.splice(this.selectedRowKeys.indexOf(record[this.rowKey]), 1);\n      this.selectedTable.dataSource.splice(index, 1);\n    },\n    customRowFn: function customRowFn(record) {\n      var _this8 = this;\n\n      return {\n        on: {\n          click: function click() {\n            var key = record[_this8.rowKey];\n\n            if (!_this8.multiple) {\n              _this8.selectedRowKeys = [key];\n              _this8.selectedTable.dataSource = [record];\n            } else {\n              var index = _this8.selectedRowKeys.indexOf(key);\n\n              if (index === -1) {\n                _this8.selectedRowKeys.push(key);\n\n                _this8.selectedTable.dataSource.push(record);\n              } else {\n                _this8.handleDeleteSelected(record, index);\n              }\n            }\n          }\n        }\n      };\n    }\n  }\n};",null]}