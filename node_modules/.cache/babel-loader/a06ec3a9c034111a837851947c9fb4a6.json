{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\ideaworkspace\\jxc-front-end\\src\\mixins\\JEditableTableMixin.js","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\mixins\\JEditableTableMixin.js","mtime":1648374777574},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1648365119872}],"contextDependencies":[],"result":["import JEditableTable from '@/components/jeecg/JEditableTable';\nimport { VALIDATE_NO_PASSED, getRefPromise, validateFormAndTables } from '@/utils/JEditableTableUtil';\nimport { httpAction, getAction } from '@/api/manage';\nexport var JEditableTableMixin = {\n  components: {\n    JEditableTable: JEditableTable\n  },\n  data: function data() {\n    return {\n      title: '操作',\n      visible: false,\n      form: this.$form.createForm(this),\n      confirmLoading: false,\n      model: {},\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 6\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 18\n        }\n      }\n    };\n  },\n  methods: {\n    /** 获取所有的editableTable实例 */\n    getAllTable: function getAllTable() {\n      var _this = this;\n\n      if (!(this.refKeys instanceof Array)) {\n        throw this.throwNotArray('refKeys');\n      }\n\n      var values = this.refKeys.map(function (key) {\n        return getRefPromise(_this, key);\n      });\n      return Promise.all(values);\n    },\n\n    /** 遍历所有的JEditableTable实例 */\n    eachAllTable: function eachAllTable(callback) {\n      // 开始遍历\n      this.getAllTable().then(function (tables) {\n        tables.forEach(function (item, index) {\n          if (typeof callback === 'function') {\n            callback(item, index);\n          }\n        });\n      });\n    },\n\n    /** 当点击新增按钮时调用此方法 */\n    add: function add() {\n      if (typeof this.addBefore === 'function') this.addBefore(); // 默认新增空数据\n\n      var rowNum = this.addDefaultRowNum;\n\n      if (typeof rowNum !== 'number') {\n        rowNum = 1;\n        console.warn('由于你没有在 data 中定义 addDefaultRowNum 或 addDefaultRowNum 不是数字，所以默认添加一条空数据，如果不想默认添加空数据，请将定义 addDefaultRowNum 为 0');\n      }\n\n      this.eachAllTable(function (item) {\n        item.add(rowNum);\n      });\n      if (typeof this.addAfter === 'function') this.addAfter(this.model);\n      this.edit({});\n    },\n\n    /** 当点击了编辑（修改）按钮时调用此方法 */\n    edit: function edit(record) {\n      if (typeof this.editBefore === 'function') this.editBefore(record);\n      this.visible = true;\n      this.activeKey = this.refKeys[0];\n      this.form.resetFields();\n      this.model = Object.assign({}, record);\n      if (typeof this.editAfter === 'function') this.editAfter(this.model);\n    },\n\n    /** 关闭弹窗，并将所有JEditableTable实例回归到初始状态 */\n    close: function close() {\n      this.visible = false;\n      this.eachAllTable(function (item) {\n        item.initialize();\n      });\n      this.$emit('close');\n    },\n\n    /** 查询某个tab的数据 */\n    requestSubTableData: function requestSubTableData(url, params, tab, success) {\n      tab.loading = true;\n      getAction(url, params).then(function (res) {\n        var result = res.result;\n        var dataSource = [];\n\n        if (result) {\n          if (Array.isArray(result)) {\n            dataSource = result;\n          } else if (Array.isArray(result.records)) {\n            dataSource = result.records;\n          }\n        }\n\n        tab.dataSource = dataSource;\n        typeof success === 'function' ? success(res) : '';\n      }).finally(function () {\n        tab.loading = false;\n      });\n    },\n\n    /** 发起请求，自动判断是执行新增还是修改操作 */\n    request: function request(formData) {\n      var _this2 = this;\n\n      var url = this.url.add,\n          method = 'post';\n\n      if (this.model.id) {\n        url = this.url.edit;\n        method = 'put';\n      }\n\n      this.confirmLoading = true;\n      httpAction(url, formData, method).then(function (res) {\n        if (res.success) {\n          _this2.$message.success(res.message);\n\n          _this2.$emit('ok');\n\n          _this2.close();\n        } else {\n          _this2.$message.warning(res.message);\n        }\n      }).finally(function () {\n        _this2.confirmLoading = false;\n      });\n    },\n\n    /* --- handle 事件 --- */\n\n    /** ATab 选项卡切换事件 */\n    handleChangeTabs: function handleChangeTabs(key) {\n      // 自动重置scrollTop状态，防止出现白屏\n      getRefPromise(this, key).then(function (editableTable) {\n        editableTable.resetScrollTop();\n      });\n    },\n\n    /** 关闭按钮点击事件 */\n    handleCancel: function handleCancel() {\n      this.close();\n    },\n\n    /** 确定按钮点击事件 */\n    handleOk: function handleOk() {\n      var _this3 = this;\n\n      /** 触发表单验证 */\n      this.getAllTable().then(function (tables) {\n        /** 一次性验证主表和所有的次表 */\n        return validateFormAndTables(_this3.form, tables);\n      }).then(function (allValues) {\n        if (typeof _this3.classifyIntoFormData !== 'function') {\n          throw _this3.throwNotFunction('classifyIntoFormData');\n        }\n\n        var formData = _this3.classifyIntoFormData(allValues); // 发起请求\n\n\n        return _this3.request(formData);\n      }).catch(function (e) {\n        if (e.error === VALIDATE_NO_PASSED) {\n          // 如果有未通过表单验证的子表，就自动跳转到它所在的tab\n          _this3.activeKey = e.index == null ? _this3.activeKey : _this3.refKeys[e.index];\n        } else {\n          console.error(e);\n        }\n      });\n    },\n\n    /* --- throw --- */\n\n    /** not a function */\n    throwNotFunction: function throwNotFunction(name) {\n      return \"\".concat(name, \" \\u672A\\u5B9A\\u4E49\\u6216\\u4E0D\\u662F\\u4E00\\u4E2A\\u51FD\\u6570\");\n    },\n\n    /** not a array */\n    throwNotArray: function throwNotArray(name) {\n      return \"\".concat(name, \" \\u672A\\u5B9A\\u4E49\\u6216\\u4E0D\\u662F\\u4E00\\u4E2A\\u6570\\u7EC4\");\n    }\n  }\n};",{"version":3,"sources":["D:/ideaworkspace/jxc-front-end/src/mixins/JEditableTableMixin.js"],"names":["JEditableTable","VALIDATE_NO_PASSED","getRefPromise","validateFormAndTables","httpAction","getAction","JEditableTableMixin","components","data","title","visible","form","$form","createForm","confirmLoading","model","labelCol","xs","span","sm","wrapperCol","methods","getAllTable","refKeys","Array","throwNotArray","values","map","key","Promise","all","eachAllTable","callback","then","tables","forEach","item","index","add","addBefore","rowNum","addDefaultRowNum","console","warn","addAfter","edit","record","editBefore","activeKey","resetFields","Object","assign","editAfter","close","initialize","$emit","requestSubTableData","url","params","tab","success","loading","res","result","dataSource","isArray","records","finally","request","formData","method","id","$message","message","warning","handleChangeTabs","editableTable","resetScrollTop","handleCancel","handleOk","allValues","classifyIntoFormData","throwNotFunction","catch","e","error","name"],"mappings":"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","sourcesContent":["import JEditableTable from '@/components/jeecg/JEditableTable'\r\nimport { VALIDATE_NO_PASSED, getRefPromise, validateFormAndTables } from '@/utils/JEditableTableUtil'\r\nimport { httpAction, getAction } from '@/api/manage'\r\n\r\nexport const JEditableTableMixin = {\r\n  components: {\r\n    JEditableTable\r\n  },\r\n  data() {\r\n    return {\r\n      title: '操作',\r\n      visible: false,\r\n      form: this.$form.createForm(this),\r\n      confirmLoading: false,\r\n      model: {},\r\n      labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 6 }\r\n      },\r\n      wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 18 }\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n\r\n    /** 获取所有的editableTable实例 */\r\n    getAllTable() {\r\n      if (!(this.refKeys instanceof Array)) {\r\n        throw this.throwNotArray('refKeys')\r\n      }\r\n      let values = this.refKeys.map(key => getRefPromise(this, key))\r\n      return Promise.all(values)\r\n    },\r\n\r\n    /** 遍历所有的JEditableTable实例 */\r\n    eachAllTable(callback) {\r\n      // 开始遍历\r\n      this.getAllTable().then(tables => {\r\n        tables.forEach((item, index) => {\r\n          if (typeof callback === 'function') {\r\n            callback(item, index)\r\n          }\r\n        })\r\n      })\r\n    },\r\n\r\n    /** 当点击新增按钮时调用此方法 */\r\n    add() {\r\n      if (typeof this.addBefore === 'function') this.addBefore()\r\n      // 默认新增空数据\r\n      let rowNum = this.addDefaultRowNum\r\n      if (typeof rowNum !== 'number') {\r\n        rowNum = 1\r\n        console.warn('由于你没有在 data 中定义 addDefaultRowNum 或 addDefaultRowNum 不是数字，所以默认添加一条空数据，如果不想默认添加空数据，请将定义 addDefaultRowNum 为 0')\r\n      }\r\n      this.eachAllTable((item) => {\r\n        item.add(rowNum)\r\n      })\r\n      if (typeof this.addAfter === 'function') this.addAfter(this.model)\r\n      this.edit({})\r\n    },\r\n    /** 当点击了编辑（修改）按钮时调用此方法 */\r\n    edit(record) {\r\n      if (typeof this.editBefore === 'function') this.editBefore(record)\r\n      this.visible = true\r\n      this.activeKey = this.refKeys[0]\r\n      this.form.resetFields()\r\n      this.model = Object.assign({}, record)\r\n      if (typeof this.editAfter === 'function') this.editAfter(this.model)\r\n    },\r\n    /** 关闭弹窗，并将所有JEditableTable实例回归到初始状态 */\r\n    close() {\r\n      this.visible = false\r\n      this.eachAllTable((item) => {\r\n        item.initialize()\r\n      })\r\n      this.$emit('close')\r\n    },\r\n\r\n    /** 查询某个tab的数据 */\r\n    requestSubTableData(url, params, tab, success) {\r\n      tab.loading = true\r\n      getAction(url, params).then(res => {\r\n        let { result } = res\r\n        let dataSource = []\r\n        if (result) {\r\n          if (Array.isArray(result)) {\r\n            dataSource = result\r\n          } else if (Array.isArray(result.records)) {\r\n            dataSource = result.records\r\n          }\r\n        }\r\n        tab.dataSource = dataSource\r\n        typeof success === 'function' ? success(res) : ''\r\n      }).finally(() => {\r\n        tab.loading = false\r\n      })\r\n    },\r\n    /** 发起请求，自动判断是执行新增还是修改操作 */\r\n    request(formData) {\r\n      let url = this.url.add, method = 'post'\r\n      if (this.model.id) {\r\n        url = this.url.edit\r\n        method = 'put'\r\n      }\r\n      this.confirmLoading = true\r\n      httpAction(url, formData, method).then((res) => {\r\n        if (res.success) {\r\n          this.$message.success(res.message)\r\n          this.$emit('ok')\r\n          this.close()\r\n        } else {\r\n          this.$message.warning(res.message)\r\n        }\r\n      }).finally(() => {\r\n        this.confirmLoading = false\r\n      })\r\n    },\r\n\r\n    /* --- handle 事件 --- */\r\n\r\n    /** ATab 选项卡切换事件 */\r\n    handleChangeTabs(key) {\r\n      // 自动重置scrollTop状态，防止出现白屏\r\n      getRefPromise(this, key).then(editableTable => {\r\n        editableTable.resetScrollTop()\r\n      })\r\n    },\r\n    /** 关闭按钮点击事件 */\r\n    handleCancel() {\r\n      this.close()\r\n    },\r\n    /** 确定按钮点击事件 */\r\n    handleOk() {\r\n      /** 触发表单验证 */\r\n      this.getAllTable().then(tables => {\r\n        /** 一次性验证主表和所有的次表 */\r\n        return validateFormAndTables(this.form, tables)\r\n      }).then(allValues => {\r\n        if (typeof this.classifyIntoFormData !== 'function') {\r\n          throw this.throwNotFunction('classifyIntoFormData')\r\n        }\r\n        let formData = this.classifyIntoFormData(allValues)\r\n        // 发起请求\r\n        return this.request(formData)\r\n      }).catch(e => {\r\n        if (e.error === VALIDATE_NO_PASSED) {\r\n          // 如果有未通过表单验证的子表，就自动跳转到它所在的tab\r\n          this.activeKey = e.index == null ? this.activeKey : this.refKeys[e.index]\r\n        } else {\r\n          console.error(e)\r\n        }\r\n      })\r\n    },\r\n\r\n    /* --- throw --- */\r\n\r\n    /** not a function */\r\n    throwNotFunction(name) {\r\n      return `${name} 未定义或不是一个函数`\r\n    },\r\n\r\n    /** not a array */\r\n    throwNotArray(name) {\r\n      return `${name} 未定义或不是一个数组`\r\n    }\r\n\r\n  }\r\n}"]}]}