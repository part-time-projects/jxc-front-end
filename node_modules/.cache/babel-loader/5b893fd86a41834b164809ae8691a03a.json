{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\ideaworkspace\\jxc-front-end\\src\\utils\\util.js","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\utils\\util.js","mtime":1648374777590},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1648365119872}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport * as api from '@/api/api';\nimport { isURL } from '@/utils/validate';\nimport onlineCommons from '@jeecg/antd-online-beta220';\nexport function timeFix() {\n  var time = new Date();\n  var hour = time.getHours();\n  return hour < 9 ? '早上好' : hour <= 11 ? '上午好' : hour <= 13 ? '中午好' : hour < 20 ? '下午好' : '晚上好';\n}\nexport function welcome() {\n  var arr = ['休息一会儿吧', '准备吃什么呢?', '要不要打一把 DOTA', '我猜你可能累了'];\n  var index = Math.floor(Math.random() * arr.length);\n  return arr[index];\n}\n/**\r\n * 触发 window.resize\r\n */\n\nexport function triggerWindowResizeEvent() {\n  var event = document.createEvent('HTMLEvents');\n  event.initEvent('resize', true, true);\n  event.eventType = 'message';\n  window.dispatchEvent(event);\n}\n/**\r\n * 过滤对象中为空的属性\r\n * @param obj\r\n * @returns {*}\r\n */\n\nexport function filterObj(obj) {\n  if (!(_typeof(obj) == 'object')) {\n    return;\n  }\n\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key) && (obj[key] == null || obj[key] == undefined || obj[key] === '')) {\n      delete obj[key];\n    }\n  }\n\n  return obj;\n}\n/**\r\n * 时间格式化\r\n * @param value\r\n * @param fmt\r\n * @returns {*}\r\n */\n\nexport function formatDate(value, fmt) {\n  var regPos = /^\\d+(\\.\\d+)?$/;\n\n  if (regPos.test(value)) {\n    //如果是数字\n    var getDate = new Date(value);\n    var o = {\n      'M+': getDate.getMonth() + 1,\n      'd+': getDate.getDate(),\n      'h+': getDate.getHours(),\n      'm+': getDate.getMinutes(),\n      's+': getDate.getSeconds(),\n      'q+': Math.floor((getDate.getMonth() + 3) / 3),\n      'S': getDate.getMilliseconds()\n    };\n\n    if (/(y+)/.test(fmt)) {\n      fmt = fmt.replace(RegExp.$1, (getDate.getFullYear() + '').substr(4 - RegExp.$1.length));\n    }\n\n    for (var k in o) {\n      if (new RegExp('(' + k + ')').test(fmt)) {\n        fmt = fmt.replace(RegExp.$1, RegExp.$1.length === 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length));\n      }\n    }\n\n    return fmt;\n  } else {\n    //TODO\n    value = value.trim();\n    return value.substr(0, fmt.length);\n  }\n} // 生成首页路由\n\nexport function generateIndexRouter(data) {\n  var indexRouter = [{\n    path: '/',\n    name: 'dashboard',\n    //component: () => import('@/components/layouts/BasicLayout'),\n    component: function component(resolve) {\n      return require(['@/components/layouts/TabLayout'], resolve);\n    },\n    meta: {\n      title: '首页'\n    },\n    redirect: '/dashboard/analysis',\n    children: _toConsumableArray(generateChildRouters(data))\n  }, {\n    \"path\": \"*\",\n    \"redirect\": \"/404\",\n    \"hidden\": true\n  }];\n  return indexRouter;\n} // 生成嵌套路由（子路由）\n\nfunction generateChildRouters(data) {\n  var routers = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    var _loop = function _loop() {\n      var item = _step.value;\n      var component = \"\";\n\n      if (item.component.indexOf(\"layouts\") >= 0) {\n        component = \"components/\" + item.component;\n      } else {\n        component = \"views/\" + item.component;\n      } // eslint-disable-next-line\n\n\n      var URL = (item.meta.url || '').replace(/{{([^}}]+)?}}/g, function (s1, s2) {\n        return eval(s2);\n      }); // URL支持{{ window.xxx }}占位符变量\n\n      if (isURL(URL)) {\n        item.meta.url = URL;\n      } //online菜单路由加载逻辑\n\n\n      var componentPath = void 0;\n\n      if (item.component == \"modules/online/cgform/OnlCgformHeadList\") {\n        componentPath = onlineCommons.OnlCgformHeadList;\n      } else if (item.component == \"modules/online/cgform/OnlCgformCopyList\") {\n        componentPath = onlineCommons.OnlCgformCopyList;\n      } else if (item.component == \"modules/online/cgform/auto/OnlCgformAutoList\") {\n        componentPath = onlineCommons.OnlCgformAutoList;\n      } else if (item.component == \"modules/online/cgform/auto/OnlCgformTreeList\") {\n        componentPath = onlineCommons.OnlCgformTreeList;\n      } else if (item.component == \"modules/online/cgform/auto/erp/OnlCgformErpList\") {\n        componentPath = onlineCommons.OnlCgformErpList;\n      } else if (item.component == \"modules/online/cgform/auto/innerTable/OnlCgformInnerTableList\") {\n        componentPath = onlineCommons.OnlCgformInnerTableList;\n      } else if (item.component == \"modules/online/cgreport/OnlCgreportHeadList\") {\n        componentPath = onlineCommons.OnlCgreportHeadList;\n      } else if (item.component == \"modules/online/cgreport/auto/OnlCgreportAutoList\") {\n        componentPath = onlineCommons.OnlCgreportAutoList;\n      } else {\n        componentPath = function componentPath(resolve) {\n          return require(['@/' + component + '.vue'], resolve);\n        };\n      }\n\n      var menu = {\n        path: item.path,\n        name: item.name,\n        redirect: item.redirect,\n        component: componentPath,\n        hidden: item.hidden,\n        //component:()=> import(`@/views/${item.component}.vue`),\n        meta: {\n          title: item.meta.title,\n          icon: item.meta.icon,\n          url: item.meta.url,\n          permissionList: item.meta.permissionList,\n          keepAlive: item.meta.keepAlive,\n\n          /*update_begin author:wuxianquan date:20190908 for:赋值 */\n          internalOrExternal: item.meta.internalOrExternal\n          /*update_end author:wuxianquan date:20190908 for:赋值 */\n\n        }\n      };\n\n      if (item.alwaysShow) {\n        menu.alwaysShow = true;\n        menu.redirect = menu.path;\n      }\n\n      if (item.children && item.children.length > 0) {\n        menu.children = _toConsumableArray(generateChildRouters(item.children));\n      } //--update-begin----author:scott---date:20190320------for:根据后台菜单配置，判断是否路由菜单字段，动态选择是否生成路由（为了支持参数URL菜单）------\n      //判断是否生成路由\n\n\n      if (item.route && item.route === '0') {//console.log(' 不生成路由 item.route：  '+item.route);\n        //console.log(' 不生成路由 item.path：  '+item.path);\n      } else {\n        routers.push(menu);\n      } //--update-end----author:scott---date:20190320------for:根据后台菜单配置，判断是否路由菜单字段，动态选择是否生成路由（为了支持参数URL菜单）------\n\n    };\n\n    for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      _loop();\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return routers;\n}\n/**\r\n * 深度克隆对象、数组\r\n * @param obj 被克隆的对象\r\n * @return 克隆后的对象\r\n */\n\n\nexport function cloneObject(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n/**\r\n * 随机生成数字\r\n *\r\n * 示例：生成长度为 12 的随机数：randomNumber(12)\r\n * 示例：生成 3~23 之间的随机数：randomNumber(3, 23)\r\n *\r\n * @param1 最小值 | 长度\r\n * @param2 最大值\r\n * @return int 生成后的数字\r\n */\n\nexport function randomNumber() {\n  // 生成 最小值 到 最大值 区间的随机数\n  var random = function random(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  if (arguments.length === 1) {\n    var _arguments = Array.prototype.slice.call(arguments),\n        length = _arguments[0]; // 生成指定长度的随机数字，首位一定不是 0\n\n\n    var nums = _toConsumableArray(Array(length).keys()).map(function (i) {\n      return i > 0 ? random(0, 9) : random(1, 9);\n    });\n\n    return parseInt(nums.join(''));\n  } else if (arguments.length >= 2) {\n    var _arguments2 = Array.prototype.slice.call(arguments),\n        min = _arguments2[0],\n        max = _arguments2[1];\n\n    return random(min, max);\n  } else {\n    return Number.NaN;\n  }\n}\n/**\r\n * 随机生成字符串\r\n * @param length 字符串的长度\r\n * @param chats 可选字符串区间（只会生成传入的字符串中的字符）\r\n * @return string 生成的字符串\r\n */\n\nexport function randomString(length, chats) {\n  if (!length) length = 1;\n  if (!chats) chats = '0123456789qwertyuioplkjhgfdsazxcvbnm';\n  var str = '';\n\n  for (var i = 0; i < length; i++) {\n    var num = randomNumber(0, chats.length - 1);\n    str += chats[num];\n  }\n\n  return str;\n}\n/**\r\n * 随机生成uuid\r\n * @return string 生成的uuid\r\n */\n\nexport function randomUUID() {\n  var chats = '0123456789abcdef';\n  return randomString(32, chats);\n}\n/**\r\n * 下划线转驼峰\r\n * @param string\r\n * @returns {*}\r\n */\n\nexport function underLine2CamelCase(string) {\n  return string.replace(/_([a-z])/g, function (all, letter) {\n    return letter.toUpperCase();\n  });\n}\n/**\r\n * 判断是否显示办理按钮\r\n * @param bpmStatus\r\n * @returns {*}\r\n */\n\nexport function showDealBtn(bpmStatus) {\n  if (bpmStatus != \"1\" && bpmStatus != \"3\" && bpmStatus != \"4\") {\n    return true;\n  }\n\n  return false;\n}\n/**\r\n * 增强CSS，可以在页面上输出全局css\r\n * @param css 要增强的css\r\n * @param id style标签的id，可以用来清除旧样式\r\n */\n\nexport function cssExpand(css, id) {\n  var style = document.createElement('style');\n  style.type = \"text/css\";\n  style.innerHTML = \"@charset \\\"UTF-8\\\"; \".concat(css); // 清除旧样式\n\n  if (id) {\n    var $style = document.getElementById(id);\n    if ($style != null) $style.outerHTML = '';\n    style.id = id;\n  } // 应用新样式\n\n\n  document.head.appendChild(style);\n}\n/** 用于js增强事件，运行JS代码，可以传参 */\n// options 所需参数：\n//    参数名         类型            说明\n//    vm             VueComponent    vue实例\n//    event          Object          event对象\n//    jsCode         String          待执行的js代码\n//    errorMessage   String          执行出错后的提示（控制台）\n\nexport function jsExpand() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  // 绑定到window上的keyName\n  var windowKeyName = 'J_CLICK_EVENT_OPTIONS';\n\n  if (_typeof(window[windowKeyName]) != 'object') {\n    window[windowKeyName] = {};\n  } // 随机生成JS增强的执行id，防止冲突\n\n\n  var id = randomString(16, 'qwertyuioplkjhgfdsazxcvbnm'.toUpperCase()); // 封装按钮点击事件\n\n  var code = \"\\n    (function (o_\".concat(id, \") {\\n      try {\\n        (function (globalEvent, vm) {\\n          \").concat(options.jsCode, \"\\n        })(o_\").concat(id, \".event, o_\").concat(id, \".vm)\\n      } catch (e) {\\n        o_\").concat(id, \".error(e)\\n      }\\n      o_\").concat(id, \".done()\\n    })(window['\").concat(windowKeyName, \"']['EVENT_\").concat(id, \"'])\\n  \"); // 创建script标签\n\n  var script = document.createElement('script'); // 将需要传递的参数挂载到window对象上\n\n  window[windowKeyName]['EVENT_' + id] = {\n    vm: options.vm,\n    event: options.event,\n    // 当执行完成时，无论如何都会调用的回调事件\n    done: function done() {\n      // 执行完后删除新增的 script 标签不会撤销执行结果（已产生的结果不会被撤销）\n      script.outerHTML = '';\n      delete window[windowKeyName]['EVENT_' + id];\n    },\n    // 当js运行出错的时候调用的事件\n    error: function error(e) {\n      console.group(\"\".concat(options.errorMessage || '用户自定义JS增强代码运行出错', \"\\uFF08\").concat(new Date(), \"\\uFF09\"));\n      console.error(e);\n      console.groupEnd();\n    }\n  }; // 将事件挂载到document中\n\n  script.innerHTML = code;\n  document.body.appendChild(script);\n}\n/**\r\n * 重复值验证工具方法\r\n *\r\n * 使用示例：\r\n * { validator: (rule, value, callback) => validateDuplicateValue('sys_fill_rule', 'rule_code', value, this.model.id, callback) }\r\n *\r\n * @param tableName 被验证的表名\r\n * @param fieldName 被验证的字段名\r\n * @param fieldVal 被验证的值\r\n * @param dataId 数据ID，可空\r\n * @param callback\r\n */\n\nexport function validateDuplicateValue(tableName, fieldName, fieldVal, dataId, callback) {\n  if (fieldVal) {\n    var params = {\n      tableName: tableName,\n      fieldName: fieldName,\n      fieldVal: fieldVal,\n      dataId: dataId\n    };\n    api.duplicateCheck(params).then(function (res) {\n      res['success'] ? callback() : callback(res['message']);\n    }).catch(function (err) {\n      callback(err.message || err);\n    });\n  } else {\n    callback();\n  }\n}\n/**\r\n * 根据编码校验规则code，校验传入的值是否合法\r\n *\r\n * 使用示例：\r\n * { validator: (rule, value, callback) => validateCheckRule('common', value, callback) }\r\n *\r\n * @param ruleCode 编码校验规则 code\r\n * @param value 被验证的值\r\n * @param callback\r\n */\n\nexport function validateCheckRule(ruleCode, value, callback) {\n  if (ruleCode && value) {\n    value = encodeURIComponent(value);\n    api.checkRuleByCode({\n      ruleCode: ruleCode,\n      value: value\n    }).then(function (res) {\n      res['success'] ? callback() : callback(res['message']);\n    }).catch(function (err) {\n      callback(err.message || err);\n    });\n  } else {\n    callback();\n  }\n}\n/**\r\n * 如果值不存在就 push 进数组，反之不处理\r\n * @param array 要操作的数据\r\n * @param value 要添加的值\r\n * @param key 可空，如果比较的是对象，可能存在地址不一样但值实际上是一样的情况，可以传此字段判断对象中唯一的字段，例如 id。不传则直接比较实际值\r\n * @returns {boolean} 成功 push 返回 true，不处理返回 false\r\n */\n\nexport function pushIfNotExist(array, value, key) {\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = array[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var item = _step2.value;\n\n      if (key && item[key] === value[key]) {\n        return false;\n      } else if (item === value) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  array.push(value);\n  return true;\n}\n/**\r\n * 可用于判断是否成功\r\n * @type {symbol}\r\n */\n\nexport var succeedSymbol = Symbol();\n/**\r\n * 可用于判断是否失败\r\n * @type {symbol}\r\n */\n\nexport var failedSymbol = Symbol();\n/**\r\n * 使 promise 无论如何都会 resolve，除非传入的参数不是一个Promise对象或返回Promise对象的方法\r\n * 一般用在 Promise.all 中\r\n *\r\n * @param promise 可传Promise对象或返回Promise对象的方法\r\n * @returns {Promise<any>}\r\n */\n\nexport function alwaysResolve(promise) {\n  return new Promise(function (resolve, reject) {\n    var p = promise;\n\n    if (typeof promise === 'function') {\n      p = promise();\n    }\n\n    if (p instanceof Promise) {\n      p.then(function (data) {\n        resolve({\n          type: succeedSymbol,\n          data: data\n        });\n      }).catch(function (error) {\n        resolve({\n          type: failedSymbol,\n          error: error\n        });\n      });\n    } else {\n      reject('alwaysResolve: 传入的参数不是一个Promise对象或返回Promise对象的方法');\n    }\n  });\n}\n/**\r\n * 简单实现防抖方法\r\n *\r\n * 防抖(debounce)函数在第一次触发给定的函数时，不立即执行函数，而是给出一个期限值(delay)，比如100ms。\r\n * 如果100ms内再次执行函数，就重新开始计时，直到计时结束后再真正执行函数。\r\n * 这样做的好处是如果短时间内大量触发同一事件，只会执行一次函数。\r\n *\r\n * @param fn 要防抖的函数\r\n * @param delay 防抖的毫秒数\r\n * @returns {Function}\r\n */\n\nexport function simpleDebounce(fn) {\n  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n  var timer = null;\n  return function () {\n    var args = arguments;\n\n    if (timer) {\n      clearTimeout(timer);\n    }\n\n    timer = setTimeout(function () {\n      fn.apply(null, args);\n    }, delay);\n  };\n}\n/**\r\n * 不用正则的方式替换所有值\r\n * @param text 被替换的字符串\r\n * @param checker  替换前的内容\r\n * @param replacer 替换后的内容\r\n * @returns {String} 替换后的字符串\r\n */\n\nexport function replaceAll(text, checker, replacer) {\n  var lastText = text;\n  text = text.replace(checker, replacer);\n\n  if (lastText !== text) {\n    return replaceAll(text, checker, replacer);\n  }\n\n  return text;\n}",null]}