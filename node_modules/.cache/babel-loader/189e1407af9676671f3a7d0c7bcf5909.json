{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\components\\jeecg\\JEditableTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\components\\jeecg\\JEditableTable.vue","mtime":1648374777532},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Vue from 'vue';\nimport Draggable from 'vuedraggable';\nimport { ACCESS_TOKEN } from '@/store/mutation-types';\nimport { FormTypes, VALIDATE_NO_PASSED } from '@/utils/JEditableTableUtil';\nimport { cloneObject, randomString, randomNumber } from '@/utils/util';\nimport JDate from '@/components/jeecg/JDate';\nimport { initDictOptions } from '@/components/dict/JDictSelectUtil';\nimport { getFileAccessHttpUrl } from '@/api/manage';\nimport JInputPop from '@/components/jeecg/minipop/JInputPop';\nimport JFilePop from '@/components/jeecg/minipop/JFilePop'; // 行高，需要在实例加载完成前用到\n\nvar rowHeight = 61;\nexport default {\n  name: 'JEditableTable',\n  components: {\n    JDate: JDate,\n    Draggable: Draggable,\n    JInputPop: JInputPop,\n    JFilePop: JFilePop\n  },\n  provide: function provide() {\n    var _this = this;\n\n    return {\n      parentIsJEditableTable: true,\n      getDestroyCleanGroupRequest: function getDestroyCleanGroupRequest() {\n        return _this.destroyCleanGroupRequest;\n      }\n    };\n  },\n  props: {\n    // 列信息\n    columns: {\n      type: Array,\n      required: true\n    },\n    // 数据源\n    dataSource: {\n      type: Array,\n      required: true,\n      default: function _default() {\n        return [];\n      }\n    },\n    // 是否显示操作按钮\n    actionButton: {\n      type: Boolean,\n      default: false\n    },\n    // 是否显示行号\n    rowNumber: {\n      type: Boolean,\n      default: false\n    },\n    // 是否可选择行\n    rowSelection: {\n      type: Boolean,\n      default: false\n    },\n    // 页面是否在加载中\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    // 页面是否在加载中\n    maxHeight: {\n      type: Number,\n      default: 400\n    },\n    // 要禁用的行\n    disabledRows: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    // 是否禁用全部组件\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    // 是否可拖拽排序\n    dragSort: {\n      type: Boolean,\n      default: false\n    },\n    dragSortKey: {\n      type: String,\n      default: 'orderNum'\n    }\n  },\n  data: function data() {\n    return {\n      // 是否首次运行\n      isFirst: true,\n      // 当前实例是否是行编辑\n      isJEditableTable: true,\n      // caseId，用于防止有多个实例的时候会冲突\n      caseIdPrefix: '_jet-',\n      caseId: \"_jet-\".concat(randomString(6), \"-\"),\n      // 临时ID标识，凡是以该标识结尾的ID都是临时ID，不添加到数据库中\n      tempId: \"_tid-\".concat(randomString(6)),\n      // 存储document element 对象\n      el: {\n        inputTable: null,\n        tbody: null\n      },\n      // 存储各个div的style\n      style: {\n        // 'max-height': '400px'\n        tbody: {\n          left: '0px'\n        },\n        // 左侧固定td的style\n        // 20200331 cfm modify\n        // tdLeft: { 'min-width': '4%', 'max-width': '45px' },\n        tdLeft: {\n          'min-width': '40px',\n          'max-width': '45px'\n        },\n        tdLeftDs: {\n          'min-width': '30px',\n          'max-width': '35px'\n        }\n      },\n      // 表单的类型\n      formTypes: FormTypes,\n      // 行数据\n      rows: [],\n      // 行高，height + padding + border\n      rowHeight: rowHeight,\n      // 滚动条顶部距离\n      scrollTop: 0,\n      // 绑定 select 的值\n      selectValues: {},\n      // 绑定 checkbox 的值\n      checkboxValues: {},\n      // 绑定 jdate 的值\n      jdateValues: {},\n      // 绑定jinputpop\n      jInputPopValues: {},\n      // 绑定插槽数据\n      slotValues: {},\n      // file 信息\n      uploadValues: {},\n      //popup信息\n      popupValues: {},\n      radioValues: {},\n      metaCheckboxValues: {},\n      multiSelectValues: {},\n      searchSelectValues: {},\n      // 绑定左侧选择框已选择的id\n      selectedRowIds: [],\n      // 存储被删除行的id\n      deleteIds: [],\n      // 存储显示tooltip的信息\n      tooltips: {},\n      // 存储没有通过验证的inputId\n      notPassedIds: [],\n      // 当前是否正在拖拽排序\n      dragging: false,\n      // 是否有统计列\n      hasStatisticsColumn: false,\n      statisticsColumns: {},\n      // 只有在行编辑被销毁时才主动清空GroupRequest的内存\n      destroyCleanGroupRequest: false\n    };\n  },\n  created: function created() {\n    this.inputValues = []; // 当前显示的tr\n\n    this.visibleTrEls = [];\n    this.disabledRowIds = this.disabledRowIds || [];\n  },\n  // 计算属性\n  computed: {\n    // expandHeight = rows.length * rowHeight\n    getExpandHeight: function getExpandHeight() {\n      var length = this.rows.length * this.rowHeight;\n\n      if (this.showStatisticsRow) {\n        length += 34;\n      }\n\n      return length;\n    },\n    // 是否显示统计行\n    showStatisticsRow: function showStatisticsRow() {\n      return this.hasStatisticsColumn && this.rows.length > 0;\n    },\n    // 获取是否选择了部分\n    getSelectIndeterminate: function getSelectIndeterminate() {\n      return this.selectedRowIds.length > 0 && this.selectedRowIds.length < this.rows.length;\n    },\n    // 获取是否选择了全部\n    getSelectAll: function getSelectAll() {\n      return this.selectedRowIds.length === this.rows.length && this.rows.length > 0;\n    },\n    tbodyStyle: function tbodyStyle() {\n      var style = Object.assign({}, this.style.tbody); // style['max-height'] = `${this.maxHeight}px`\n\n      style['width'] = this.realTrWidth;\n      return style;\n    },\n    showClearSelectButton: function showClearSelectButton() {\n      var count = 0;\n\n      for (var key in this.disabledRows) {\n        if (this.disabledRows.hasOwnProperty(key)) count++;\n      }\n\n      return count > 0;\n    },\n    accessToken: function accessToken() {\n      return Vue.ls.get(ACCESS_TOKEN);\n    },\n    realTrWidth: function realTrWidth() {\n      var splice = ' + ';\n      var calcWidth = 'calc(';\n      this.columns.forEach(function (column, i) {\n        var type = column.type,\n            width = column.width; // 隐藏字段不参与计算\n\n        if (type !== FormTypes.hidden) {\n          if (typeof width === 'number') {\n            calcWidth += width + 'px';\n          } else if (typeof width === 'string') {\n            calcWidth += width;\n          } else {\n            calcWidth += '120px';\n          }\n\n          calcWidth += splice;\n        }\n      });\n\n      if (calcWidth.endsWith(splice)) {\n        calcWidth = calcWidth.substring(0, calcWidth.length - splice.length);\n      }\n\n      calcWidth += ')'; // console.log('calcWidth: ', calcWidth)\n\n      return calcWidth;\n    }\n  },\n  // 侦听器\n  watch: {\n    rows: {\n      immediate: true,\n      handler: function handler(val, old) {// val.forEach(item => {\n        //   for (let inputValue of  this.inputValues) {\n        //     if (inputValue.id === item.id) {\n        //       item['dbFieldName'] = inputValue['dbFieldName']\n        //       break\n        //     }\n        //   }\n        // })\n        // console.log('watch.rows:', cloneObject({ val, old }))\n      }\n    },\n    dataSource: {\n      immediate: true,\n      handler: function handler(newValue) {\n        var _this2 = this;\n\n        // 兼容IE\n        this.getElementPromise('tbody').then(function () {\n          _this2.initialize();\n\n          _this2._pushByDataSource(newValue);\n        });\n      }\n    },\n    columns: {\n      immediate: true,\n      handler: function handler(columns) {\n        var _this3 = this;\n\n        // 兼容IE\n        this.getElementPromise('tbody').then(function () {\n          columns.forEach(function (column) {\n            if (column.type === FormTypes.select || column.type === FormTypes.list_multi || column.type === FormTypes.sel_search) {\n              // 兼容 旧版本 options\n              if (column.options instanceof Array) {\n                column.options = column.options.map(function (item) {\n                  if (item) {\n                    return _objectSpread({}, item, {\n                      text: item.text || item.title,\n                      title: item.text || item.title\n                    });\n                  }\n\n                  return {};\n                });\n              }\n\n              if (column.dictCode) {\n                _this3._loadDictConcatToOptions(column);\n              }\n            }\n          });\n        });\n      }\n    },\n    // 当selectRowIds改变时触发事件\n    selectedRowIds: function selectedRowIds(newValue) {\n      var _this4 = this;\n\n      this.$emit('selectRowChange', cloneObject(newValue).map(function (i) {\n        return _this4.getCleanId(i);\n      }));\n    }\n  },\n  mounted: function mounted() {\n    var vm = this;\n    /** 监听滚动条事件 */\n\n    this.getElement('inputTable').onscroll = function (event) {\n      vm.syncScrollBar(event.target.scrollLeft);\n    };\n\n    this.getElement('tbody').onscroll = function (event) {// vm.recalcTrHiddenItem(event.target.scrollTop)\n    };\n\n    var _this$$refs = this.$refs,\n        thead = _this$$refs.thead,\n        scrollView = _this$$refs.scrollView;\n\n    scrollView.onscroll = function (event) {\n      // console.log(event.target.scrollTop, ' - ', event.target.scrollLeft)\n      thead.scrollLeft = event.target.scrollLeft;\n      vm.recalcTrHiddenItem(event.target.scrollTop);\n    };\n  },\n  methods: {\n    getElement: function getElement(id) {\n      var noCaseId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!this.el[id]) {\n        this.el[id] = document.getElementById((noCaseId ? '' : this.caseId) + id);\n      }\n\n      return this.el[id];\n    },\n    getElementPromise: function getElementPromise(id) {\n      var _this5 = this;\n\n      var noCaseId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return new Promise(function (resolve) {\n        var timer = setInterval(function () {\n          var element = _this5.getElement(id, noCaseId);\n\n          if (element) {\n            clearInterval(timer);\n            resolve(element);\n          }\n        }, 10);\n      });\n    },\n\n    /** 初始化列表 */\n    initialize: function initialize() {\n      var _this6 = this;\n\n      this.visibleTrEls = []; // 判断是否是首次进入该方法，如果是就不清空行，防止删除了预添加的数据\n\n      if (!this.isFirst) {\n        // inputValues：用来存储input表单的值\n        // 数组里的每项都是一个对象，对象里每个key都是input的rowKey，值就是input的值，其中有个id的字段来区分\n        // 示例：\n        // [{\n        //    id: \"_jet-4sp0iu-15541771111770\"\n        //    dbDefaultVal: \"aaa\",\n        //    dbFieldName: \"bbb\",\n        //    dbFieldTxt: \"ccc\",\n        //    dbLength: 32\n        // }]\n        this.inputValues = [];\n        this.rows = [];\n        this.deleteIds = [];\n        this.selectValues = {};\n        this.checkboxValues = {};\n        this.jdateValues = {};\n        this.jInputPopValues = {};\n        this.slotValues = {};\n        this.selectedRowIds = [];\n        this.tooltips = {};\n        this.notPassedIds = [];\n        this.uploadValues = [];\n        this.popupValues = [];\n        this.radioValues = [];\n        this.multiSelectValues = [];\n        this.searchSelectValues = [];\n        this.scrollTop = 0;\n        this.$nextTick(function () {\n          _this6.getElement('tbody').scrollTop = 0;\n        });\n      } else {\n        this.isFirst = false;\n      }\n    },\n\n    /** 同步滚动条状态 */\n    syncScrollBar: function syncScrollBar(scrollLeft) {// this.style.tbody.left = `${scrollLeft}px`\n      // this.getElement('tbody').scrollLeft = scrollLeft\n    },\n\n    /** 重置滚动条位置，参数留空则滚动到上次记录的位置 */\n    resetScrollTop: function resetScrollTop(top) {\n      var scrollView = this.$refs.scrollView;\n\n      if (top != null && typeof top === 'number') {\n        scrollView.scrollTop = top;\n      } else {\n        scrollView.scrollTop = this.scrollTop;\n      }\n    },\n\n    /** 重新计算需要隐藏或显示的tr */\n    recalcTrHiddenItem: function recalcTrHiddenItem(top) {\n      var _this7 = this;\n\n      var diff = top - this.scrollTop;\n\n      if (diff < 0) {\n        diff = this.scrollTop - top;\n      } // 只有在滚动了百分之三十的行高的距离时才进行更新\n\n\n      if (diff >= this.rowHeight * 0.3) {\n        this.scrollTop = top; // 更新form表单的值\n\n        this.$nextTick(function () {\n          _this7.updateFormValues();\n        });\n      }\n    },\n\n    /** 生成id */\n    generateId: function generateId(rows) {\n      if (!(rows instanceof Array)) {\n        rows = this.rows || [];\n      }\n\n      var timestamp = new Date().getTime();\n      return \"\".concat(this.caseId).concat(timestamp).concat(rows.length).concat(randomNumber(6)).concat(this.tempId);\n    },\n\n    /** push 一条数据 */\n    push: function push(record) {\n      var update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var rows = arguments.length > 2 ? arguments[2] : undefined;\n      var insertIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var setDefaultValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n      return this._pushByDataSource([record], [insertIndex], update, rows, setDefaultValue);\n    },\n\n    /**\n     * push 数据\n     *\n     * @param dataSource 数据源\n     * @param insertIndexes 行插入位置，和dataSource的下标一一对应\n     * @param update 是否更新\n     * @param rows 若不传就使用 this.rows\n     * @param setDefaultValue 是否填充默认值\n     *\n     */\n    _pushByDataSource: function _pushByDataSource(dataSource) {\n      var _this8 = this;\n\n      var insertIndexes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var update = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var rows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var setDefaultValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n      if (!(rows instanceof Array)) {\n        rows = _toConsumableArray(this.rows) || [];\n      }\n\n      var checkboxValues = _objectSpread({}, this.checkboxValues);\n\n      var selectValues = _objectSpread({}, this.selectValues);\n\n      var jdateValues = _objectSpread({}, this.jdateValues);\n\n      var jInputPopValues = _objectSpread({}, this.jInputPopValues);\n\n      var slotValues = _objectSpread({}, this.slotValues);\n\n      var uploadValues = _objectSpread({}, this.uploadValues);\n\n      var popupValues = _objectSpread({}, this.popupValues);\n\n      var radioValues = _objectSpread({}, this.radioValues);\n\n      var multiSelectValues = _objectSpread({}, this.multiSelectValues);\n\n      var searchSelectValues = _objectSpread({}, this.searchSelectValues); // 禁用行的id\n\n\n      var disabledRowIds = this.disabledRowIds || [];\n      dataSource.forEach(function (data, newValueIndex) {\n        // 不能直接更改数据源的id\n        var dataId = data.id; // 判断源数据是否带有id\n\n        if (dataId == null || dataId === '') {\n          dataId = _this8.generateId(rows);\n        } else if (!_this8.hasCaseId(dataId)) {\n          dataId = _this8.caseId + dataId;\n        }\n\n        var row = {\n          id: dataId\n        };\n        var value = {\n          id: dataId\n        };\n        var disabled = false;\n\n        _this8.columns.forEach(function (column) {\n          var inputId = column.key + value.id;\n          var sourceValue = (data[column.key] == null ? '' : data[column.key]).toString();\n          var defaultValue = null;\n\n          if (setDefaultValue) {\n            defaultValue = column.defaultValue || (column.defaultValue === 0 ? 0 : '');\n\n            if (defaultValue instanceof Array) {\n              defaultValue = defaultValue.join(',');\n            }\n\n            sourceValue = typeof sourceValue === 'number' || sourceValue ? sourceValue : defaultValue;\n          }\n\n          var sourceValueIsEmpty = sourceValue == null || sourceValue === '';\n\n          if (column.type === FormTypes.inputNumber) {\n            // 判断是否是排序字段，如果是就赋最大值\n            if (column.isOrder === true) {\n              value[column.key] = _this8.getInputNumberMaxValue(column) + 1;\n            } else {\n              value[column.key] = sourceValue;\n            } // 判断是否是统计列\n\n\n            if (column.statistics) {\n              _this8.hasStatisticsColumn = true;\n\n              if (!_this8.statisticsColumns[column.key]) {\n                _this8.$set(_this8.statisticsColumns, column.key, 0);\n              }\n            }\n          } else if (column.type === FormTypes.checkbox) {\n            // 判断是否设定了customValue（自定义值）\n            if (column.customValue instanceof Array) {\n              var customValue = (column.customValue[0] || '').toString();\n\n              if (sourceValueIsEmpty && setDefaultValue) {\n                sourceValue = column.defaultChecked ? customValue : sourceValue;\n              }\n\n              checkboxValues[inputId] = sourceValue === customValue;\n            } else {\n              if (sourceValueIsEmpty && setDefaultValue) {\n                checkboxValues[inputId] = !!column.defaultChecked;\n              } else {\n                checkboxValues[inputId] = sourceValue;\n              }\n            }\n          } else if (column.type === FormTypes.select) {\n            if (!sourceValueIsEmpty) {\n              // 判断是否是多选\n              if (typeof sourceValue === 'string' && (column.props || {})['mode'] === 'multiple') {\n                sourceValue = sourceValue.split(',');\n              }\n\n              selectValues[inputId] = sourceValue;\n            } else {\n              selectValues[inputId] = undefined;\n            }\n          } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n            jdateValues[inputId] = sourceValue;\n          } else if (column.type === FormTypes.slot) {\n            slotValues[inputId] = sourceValue;\n          } else if (column.type === FormTypes.popup) {\n            popupValues[inputId] = sourceValue;\n          } else if (column.type === FormTypes.input_pop) {\n            jInputPopValues[inputId] = sourceValue;\n          } else if (column.type === FormTypes.radio) {\n            radioValues[inputId] = sourceValue;\n          } else if (column.type === FormTypes.sel_search) {\n            searchSelectValues[inputId] = sourceValue;\n          } else if (column.type === FormTypes.list_multi) {\n            if (typeof sourceValue === 'string' && sourceValue.length > 0) {\n              multiSelectValues[inputId] = sourceValue.split(',');\n            } else {\n              multiSelectValues[inputId] = [];\n            }\n          } else if (column.type === FormTypes.upload || column.type === FormTypes.file || column.type === FormTypes.image) {\n            if (sourceValue) {\n              var fileName = '';\n\n              if (sourceValue.indexOf(',') > 0) {\n                var sourceValue2 = sourceValue.split(',')[0];\n                fileName = sourceValue2.substring(sourceValue2.lastIndexOf('/') + 1);\n              } else {\n                fileName = sourceValue.substring(sourceValue.lastIndexOf('/') + 1);\n              }\n\n              uploadValues[inputId] = {\n                name: fileName,\n                status: 'done',\n                path: sourceValue\n              };\n            }\n          } else {\n            value[column.key] = sourceValue;\n          } // 解析disabledRows\n\n\n          for (var columnKey in _this8.disabledRows) {\n            // 判断是否有该属性\n            if (_this8.disabledRows.hasOwnProperty(columnKey) && data.hasOwnProperty(columnKey)) {\n              if (disabled !== true) {\n                var temp = _this8.disabledRows[columnKey]; // 禁用规则可以是一个数组\n\n                if (temp instanceof Array) {\n                  disabled = temp.includes(data[columnKey]);\n                } else {\n                  disabled = temp === data[columnKey];\n                }\n\n                if (disabled) {\n                  disabledRowIds.push(row.id);\n                }\n              }\n            }\n          }\n        }); // 插入行而不是添加到最后\n\n\n        var added = false;\n\n        if (insertIndexes instanceof Array) {\n          var insertIndex = insertIndexes[newValueIndex];\n\n          if (typeof insertIndex === 'number') {\n            added = true;\n            rows.splice(insertIndex, 0, row);\n\n            _this8.inputValues.splice(insertIndex, 0, value);\n          }\n        }\n\n        if (!added) {\n          rows.push(row);\n\n          _this8.inputValues.push(value);\n        }\n      }); // 启用了拖动排序，就重新计算排序编号\n\n      if (this.dragSort) {\n        this.inputValues.forEach(function (item, index) {\n          item[_this8.dragSortKey] = index + 1;\n        });\n      }\n\n      this.disabledRowIds = disabledRowIds;\n      this.checkboxValues = checkboxValues;\n      this.selectValues = selectValues;\n      this.jdateValues = jdateValues;\n      this.jInputPopValues = jInputPopValues;\n      this.slotValues = slotValues;\n      this.uploadValues = uploadValues;\n      this.popupValues = popupValues;\n      this.radioValues = radioValues;\n      this.multiSelectValues = multiSelectValues;\n      this.searchSelectValues = searchSelectValues; // 重新计算所有统计列\n\n      this.recalcAllStatisticsColumns(); // 更新到 dom\n\n      if (update) {\n        this.rows = rows; // 更新form表单的值\n\n        this.$nextTick(function () {\n          _this8.updateFormValues();\n        });\n      }\n\n      return rows;\n    },\n\n    /** 获取某一数字输入框列中的最大的值 */\n    getInputNumberMaxValue: function getInputNumberMaxValue(column) {\n      var maxNum = 0;\n      this.inputValues.forEach(function (item, index) {\n        var val = item[column.key],\n            num;\n\n        try {\n          num = parseInt(val);\n        } catch (_unused) {\n          num = 0;\n        } // 把首次循环的结果当成最大值\n\n\n        if (index === 0) {\n          maxNum = num;\n        } else {\n          maxNum = num > maxNum ? num : maxNum;\n        }\n      });\n      return maxNum;\n    },\n\n    /** 添加一行 */\n    add: function add() {\n      var _this9 = this;\n\n      var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var forceScrollToBottom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (num < 1) return; // let timestamp = new Date().getTime()\n\n      var rows = this.rows;\n      var row;\n\n      for (var i = 0; i < num; i++) {\n        rows = this.push({}, false, rows);\n        row = rows[rows.length - 1];\n      }\n\n      this.rows = rows;\n      this.$nextTick(function () {\n        _this9.updateFormValues();\n      }); // 触发add事件\n\n      this.$emit('added', {\n        row: function () {\n          var r = Object.assign({}, row);\n          r.id = _this9.getCleanId(r.id);\n          return r;\n        }(),\n        target: this\n      }); // 设置滚动条位置\n\n      var tbody = this.getElement('tbody');\n      var offsetHeight = tbody.offsetHeight;\n      var realScrollTop = tbody.scrollTop + offsetHeight;\n\n      if (forceScrollToBottom === false) {\n        // 只有滚动条在底部的时候才自动滚动\n        if (!(tbody.scrollHeight - realScrollTop <= 10)) {\n          return;\n        }\n      }\n\n      this.$nextTick(function () {\n        tbody.scrollTop = tbody.scrollHeight;\n      });\n    },\n\n    /**\n     * 在指定位置添加一行\n     * @param insertIndex 添加位置下标\n     * @param num 添加的行数，默认1\n     */\n    insert: function insert(insertIndex) {\n      var _this10 = this;\n\n      var num = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      if (!insertIndex && num < 1) return;\n      var rows = this.rows;\n      var newRows = [];\n\n      for (var i = 0; i < num; i++) {\n        var row = {\n          id: this.generateId(rows)\n        };\n        rows = this.push(row, false, rows, insertIndex);\n        newRows.push(row);\n      } // 同步更改\n\n\n      this.rows = rows;\n      this.$nextTick(function () {\n        _this10.recalcSortNumber();\n\n        _this10.forceUpdateFormValues();\n      }); // 触发 insert 事件\n\n      this.$emit('inserted', {\n        rows: newRows.map(function (row) {\n          var r = cloneObject(row);\n          r.id = _this10.getCleanId(r.id);\n          return r;\n        }),\n        num: num,\n        insertIndex: insertIndex,\n        target: this\n      });\n    },\n\n    /** 删除被选中的行 */\n    removeSelectedRows: function removeSelectedRows() {\n      this.removeRows(this.selectedRowIds);\n      this.selectedRowIds = [];\n    },\n\n    /** 删除一行或多行 */\n    removeRows: function removeRows(id) {\n      var _this11 = this;\n\n      var ids = id;\n\n      if (!(id instanceof Array)) {\n        if (typeof id === 'string') {\n          ids = [id];\n        } else {\n          throw \"JEditableTable.removeRows() \\u51FD\\u6570\\u9700\\u8981\\u7684\\u53C2\\u6570\\u53EF\\u4EE5\\u662Fstring\\u6216Array\\u7C7B\\u578B\\uFF0C\\u4F46\\u63D0\\u4F9B\\u7684\\u5374\\u662F\".concat(_typeof(id));\n        }\n      }\n\n      var rows = cloneObject(this.rows);\n      ids.forEach(function (removeId) {\n        removeId = _this11.getCleanId(removeId); // 找到每个id对应的真实index并删除\n\n        var findAndDelete = function findAndDelete(arr) {\n          for (var i = 0; i < arr.length; i++) {\n            var currentId = _this11.getCleanId(arr[i].id);\n\n            if (currentId === removeId) {\n              arr.splice(i, 1);\n              return true;\n            }\n          }\n        }; // 找到rows对应的index，并删除\n\n\n        if (findAndDelete(rows)) {\n          // 找到values对应的index，并删除\n          findAndDelete(_this11.inputValues); // 将caseId去除\n\n          var _id = _this11.getCleanId(removeId);\n\n          _this11.deleteIds.push(_id);\n        }\n      });\n      this.rows = rows;\n      this.$emit('deleted', this.getDeleteIds(), this);\n      this.$nextTick(function () {\n        // 更新formValues\n        _this11.updateFormValues(); // 重新计算统计\n\n\n        _this11.recalcAllStatisticsColumns();\n      });\n      return true;\n    },\n\n    /** 获取表格表单里的值（异步版） */\n    getValuesAsync: function getValuesAsync() {\n      var _this12 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments.length > 1 ? arguments[1] : undefined;\n      var validate = options.validate,\n          rowIds = options.rowIds,\n          deleteTempId = options.deleteTempId;\n      if (typeof validate !== 'boolean') validate = true;\n      if (!(rowIds instanceof Array)) rowIds = null; // 是否删除临时ID，默认为 false\n\n      if (typeof deleteTempId !== 'boolean') deleteTempId = false; // console.log('options:', { validate, rowIds })\n\n      var asyncCount = 0;\n      var error = 0;\n      var inputValues = cloneObject(this.inputValues);\n      var tooltips = Object.assign({}, this.tooltips);\n      var notPassedIds = cloneObject(this.notPassedIds); // 用于存储合并后的值\n\n      var values = []; // 遍历inputValues来获取每行的值\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var value = _step.value;\n          var rowIdsFlag = false; // 如果带有rowIds，那么就只存这几行的数据\n\n          if (rowIds == null) {\n            rowIdsFlag = true;\n          } else {\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = rowIds[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var rowId = _step2.value;\n\n                if (_this12.getCleanId(rowId) === _this12.getCleanId(value.id)) {\n                  rowIdsFlag = true;\n                  break;\n                }\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          }\n\n          if (!rowIdsFlag) return \"continue\";\n\n          _this12.columns.forEach(function (column) {\n            var inputId = column.key + value.id;\n\n            if (column.type === FormTypes.checkbox) {\n              var checked = _this12.checkboxValues[inputId];\n\n              if (column.customValue instanceof Array) {\n                value[column.key] = checked ? column.customValue[0] : column.customValue[1];\n              } else {\n                value[column.key] = checked;\n              }\n            } else if (column.type === FormTypes.select) {\n              var selected = _this12.selectValues[inputId];\n\n              if (selected instanceof Array) {\n                value[column.key] = cloneObject(selected);\n              } else {\n                value[column.key] = selected;\n              }\n            } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n              value[column.key] = _this12.jdateValues[inputId];\n            } else if (column.type === FormTypes.input_pop) {\n              value[column.key] = _this12.jInputPopValues[inputId];\n            } else if (column.type === FormTypes.upload) {\n              value[column.key] = cloneObject(_this12.uploadValues[inputId] || null);\n            } else if (column.type === FormTypes.image || column.type === FormTypes.file) {\n              var currUploadObj = cloneObject(_this12.uploadValues[inputId] || null);\n\n              if (currUploadObj) {\n                value[column.key] = currUploadObj['path'] || null;\n              }\n            } else if (column.type === FormTypes.popup) {\n              if (!value[column.key]) {\n                value[column.key] = _this12.popupValues[inputId] || null;\n              }\n            } else if (column.type === FormTypes.radio) {\n              value[column.key] = _this12.radioValues[inputId];\n            } else if (column.type === FormTypes.sel_search) {\n              value[column.key] = _this12.searchSelectValues[inputId];\n            } else if (column.type === FormTypes.list_multi) {\n              if (!_this12.multiSelectValues[inputId] || _this12.multiSelectValues[inputId].length === 0) {\n                value[column.key] = '';\n              } else {\n                value[column.key] = _this12.multiSelectValues[inputId].join(',');\n              }\n            } else if (column.type === FormTypes.slot) {\n              value[column.key] = _this12.slotValues[inputId];\n            } // 检查表单验证\n\n\n            if (validate === true) {\n              var handleValidateOneInput = function handleValidateOneInput(results) {\n                tooltips[inputId] = results[0];\n\n                if (tooltips[inputId].passed === false) {\n                  error++; // if (error++ === 0) {\n                  // let element = document.getElementById(inputId)\n                  // while (element.className !== 'tr') {\n                  //   element = element.parentElement\n                  // }\n                  // this.jumpToId(inputId, element)\n                  // }\n                }\n\n                tooltips[inputId].visible = false;\n                notPassedIds = results[1];\n              };\n\n              asyncCount++;\n\n              var results = _this12.validateOneInputAsync(value[column.key], value, column, notPassedIds, false, 'getValues', function (results) {\n                handleValidateOneInput(results);\n                asyncCount--;\n              });\n\n              handleValidateOneInput(results);\n            }\n          }); // 删除 tempId\n\n\n          if (deleteTempId && _this12.isTempId(value.id)) {\n            delete value.id;\n          } else {\n            value.id = _this12.getCleanId(value.id);\n          }\n\n          values.push(value);\n        };\n\n        for (var _iterator = inputValues[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _ret = _loop();\n\n          if (_ret === \"continue\") continue;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (validate === true) {\n        this.tooltips = tooltips;\n        this.notPassedIds = notPassedIds;\n      }\n\n      var timer = setInterval(function () {\n        if (asyncCount === 0) {\n          clearInterval(timer);\n\n          if (typeof callback === 'function') {\n            callback({\n              error: error,\n              values: values\n            });\n          }\n        }\n      }, 10);\n      return {\n        error: error,\n        values: values\n      };\n    },\n\n    /** 获取表格表单里的值（同步版） */\n    getValuesSync: function getValuesSync() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.getValuesAsync(options);\n    },\n\n    /** 获取表格表单里的值 */\n    getValues: function getValues(callback) {\n      var validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var rowIds = arguments.length > 2 ? arguments[2] : undefined;\n      this.getValuesAsync({\n        validate: validate,\n        rowIds: rowIds\n      }, function (_ref) {\n        var error = _ref.error,\n            values = _ref.values;\n\n        if (typeof callback === 'function') {\n          callback(error, values);\n        }\n      });\n    },\n\n    /** getValues的Promise版 */\n    getValuesPromise: function getValuesPromise() {\n      var _this13 = this;\n\n      var validate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var rowIds = arguments.length > 1 ? arguments[1] : undefined;\n      var deleteTempId = arguments.length > 2 ? arguments[2] : undefined;\n      return new Promise(function (resolve, reject) {\n        _this13.getValuesAsync({\n          validate: validate,\n          rowIds: rowIds,\n          deleteTempId: deleteTempId\n        }, function (_ref2) {\n          var error = _ref2.error,\n              values = _ref2.values;\n\n          if (error === 0) {\n            resolve(values);\n          } else {\n            reject(VALIDATE_NO_PASSED);\n          }\n        });\n      });\n    },\n\n    /** 获取被删除项的id */\n    getDeleteIds: function getDeleteIds() {\n      return cloneObject(this.deleteIds);\n    },\n\n    /** 获取所有的数据，包括values、deleteIds */\n    getAll: function getAll(validate, deleteTempId) {\n      var _this14 = this;\n\n      return new Promise(function (resolve, reject) {\n        var deleteIds = _this14.getDeleteIds();\n\n        _this14.getValuesPromise(validate, null, deleteTempId).then(function (values) {\n          resolve({\n            values: values,\n            deleteIds: deleteIds\n          });\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n\n    /** Sync 获取所有的数据，包括values、deleteIds */\n    getAllSync: function getAllSync(validate, rowIds, deleteTempId) {\n      var result = this.getValuesSync({\n        validate: validate,\n        rowIds: rowIds,\n        deleteTempId: deleteTempId\n      });\n      result.deleteIds = this.getDeleteIds();\n      return result;\n    },\n    // slot 获取值\n    _getValueForSlot: function _getValueForSlot(rowId) {\n      return this.getValuesSync({\n        rowIds: [rowId]\n      }).values[0];\n    },\n    _getAllValuesForSlot: function _getAllValuesForSlot() {\n      return cloneObject({\n        inputValues: this.inputValues,\n        selectValues: this.selectValues,\n        checkboxValues: this.checkboxValues,\n        jdateValues: this.jdateValues,\n        jInputPopValues: this.jInputPopValues,\n        slotValues: this.slotValues,\n        uploadValues: this.uploadValues,\n        popupValues: this.popupValues,\n        radioValues: this.radioValues,\n        multiSelectValues: this.multiSelectValues,\n        searchSelectValues: this.searchSelectValues\n      });\n    },\n\n    /** 设置某行某列的值 */\n    setValues: function setValues(values) {\n      var _this15 = this;\n\n      values.forEach(function (item) {\n        var rowKey = item.rowKey,\n            newValues = item.values;\n        rowKey = _this15.getCleanId(rowKey);\n\n        var _loop2 = function _loop2(newValueKey) {\n          if (newValues.hasOwnProperty(newValueKey)) {\n            var newValue = newValues[newValueKey];\n            var edited = false; // 已被修改\n\n            _this15.inputValues.forEach(function (value) {\n              // 在inputValues中找到了该字段\n              if (rowKey === _this15.getCleanId(value.id)) {\n                if (value.hasOwnProperty(newValueKey)) {\n                  edited = true;\n                  value[newValueKey] = newValue;\n                }\n              }\n            });\n\n            var modelKey = \"\".concat(newValueKey).concat(_this15.caseId).concat(rowKey); // 在 selectValues 中寻找值\n\n            if (!edited) {\n              if (newValue !== 0 && !newValue) {\n                edited = _this15.setOneValue(_this15.selectValues, modelKey, undefined);\n              } else {\n                edited = _this15.setOneValue(_this15.selectValues, modelKey, newValue);\n              }\n            } // 在 checkboxValues 中寻找值\n\n\n            if (!edited) {\n              edited = _this15.setOneValue(_this15.checkboxValues, modelKey, newValue);\n            } // 在 jdateValues 中寻找值\n\n\n            if (!edited) {\n              edited = _this15.setOneValue(_this15.jdateValues, modelKey, newValue);\n            } // 在 jInputPopValues 中寻找值\n\n\n            if (!edited) {\n              edited = _this15.setOneValue(_this15.jInputPopValues, modelKey, newValue);\n            } // 在 slotValues 中寻找值\n\n\n            if (!edited) {\n              edited = _this15.setOneValue(_this15.slotValues, modelKey, newValue);\n            } // 在 uploadValues 中寻找值\n\n\n            if (!edited) {\n              edited = _this15.setOneValue(_this15.uploadValues, modelKey, newValue);\n            } // 在 popupValues 中寻找值\n\n\n            if (!edited) {\n              edited = _this15.setOneValue(_this15.popupValues, modelKey, newValue);\n            } // 在 radioValues 中寻找值\n\n\n            if (!edited) {\n              edited = _this15.setOneValue(_this15.radioValues, modelKey, newValue);\n            } // 在 multiSelectValues 中寻找值\n\n\n            if (!edited) {\n              edited = _this15.setOneValue(_this15.multiSelectValues, modelKey, newValue);\n            } // 在 searchSelectValues 中寻找值\n\n\n            if (!edited) {\n              edited = _this15.setOneValue(_this15.searchSelectValues, modelKey, newValue);\n            }\n          }\n        };\n\n        for (var newValueKey in newValues) {\n          _loop2(newValueKey);\n        }\n      }); // 强制更新formValues\n\n      this.forceUpdateFormValues();\n    },\n    setOneValue: function setOneValue(valuesObject, modelKey, value) {\n      var key = this.valuesHasOwnProperty(valuesObject, modelKey);\n\n      if (key) {\n        this.$set(valuesObject, key, value);\n        return true;\n      }\n\n      return false;\n    },\n    valuesHasOwnProperty: function valuesHasOwnProperty(values, ownProperty) {\n      var key = ownProperty;\n\n      if (values.hasOwnProperty(key)) {\n        return key;\n      }\n\n      if (values.hasOwnProperty(key + this.tempId)) {\n        return key + this.tempId;\n      }\n\n      return null;\n    },\n\n    /** 跳转到指定位置 */\n    // jumpToId(id, element) {\n    //   if (element == null) {\n    //     element = document.getElementById(id)\n    //   }\n    //   if (element != null) {\n    //     console.log(this.getElement('tbody').scrollTop, element.offsetTop)\n    //     this.getElement('tbody').scrollTop = element.offsetTop\n    //     console.log(this.getElement('tbody').scrollTop, element.offsetTop)\n    //   }\n    // },\n\n    /**\n     * 验证单个表单，异步版\n     *\n     * @param value 校验的值\n     * @param row 校验的行\n     * @param column 校验的列\n     * @param notPassedIds 没有通过校验的 id\n     * @param update 是否更新到vue中\n     * @param validType 校验触发的方式（input、blur等）\n     * @param callback\n     */\n    validateOneInputAsync: function validateOneInputAsync(value, row, column, notPassedIds) {\n      var _this16 = this;\n\n      var update = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var validType = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'input';\n      var callback = arguments.length > 6 ? arguments[6] : undefined;\n      var tooltips = Object.assign({}, this.tooltips); // let notPassedIds = cloneObject(this.notPassedIds)\n\n      var inputId = column.key + row.id;\n      tooltips[inputId] = tooltips[inputId] ? tooltips[inputId] : {};\n\n      var _this$validateValue = this.validateValue(column, value),\n          _this$validateValue2 = _slicedToArray(_this$validateValue, 2),\n          passed = _this$validateValue2[0],\n          message = _this$validateValue2[1];\n\n      var nextThen = function nextThen(res) {\n        var _res = _slicedToArray(res, 2),\n            passed = _res[0],\n            message = _res[1]; // !(passed == null && tooltips[inputId].visible != null)\n\n\n        if (passed != null) {\n          tooltips[inputId].visible = !passed;\n          tooltips[inputId].passed = passed;\n          var index = notPassedIds.indexOf(inputId);\n          var borderColor = null,\n              boxShadow = null;\n\n          if (!passed) {\n            tooltips[inputId].title = _this16.replaceProps(column, message);\n            borderColor = 'red';\n            boxShadow = \"0 0 0 2px rgba(255, 0, 0, 0.2)\";\n            if (index === -1) notPassedIds.push(inputId);\n          } else {\n            if (index !== -1) notPassedIds.splice(index, 1);\n          }\n\n          var element = document.getElementById(inputId);\n\n          if (element != null) {\n            // select 在 .ant-select-selection 上设置 border-color\n            if (column.type === FormTypes.select) {\n              element = element.getElementsByClassName('ant-select-selection')[0];\n            } // jdate 在 input 上设置 border-color\n\n\n            if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n              element = element.getElementsByTagName('input')[0];\n            } // upload 在 .ant-upload .ant-btn 上设置 border-color\n\n\n            if (column.type === FormTypes.upload || column.type === FormTypes.file || column.type === FormTypes.image) {\n              element = element.getElementsByClassName('ant-upload')[0].getElementsByClassName('ant-btn')[0];\n            }\n\n            element.style.borderColor = borderColor;\n            element.style.boxShadow = boxShadow;\n\n            if (element.tagName === 'SPAN') {\n              element.style.display = 'block';\n            }\n          }\n        } // 是否更新到data\n\n\n        if (update) {\n          _this16.tooltips = tooltips;\n          _this16.notPassedIds = notPassedIds;\n        }\n\n        if (typeof callback === 'function') {\n          callback([tooltips[inputId], notPassedIds]);\n        }\n      };\n\n      if (typeof passed === 'function') {\n        var executed = false;\n        passed(validType, value, {\n          id: this.getCleanId(row.id)\n        }, _objectSpread({}, column), function (flag, msg) {\n          if (executed) return;\n          executed = true;\n\n          if (typeof msg === 'string') {\n            message = msg;\n          }\n\n          if (flag == null) {\n            nextThen([null, message]);\n          } else {\n            nextThen([!!flag, message]);\n          }\n        }, this);\n      } else {\n        nextThen([passed, message]);\n      }\n\n      return [tooltips[inputId], notPassedIds];\n    },\n\n    /** 验证单个表单 */\n    validateOneInput: function validateOneInput(value, row, column, notPassedIds) {\n      var update = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var validType = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'input';\n      return this.validateOneInputAsync(value, row, column, notPassedIds, update, validType);\n    },\n\n    /** 通过规则验证值是否正确 */\n    validateValue: function validateValue(column, value) {\n      var rules = column.validateRules;\n      var passed = true,\n          message = ''; // 判断有没有验证规则或验证规则格式正不正确，若条件不符合则默认通过\n\n      if (rules instanceof Array) {\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = rules[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var rule = _step3.value;\n            // 当前值是否为空\n            var isNull = value == null || value === ''; // 验证规则：非空\n\n            if (rule.required === true && isNull) {\n              passed = false;\n            } else // 使用 else-if 是为了防止一个 rule 中出现两个规则\n              // 验证规则：唯一校验\n              if (rule.unique === true || rule.pattern === 'only') {\n                var _this$getValuesSync = this.getValuesSync({\n                  validate: false\n                }),\n                    values = _this$getValuesSync.values;\n\n                var findCount = 0;\n                var _iteratorNormalCompletion4 = true;\n                var _didIteratorError4 = false;\n                var _iteratorError4 = undefined;\n\n                try {\n                  for (var _iterator4 = values[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                    var val = _step4.value;\n\n                    if (val[column.key] === value) {\n                      if (++findCount >= 2) {\n                        passed = false;\n                        break;\n                      }\n                    }\n                  }\n                } catch (err) {\n                  _didIteratorError4 = true;\n                  _iteratorError4 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                      _iterator4.return();\n                    }\n                  } finally {\n                    if (_didIteratorError4) {\n                      throw _iteratorError4;\n                    }\n                  }\n                }\n              } else // 验证规则：正则表达式\n                if (!!rule.pattern && !isNull) {\n                  // 兼容 online 的规则\n                  var foo = [{\n                    title: '6到16位数字',\n                    value: 'n6-16',\n                    pattern: /^\\d{6,18}$/\n                  }, {\n                    title: '6到16位任意字符',\n                    value: '*6-16',\n                    pattern: /^.{6,16}$/\n                  }, {\n                    title: '6到18位字母',\n                    value: 's6-18',\n                    pattern: /^[a-z|A-Z]{6,18}$/\n                  }, {\n                    title: '网址',\n                    value: 'url',\n                    pattern: /^(?:([A-Za-z]+):)?(\\/{0,3})([0-9.\\-A-Za-z]+)(?::(\\d+))?(?:\\/([^?#]*))?(?:\\?([^#]*))?(?:#(.*))?$/\n                  }, {\n                    title: '电子邮件',\n                    value: 'e',\n                    pattern: /^([\\w]+\\.*)([\\w]+)@[\\w]+\\.\\w{3}(\\.\\w{2}|)$/\n                  }, {\n                    title: '手机号码',\n                    value: 'm',\n                    pattern: /^1[3456789]\\d{9}$/\n                  }, {\n                    title: '邮政编码',\n                    value: 'p',\n                    pattern: /^[1-9]\\d{5}$/\n                  }, {\n                    title: '字母',\n                    value: 's',\n                    pattern: /^[A-Z|a-z]+$/\n                  }, {\n                    title: '数字',\n                    value: 'n',\n                    pattern: /^-?\\d+(\\.?\\d+|\\d?)$/\n                  }, {\n                    title: '整数',\n                    value: 'z',\n                    pattern: /^-?\\d+$/\n                  }, {\n                    title: '非空',\n                    value: '*',\n                    pattern: /^.+$/\n                  }, {\n                    title: '金额',\n                    value: 'money',\n                    pattern: /^(([1-9][0-9]*)|([0]\\.\\d{0,2}|[1-9][0-9]*\\.\\d{0,2}))$/\n                  }];\n                  var flag = false;\n\n                  for (var _i2 = 0, _foo = foo; _i2 < _foo.length; _i2++) {\n                    var item = _foo[_i2];\n\n                    if (rule.pattern === item.value && item.pattern) {\n                      passed = new RegExp(item.pattern).test(value);\n                      flag = true;\n                      break;\n                    }\n                  }\n\n                  if (!flag) passed = new RegExp(rule.pattern).test(value);\n                } else // 校验规则：自定义函数校验\n                  if (typeof rule.handler === 'function') {\n                    return [rule.handler, rule.message];\n                  } // 如果没有通过验证，则跳出循环。如果通过了验证，则继续验证下一条规则\n\n\n            if (!passed) {\n              message = rule.message;\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n      }\n\n      return [passed, message];\n    },\n\n    /** 动态更新表单的值 */\n    updateFormValues: function updateFormValues() {\n      var _this17 = this;\n\n      var trs = this.getElement('tbody').getElementsByClassName('tr');\n      var trEls = [];\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = trs[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var _tr = _step5.value;\n          trEls.push(_tr);\n        } // 获取新增的 tr\n\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      var newTrEls = trEls;\n\n      if (this.visibleTrEls.length > 0) {\n        newTrEls = [];\n        var _iteratorNormalCompletion6 = true;\n        var _didIteratorError6 = false;\n        var _iteratorError6 = undefined;\n\n        try {\n          for (var _iterator6 = trEls[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n            var tr = _step6.value;\n            var isNewest = true;\n            var _iteratorNormalCompletion7 = true;\n            var _didIteratorError7 = false;\n            var _iteratorError7 = undefined;\n\n            try {\n              for (var _iterator7 = this.visibleTrEls[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                var vtr = _step7.value;\n\n                if (vtr.id === tr.id) {\n                  isNewest = false;\n                  break;\n                }\n              }\n            } catch (err) {\n              _didIteratorError7 = true;\n              _iteratorError7 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n                  _iterator7.return();\n                }\n              } finally {\n                if (_didIteratorError7) {\n                  throw _iteratorError7;\n                }\n              }\n            }\n\n            if (isNewest) {\n              newTrEls.push(tr);\n            }\n          }\n        } catch (err) {\n          _didIteratorError6 = true;\n          _iteratorError6 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n              _iterator6.return();\n            }\n          } finally {\n            if (_didIteratorError6) {\n              throw _iteratorError6;\n            }\n          }\n        }\n      }\n\n      this.visibleTrEls = trEls; // 向新增的tr中赋值\n\n      newTrEls.forEach(function (tr) {\n        var idx = tr.dataset.idx;\n        var value = _this17.inputValues[idx];\n\n        for (var key in value) {\n          if (value.hasOwnProperty(key)) {\n            var elid = \"\".concat(key).concat(value.id);\n            var el = document.getElementById(elid);\n\n            if (el) {\n              el.value = value[key];\n            }\n          }\n        }\n      });\n    },\n\n    /** 强制更新FormValues */\n    forceUpdateFormValues: function forceUpdateFormValues() {\n      this.visibleTrEls = [];\n      this.updateFormValues();\n    },\n    // 重新计算所有统计列\n    recalcAllStatisticsColumns: function recalcAllStatisticsColumns() {\n      var _this18 = this;\n\n      if (this.hasStatisticsColumn) {\n        Object.keys(this.statisticsColumns).forEach(function (key) {\n          return _this18.recalcOneStatisticsColumn(key);\n        });\n      }\n    },\n    // 重新计算单个统计列\n    recalcOneStatisticsColumn: function recalcOneStatisticsColumn(key) {\n      if (this.hasStatisticsColumn) {\n        if (this.statisticsColumns.hasOwnProperty(key)) {\n          // 计算合计值\n          var count = 0;\n          this.inputValues.forEach(function (item) {\n            var value = item[key];\n\n            if (value && count !== '-') {\n              try {\n                // 20200528 cfm modi\n                // count += Number.parseInt(value)\n                count += Number.parseFloat(value);\n              } catch (e) {\n                count = '-';\n              }\n            }\n          });\n          this.statisticsColumns[key] = count;\n        }\n      }\n    },\n\n    /** 获取某个统计字段的值 */\n    getStatisticsValue: function getStatisticsValue(key) {\n      if (this.hasStatisticsColumn) {\n        if (this.statisticsColumns.hasOwnProperty(key)) {\n          return this.statisticsColumns[key];\n        }\n      }\n\n      return null;\n    },\n\n    /** 全选或取消全选 */\n    handleChangeCheckedAll: function handleChangeCheckedAll() {\n      var _this19 = this;\n\n      var selectedRowIds = [];\n\n      if (!this.getSelectAll) {\n        this.rows.forEach(function (row) {\n          if ((_this19.disabledRowIds || []).indexOf(row.id) === -1) {\n            selectedRowIds.push(row.id);\n          }\n        });\n      }\n\n      this.selectedRowIds = selectedRowIds;\n    },\n\n    /** 左侧行选择框change事件 */\n    handleChangeLeftCheckbox: function handleChangeLeftCheckbox(event) {\n      var id = event.target.id;\n\n      if ((this.disabledRowIds || []).indexOf(id) !== -1) {\n        return;\n      }\n\n      var index = this.selectedRowIds.indexOf(id);\n\n      if (index !== -1) {\n        this.selectedRowIds.splice(index, 1);\n      } else {\n        this.selectedRowIds.push(id);\n      }\n    },\n    handleClickAdd: function handleClickAdd() {\n      this.add();\n    },\n    handleConfirmDelete: function handleConfirmDelete() {\n      this.removeSelectedRows();\n    },\n    handleClickClearSelection: function handleClickClearSelection() {\n      this.clearSelection();\n    },\n    clearSelection: function clearSelection() {\n      this.selectedRowIds = [];\n    },\n\n    /** 用于搜索下拉框中的内容 */\n    handleSelectFilterOption: function handleSelectFilterOption(input, option, column) {\n      if (column.allowSearch === true || column.allowInput === true) {\n        return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n      }\n\n      return true;\n    },\n\n    /** select 搜索时的事件，用于动态添加options */\n    handleSearchSelect: function handleSearchSelect(value, id, row, col) {\n      if (col.allowSearch !== true && col.allowInput === true) {\n        // 是否找到了对应的项，找不到则添加这一项\n        var flag = false;\n        var _iteratorNormalCompletion8 = true;\n        var _didIteratorError8 = false;\n        var _iteratorError8 = undefined;\n\n        try {\n          for (var _iterator8 = col.options[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n            var option = _step8.value;\n\n            if (option.value.toLocaleString() === value.toLocaleString()) {\n              flag = true;\n              break;\n            }\n          } // !!value ：不添加空值\n\n        } catch (err) {\n          _didIteratorError8 = true;\n          _iteratorError8 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n              _iterator8.return();\n            }\n          } finally {\n            if (_didIteratorError8) {\n              throw _iteratorError8;\n            }\n          }\n        }\n\n        if (!flag && !!value) {\n          // searchAdd 是否是通过搜索添加的\n          col.options.push({\n            title: value,\n            value: value,\n            searchAdd: true\n          });\n        }\n      }\n    },\n    // blur 失去焦点\n    handleBlurSearch: function handleBlurSearch(value, id, row, col) {\n      if (col.allowInput === true) {\n        // 删除无用的因搜索（用户输入）而创建的项\n        if (typeof value === 'string') {\n          var indexs = [];\n          col.options.forEach(function (option, index) {\n            if (option.value.toLocaleString() === value.toLocaleString()) {\n              delete option.searchAdd;\n            } else if (option.searchAdd === true) {\n              indexs.push(index);\n            }\n          }); // 翻转删除数组中的项\n\n          var _iteratorNormalCompletion9 = true;\n          var _didIteratorError9 = false;\n          var _iteratorError9 = undefined;\n\n          try {\n            for (var _iterator9 = indexs.reverse()[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n              var index = _step9.value;\n              col.options.splice(index, 1);\n            }\n          } catch (err) {\n            _didIteratorError9 = true;\n            _iteratorError9 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n                _iterator9.return();\n              }\n            } finally {\n              if (_didIteratorError9) {\n                throw _iteratorError9;\n              }\n            }\n          }\n        }\n      } // 做单个表单验证\n\n\n      this.validateOneInput(value, row, col, this.notPassedIds, true, 'blur');\n    },\n\n    /** 触发已拖动事件 */\n    emitDragged: function emitDragged(oldIndex, newIndex) {\n      this.$emit('dragged', {\n        oldIndex: oldIndex,\n        newIndex: newIndex,\n        target: this\n      });\n    },\n    handleDragMoveStart: function handleDragMoveStart(event) {\n      this.dragging = true;\n      this.$refs.scrollView.style.overflow = 'hidden';\n    },\n\n    /** 拖动结束，交换inputValue中的值 */\n    handleDragMoveEnd: function handleDragMoveEnd(event) {\n      this.dragging = false;\n      this.$refs.scrollView.style.overflow = 'auto';\n      var oldIndex = event.oldIndex,\n          newIndex = event.newIndex,\n          dataIdx = event.item.dataset.idx; // 由于动态显示隐藏行导致index有误差，需要算出真实的index\n\n      var diff = Number.parseInt(dataIdx) - oldIndex;\n      oldIndex += diff;\n      newIndex += diff;\n      this.rowResort(oldIndex, newIndex);\n      this.emitDragged(oldIndex, newIndex);\n    },\n\n    /** 行重新排序 */\n    rowResort: function rowResort(oldIndex, newIndex) {\n      var sort = function sort(array) {\n        // 存储旧数据，并删除旧项目\n        var temp = array[oldIndex];\n        array.splice(oldIndex, 1); // 向新项目里添加旧数据\n\n        array.splice(newIndex, 0, temp);\n      };\n\n      sort(this.rows);\n      sort(this.inputValues);\n      this.recalcSortNumber();\n      this.forceUpdateFormValues();\n    },\n\n    /** 重新计算排序字段的数值 */\n    recalcSortNumber: function recalcSortNumber() {\n      var _this20 = this;\n\n      if (this.dragSort) {\n        // 重置排序字段\n        this.inputValues.forEach(function (val, idx) {\n          return val[_this20.dragSortKey] = idx + 1;\n        });\n      }\n    },\n\n    /** 当前行向上移一位 */\n    _handleRowMoveUp: function _handleRowMoveUp(rowIndex) {\n      if (rowIndex > 0) {\n        var newIndex = rowIndex - 1;\n        this.rowResort(rowIndex, newIndex);\n        this.emitDragged(rowIndex, newIndex);\n      }\n    },\n\n    /** 当前行向下移一位 */\n    _handleRowMoveDown: function _handleRowMoveDown(rowIndex) {\n      if (rowIndex < this.rows.length - 1) {\n        var newIndex = rowIndex + 1;\n        this.rowResort(rowIndex, newIndex);\n        this.emitDragged(rowIndex, newIndex);\n      }\n    },\n\n    /** 在当前行下面插入一行 */\n    _handleRowInsertDown: function _handleRowInsertDown(rowIndex) {\n      var insertIndex = rowIndex + 1;\n      this.insert(insertIndex);\n    },\n\n    /* --- common function begin --- */\n\n    /** 鼠标移入 */\n    handleMouseoverCommono: function handleMouseoverCommono(row, column) {\n      var inputId = column.key + row.id;\n\n      if (this.notPassedIds.indexOf(inputId) !== -1) {\n        this.showOrHideTooltip(inputId, true, true);\n      }\n    },\n\n    /** 鼠标移出 */\n    handleMouseoutCommono: function handleMouseoutCommono(row, column) {\n      var inputId = column.key + row.id;\n      this.showOrHideTooltip(inputId, false);\n    },\n\n    /** input事件 */\n    handleInputCommono: function handleInputCommono(target, index, row, column) {\n      var oldValue = this.inputValues[index][column.key] || '';\n      var value = target.value,\n          dataset = target.dataset,\n          selectionStart = target.selectionStart;\n      var type = FormTypes.input;\n      var change = true;\n\n      if (\"\".concat(dataset.inputNumber) === 'true') {\n        type = FormTypes.inputNumber; // 判断输入的值是否匹配数字正则表达式，不匹配就还原\n\n        if (!/^-?\\d+\\.?\\d*$/.test(value) && value !== '' && value !== '-') {\n          change = false;\n          value = oldValue;\n          target.value = value;\n\n          if (typeof selectionStart === 'number') {\n            target.selectionStart = selectionStart - 1;\n            target.selectionEnd = selectionStart - 1;\n          }\n        }\n      } // 存储输入的值\n\n\n      this.inputValues[index][column.key] = value; // 做单个表单验证\n\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'input');\n\n      if (type === FormTypes.inputNumber) {\n        this.recalcOneStatisticsColumn(column.key);\n      } // 触发valueChange 事件\n\n\n      if (change) {\n        this.elemValueChange(type, row, column, value);\n      }\n    },\n\n    /** slot Change */\n    handleChangeSlotCommon: function handleChangeSlotCommon(value, id, row, column) {\n      this.slotValues = this.bindValuesChange(value, id, 'slotValues'); // 做单个表单验证\n\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change'); // 触发valueChange 事件\n\n      this.elemValueChange(FormTypes.slot, row, column, value);\n    },\n    handleBlurCommono: function handleBlurCommono(target, index, row, column) {\n      var value = target.value,\n          dataset = target.dataset;\n\n      if (dataset && \"\".concat(dataset.inputNumber) === 'true') {\n        // 判断输入的值是否匹配数字正则表达式，不匹配就置空\n        if (!/^-?\\d+\\.?\\d*$/.test(value)) {\n          value = '';\n        } else {\n          value = Number.parseFloat(value);\n        }\n\n        target.value = value;\n      } // 做单个表单验证\n\n\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'blur');\n    },\n    handleChangeCheckboxCommon: function handleChangeCheckboxCommon(event, row, column) {\n      var _event$target = event.target,\n          id = _event$target.id,\n          checked = _event$target.checked;\n      this.checkboxValues = this.bindValuesChange(checked, id, 'checkboxValues'); // 触发valueChange 事件\n\n      this.elemValueChange(FormTypes.checkbox, row, column, checked);\n    },\n    handleChangeSelectCommon: function handleChangeSelectCommon(value, id, row, column) {\n      this.selectValues = this.bindValuesChange(value, id, 'selectValues'); // 做单个表单验证\n\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change'); // 触发valueChange 事件\n\n      this.elemValueChange(FormTypes.select, row, column, value);\n    },\n    handleChangeJDateCommon: function handleChangeJDateCommon(value, id, row, column, showTime) {\n      this.jdateValues = this.bindValuesChange(value, id, 'jdateValues');\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change'); // 触发valueChange 事件\n\n      if (showTime) {\n        this.elemValueChange(FormTypes.datetime, row, column, value);\n      } else {\n        this.elemValueChange(FormTypes.date, row, column, value);\n      }\n    },\n    handleChangeJInputPopCommon: function handleChangeJInputPopCommon(value, id, row, column) {\n      this.jInputPopValues = this.bindValuesChange(value, id, 'jInputPopValues'); // 做单个表单验证\n\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change'); // 触发valueChange 事件\n\n      this.elemValueChange(FormTypes.input_pop, row, column, value);\n    },\n    handleChangeUpload: function handleChangeUpload(info, id, row, column) {\n      var file = info.file;\n      var value = {\n        name: file.name,\n        type: file.type,\n        size: file.size,\n        status: file.status,\n        percent: file.percent\n      };\n\n      if (column.responseName && file.response) {\n        value['responseName'] = file.response[column.responseName];\n      }\n\n      if (file.status === 'done') {\n        value['path'] = file.response[column.responseName];\n      } else if (file.status === 'error') {\n        value['message'] = file.response.message || '未知错误';\n      }\n\n      this.uploadValues = this.bindValuesChange(value, id, 'uploadValues');\n    },\n    handleMoreOperation: function handleMoreOperation(id, flag) {\n      //console.log(\"this.uploadValues[id]\",this.uploadValues[id])\n      var path = '';\n\n      if (this.uploadValues && this.uploadValues[id]) {\n        path = this.uploadValues[id].path;\n      }\n\n      this.$refs.filePop.show(id, path, flag);\n    },\n    handleFileSuccess: function handleFileSuccess(obj) {\n      if (obj.id) {\n        this.uploadValues = this.bindValuesChange(obj, obj.id, 'uploadValues');\n      }\n    },\n\n    /** 记录用到数据绑定的组件的值 */\n    bindValuesChange: function bindValuesChange(value, id, key) {\n      // let values = Object.assign({}, this[key])\n      // values[id] = value\n      // return values\n      this.$set(this[key], id, value);\n      return this[key];\n    },\n\n    /** 显示或隐藏tooltip */\n    showOrHideTooltip: function showOrHideTooltip(inputId, show) {\n      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (!this.tooltips[inputId] && !force) {\n        return;\n      }\n\n      var tooltip = this.tooltips[inputId] || {};\n\n      if (tooltip.visible !== show) {\n        tooltip.visible = show;\n        this.$set(this.tooltips, inputId, tooltip);\n      }\n    },\n\n    /** value 触发valueChange事件 */\n    elemValueChange: function elemValueChange(type, rowSource, columnSource, value) {\n      var column = Object.assign({}, columnSource); // 将caseId去除\n\n      var row = Object.assign({}, rowSource);\n      row.id = this.getCleanId(row.id); // 获取整行的数据\n\n      var _this$getValuesSync2 = this.getValuesSync({\n        validate: false,\n        rowIds: [row.id]\n      }),\n          values = _this$getValuesSync2.values;\n\n      if (values.length > 0) {\n        Object.assign(row, values[0]);\n      }\n\n      this.$emit('valueChange', {\n        type: type,\n        row: row,\n        column: column,\n        value: value,\n        target: this\n      });\n    },\n\n    /** 获取干净的ID（不包含任何杂质的ID） */\n    getCleanId: function getCleanId(id) {\n      id = this.removeCaseId(id);\n      id = this.removeTempId(id);\n      return id;\n    },\n\n    /** 判断某个ID是否包含了caseId */\n    hasCaseId: function hasCaseId(id) {\n      return id && id.startsWith(this.caseId);\n    },\n\n    /** 将caseId去除 */\n    removeCaseId: function removeCaseId(id) {\n      if (this.hasCaseId(id)) {\n        return id.substring(this.caseId.length, id.length);\n      }\n\n      return id;\n    },\n    // 判断 id 是否是临时Id\n    isTempId: function isTempId(id) {\n      return (id || '').endsWith(this.tempId);\n    },\n\n    /** 将tempId去除 */\n    removeTempId: function removeTempId(id) {\n      if (this.isTempId(id)) {\n        return id.substring(0, id.length - this.tempId.length);\n      }\n\n      return id;\n    },\n    handleClickDelFile: function handleClickDelFile(id) {\n      this.uploadValues[id] = null;\n    },\n    handleClickDownloadFile: function handleClickDownloadFile(id) {\n      var _ref3 = this.uploadValues[id] || {},\n          path = _ref3.path;\n\n      if (path) {\n        var url = getFileAccessHttpUrl(path);\n        window.open(url);\n      }\n    },\n    handleClickDownFileByUrl: function handleClickDownFileByUrl(id) {\n      var _ref4 = this.uploadValues[id] || {},\n          url = _ref4.url,\n          path = _ref4.path;\n\n      if (!url || url.length === 0) {\n        if (path && path.length > 0) {\n          url = getFileAccessHttpUrl(path.split(',')[0]);\n        }\n      }\n\n      if (url) {\n        window.open(url);\n      }\n    },\n    handleClickShowImageError: function handleClickShowImageError(id) {\n      var currUploadObj = this.uploadValues[id] || null;\n\n      if (currUploadObj && currUploadObj['message']) {\n        this.$error({\n          title: '上传出错',\n          content: '错误信息：' + currUploadObj['message'],\n          maskClosable: true\n        });\n      }\n    },\n\n    /** 加载数据字典并合并到 options */\n    _loadDictConcatToOptions: function _loadDictConcatToOptions(column) {\n      initDictOptions(column.dictCode).then(function (res) {\n        if (res.success) {\n          var newOptions = column.options || []; // .concat(res.result)\n\n          res.result.forEach(function (item) {\n            var _iteratorNormalCompletion10 = true;\n            var _didIteratorError10 = false;\n            var _iteratorError10 = undefined;\n\n            try {\n              for (var _iterator10 = newOptions[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n                var option = _step10.value;\n                if (option.value === item.value) return;\n              }\n            } catch (err) {\n              _didIteratorError10 = true;\n              _iteratorError10 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion10 && _iterator10.return != null) {\n                  _iterator10.return();\n                }\n              } finally {\n                if (_didIteratorError10) {\n                  throw _iteratorError10;\n                }\n              }\n            }\n\n            newOptions.push(item);\n          });\n          column.options = newOptions;\n        } else {\n          console.group(\"JEditableTable \\u67E5\\u8BE2\\u5B57\\u5178(\".concat(column.dictCode, \")\\u53D1\\u751F\\u5F02\\u5E38\"));\n          console.log(res.message);\n          console.groupEnd();\n        }\n      });\n    },\n\n    /* --- common function end --- */\n\n    /* --- 以下是辅助方法，多用于动态构造页面中的数据 --- */\n\n    /** 辅助方法：打印日志 */\n    log: function log() {\n      if (this.$attrs.logger) {\n        console.log.apply(null, arguments);\n      }\n    },\n    getVM: function getVM() {\n      return this;\n    },\n\n    /** 辅助方法：指定a-select 和 j-data 的父容器 */\n    getParentContainer: function getParentContainer(node) {\n      var _this21 = this;\n\n      var element = function () {\n        // nodeType 8\t: Comment\t: 注释\n        if (_this21.$el && _this21.$el.nodeType !== 8) {\n          return _this21.$el;\n        }\n\n        var doc = document.getElementById(_this21.caseId + 'inputTable');\n\n        if (doc != null) {\n          return doc;\n        }\n\n        return node.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode;\n      }(); // 递归判断是否带有 overflow: hidden；的父元素\n\n\n      var ifParent = function ifParent(child) {\n        var currentOverflow = null;\n\n        if (child['currentStyle']) {\n          currentOverflow = child['currentStyle']['overflow'];\n        } else if (window.getComputedStyle) {\n          currentOverflow = window.getComputedStyle(child)['overflow'];\n        }\n\n        if (currentOverflow != null) {\n          if (currentOverflow === 'hidden') {\n            // 找到了带有 hidden 的标签，判断它的父级是否还有 hidden，直到遇到完全没有 hidden 或 body 的时候才停止递归\n            var _temp = ifParent(child.parentNode);\n\n            return _temp != null ? _temp : child.parentNode;\n          } else // 当前标签没有 hidden ，如果有父级并且父级不是 body 的话就继续递归判断父级\n            if (child.parentNode && child.parentNode.tagName.toLocaleLowerCase() !== 'body') {\n              return ifParent(child.parentNode);\n            } else {\n              // 直到 body 都没有遇到有 hidden 的标签\n              return null;\n            }\n        } else {\n          return child;\n        }\n      };\n\n      var temp = ifParent(element);\n      return temp != null ? temp : element;\n    },\n\n    /** 辅助方法：替换${...}变量 */\n    replaceProps: function replaceProps(col, value) {\n      if (value && typeof value === 'string') {\n        value = value.replace(/\\${title}/g, col.title);\n        value = value.replace(/\\${key}/g, col.key);\n        value = value.replace(/\\${defaultValue}/g, col.defaultValue);\n      }\n\n      return value;\n    },\n\n    /** view辅助方法：构建 tr style */\n    buildTrStyle: function buildTrStyle(index) {\n      return {\n        'top': \"\".concat(rowHeight * index, \"px\")\n      };\n    },\n\n    /** view辅助方法：构建 td style */\n    buildTdStyle: function buildTdStyle(col) {\n      var isEmptyWidth = function isEmptyWidth(column) {\n        return column.type === FormTypes.hidden || column.width === '0px' || column.width === '0' || column.width === 0;\n      };\n\n      var style = {}; // 计算宽度\n\n      if (col.width) {\n        style['width'] = col.width;\n      } else if (this.columns) {\n        style['width'] = \"\".concat((100 - 4 * 2) / this.columns.filter(function (column) {\n          return !isEmptyWidth(column);\n        }).length, \"%\");\n      } else {\n        style['width'] = '120px';\n      } // checkbox 居中显示\n\n\n      var isCheckbox = col.type === FormTypes.checkbox;\n\n      if (isCheckbox) {\n        style['align-items'] = 'center';\n        style['text-align'] = 'center';\n        style['padding-left'] = '0';\n        style['padding-right'] = '0';\n      }\n\n      if (isEmptyWidth(col)) {\n        style['padding-left'] = '0';\n        style['padding-right'] = '0';\n      }\n\n      return style;\n    },\n\n    /** view辅助方法：构造props */\n    buildProps: function buildProps(row, col) {\n      var props = {}; // 解析props\n\n      if (_typeof(col.props) === 'object') {\n        for (var prop in col.props) {\n          if (col.props.hasOwnProperty(prop)) {\n            props[prop] = this.replaceProps(col, col.props[prop]);\n          }\n        }\n      } // 判断select是否允许输入\n\n\n      if (col.type === FormTypes.select && (col.allowInput === true || col.allowSearch === true)) {\n        props['showSearch'] = true;\n      } // 判断是否是禁用的列\n\n\n      props['disabled'] = typeof col['disabled'] === 'boolean' ? col['disabled'] : props['disabled']; // 判断是否为禁用的行\n\n      if (props['disabled'] !== true) {\n        props['disabled'] = (this.disabledRowIds || []).indexOf(row.id) !== -1;\n      } // 判断是否禁用全部组件\n\n\n      if (this.disabled === true) {\n        props['disabled'] = true;\n      }\n\n      return props;\n    },\n\n    /** upload 辅助方法：获取 headers */\n    uploadGetHeaders: function uploadGetHeaders(row, column) {\n      var headers = {};\n\n      if (column.token === true) {\n        headers['X-Access-Token'] = this.accessToken;\n      }\n\n      return headers;\n    },\n\n    /** 上传请求地址 */\n    getUploadAction: function getUploadAction(value) {\n      if (!value) {\n        return window._CONFIG['domianURL'] + '/sys/common/upload';\n      } else {\n        return value;\n      }\n    },\n\n    /** 预览图片地址 */\n    getCellImageView: function getCellImageView(id) {\n      var currUploadObj = this.uploadValues[id] || null;\n\n      if (currUploadObj) {\n        if (currUploadObj['url']) {\n          return currUploadObj['url'];\n        } else if (currUploadObj['path']) {\n          var readpath = currUploadObj['path'].split(',')[0];\n          return getFileAccessHttpUrl(readpath);\n        }\n      }\n\n      return '';\n    },\n\n    /** popup回调 */\n    popupCallback: function popupCallback(value, others, id, row, column, index) {\n      var _this22 = this;\n\n      // 存储输入的值\n      this.popupValues[id] = value;\n\n      if (others) {\n        Object.keys(others).map(function (key) {\n          _this22.columns.map(function (k) {\n            if (k.key === key) {\n              var tempId = id.substring(id.indexOf(_this22.caseIdPrefix));\n\n              if (k.type === 'date') {\n                _this22.handleChangeJDateCommon(others[key], key + tempId, {\n                  id: tempId\n                }, k, false);\n              } else if (k.type === 'datetime') {\n                _this22.handleChangeJDateCommon(others[key], key + tempId, {\n                  id: tempId\n                }, k, true);\n              } else {\n                _this22.inputValues[index][key] = others[key];\n              }\n            }\n          });\n        });\n      } // 做单个表单验证\n\n\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change'); // 触发valueChange 事件\n\n      this.elemValueChange('input', row, column, value); // 更新form表单的值\n\n      this.$nextTick(function () {\n        _this22.forceUpdateFormValues();\n      });\n    },\n\n    /** popup输入框回显 */\n    getPopupValue: function getPopupValue(id) {\n      return this.popupValues[id];\n    },\n    handleRadioChange: function handleRadioChange(value, id, row, column) {\n      this.radioValues = this.bindValuesChange(value, id, 'radioValues'); // 做单个表单验证\n\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change'); // 触发valueChange 事件\n\n      this.elemValueChange(FormTypes.radio, row, column, value);\n    },\n    handleMultiSelectChange: function handleMultiSelectChange(value, id, row, column) {\n      this.multiSelectValues = this.bindValuesChange(value, id, 'multiSelectValues'); // 做单个表单验证\n\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change'); // 触发valueChange 事件\n\n      this.elemValueChange(FormTypes.list_multi, row, column, value);\n    },\n    handleSearchSelectChange: function handleSearchSelectChange(value, id, row, column) {\n      this.searchSelectValues = this.bindValuesChange(value, id, 'searchSelectValues');\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change');\n      this.elemValueChange(FormTypes.sel_search, row, column, value);\n    },\n    filterOption: function filterOption(input, option) {\n      return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n    },\n    getEllipsisWord: function getEllipsisWord(content, len) {\n      if (!content || content.length == 0) {\n        return '';\n      }\n\n      if (content.length > len) {\n        return content.substr(0, len);\n      }\n\n      return content;\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.destroyCleanGroupRequest = true;\n  }\n};",null]}