{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\components\\tools\\HeaderNotice.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\components\\tools\\HeaderNotice.vue","mtime":1648374777568},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getAction, putAction } from '@/api/manage';\nimport ShowAnnouncement from './ShowAnnouncement';\nimport store from '@/store/';\nimport DynamicNotice from './DynamicNotice';\nexport default {\n  name: \"HeaderNotice\",\n  components: {\n    DynamicNotice: DynamicNotice,\n    ShowAnnouncement: ShowAnnouncement\n  },\n  data: function data() {\n    return {\n      loadding: false,\n      url: {\n        listCementByUser: \"/sys/annountCement/listByUser\",\n        editCementSend: \"/sys/sysAnnouncementSend/editByAnntIdAndUserId\",\n        queryById: \"/sys/annountCement/queryById\"\n      },\n      hovered: false,\n      announcement1: [],\n      announcement2: [],\n      msg1Count: \"0\",\n      msg2Count: \"0\",\n      msg1Title: \"通知(0)\",\n      msg2Title: \"\",\n      stopTimer: false,\n      websock: null,\n      lockReconnect: false,\n      heartCheck: null,\n      formData: {},\n      openPath: ''\n    };\n  },\n  computed: {\n    msgTotal: function msgTotal() {\n      return parseInt(this.msg1Count) + parseInt(this.msg2Count);\n    }\n  },\n  mounted: function mounted() {\n    this.loadData(); //this.timerFun();\n\n    this.initWebSocket(); // this.heartCheckFun();\n  },\n  destroyed: function destroyed() {\n    // 离开页面生命周期函数\n    this.websocketclose();\n  },\n  methods: {\n    timerFun: function timerFun() {\n      var _this = this;\n\n      this.stopTimer = false;\n      var myTimer = setInterval(function () {\n        // 停止定时器\n        if (_this.stopTimer == true) {\n          clearInterval(myTimer);\n          return;\n        }\n\n        _this.loadData();\n      }, 6000);\n    },\n    loadData: function loadData() {\n      var _this2 = this;\n\n      try {\n        // 获取系统消息\n        getAction(this.url.listCementByUser).then(function (res) {\n          if (res.success) {\n            _this2.announcement1 = res.result.anntMsgList;\n            _this2.msg1Count = res.result.anntMsgTotal;\n            _this2.msg1Title = \"通知(\" + res.result.anntMsgTotal + \")\";\n            _this2.announcement2 = res.result.sysMsgList;\n            _this2.msg2Count = res.result.sysMsgTotal;\n            _this2.msg2Title = \"系统消息(\" + res.result.sysMsgTotal + \")\";\n          }\n        }).catch(function (error) {\n          console.log(\"系统消息通知异常\", error); //这行打印permissionName is undefined\n\n          _this2.stopTimer = true;\n          console.log(\"清理timer\");\n        });\n      } catch (err) {\n        this.stopTimer = true;\n        console.log(\"通知异常\", err);\n      }\n    },\n    fetchNotice: function fetchNotice() {\n      var _this3 = this;\n\n      if (this.loadding) {\n        this.loadding = false;\n        return;\n      }\n\n      this.loadding = true;\n      setTimeout(function () {\n        _this3.loadding = false;\n      }, 200);\n    },\n    showAnnouncement: function showAnnouncement(record) {\n      var _this4 = this;\n\n      putAction(this.url.editCementSend, {\n        anntId: record.id\n      }).then(function (res) {\n        if (res.success) {\n          _this4.loadData();\n        }\n      });\n      this.hovered = false;\n\n      if (record.openType === 'component') {\n        this.openPath = record.openPage;\n        this.formData = {\n          id: record.busId\n        };\n        this.$refs.showDynamNotice.detail(record.openPage);\n      } else {\n        this.$refs.ShowAnnouncement.detail(record);\n      }\n    },\n    toMyAnnouncement: function toMyAnnouncement() {\n      this.$router.push({\n        path: '/isps/userAnnouncement',\n        name: 'isps-userAnnouncement'\n      });\n    },\n    modalFormOk: function modalFormOk() {},\n    handleHoverChange: function handleHoverChange(visible) {\n      this.hovered = visible;\n    },\n    initWebSocket: function initWebSocket() {\n      // WebSocket与普通的请求所用协议有所不同，ws等同于http，wss等同于https\n      var userId = store.getters.userInfo.id;\n      var url = window._CONFIG['domianURL'].replace(\"https://\", \"wss://\").replace(\"http://\", \"ws://\") + \"/websocket/\" + userId;\n      console.log(url);\n      this.websock = new WebSocket(url);\n      this.websock.onopen = this.websocketOnopen;\n      this.websock.onerror = this.websocketOnerror;\n      this.websock.onmessage = this.websocketOnmessage;\n      this.websock.onclose = this.websocketOnclose;\n    },\n    websocketOnopen: function websocketOnopen() {\n      console.log(\"WebSocket连接成功\"); //心跳检测重置\n      //this.heartCheck.reset().start();\n    },\n    websocketOnerror: function websocketOnerror(e) {\n      console.log(\"WebSocket连接发生错误\");\n      this.reconnect();\n    },\n    websocketOnmessage: function websocketOnmessage(e) {\n      console.log(\"-----接收消息-------\", e.data);\n      var data = eval(\"(\" + e.data + \")\"); //解析对象\n\n      if (data.cmd == \"topic\") {\n        //系统通知\n        this.loadData();\n      } else if (data.cmd == \"user\") {\n        //用户消息\n        this.loadData();\n      } //心跳检测重置\n      //this.heartCheck.reset().start();\n\n    },\n    websocketOnclose: function websocketOnclose(e) {\n      console.log(\"connection closed (\" + e.code + \")\");\n      this.reconnect();\n    },\n    websocketSend: function websocketSend(text) {\n      // 数据发送\n      try {\n        this.websock.send(text);\n      } catch (err) {\n        console.log(\"send failed (\" + err.code + \")\");\n      }\n    },\n    openNotification: function openNotification(data) {\n      var _this5 = this;\n\n      var text = data.msgTxt;\n      var key = \"open\".concat(Date.now());\n      this.$notification.open({\n        message: '消息提醒',\n        placement: 'bottomRight',\n        description: text,\n        key: key,\n        btn: function btn(h) {\n          return h('a-button', {\n            props: {\n              type: 'primary',\n              size: 'small'\n            },\n            on: {\n              click: function click() {\n                return _this5.showDetail(key, data);\n              }\n            }\n          }, '查看详情');\n        }\n      });\n    },\n    reconnect: function reconnect() {\n      var that = this;\n      if (that.lockReconnect) return;\n      that.lockReconnect = true; //没连接上会一直重连，设置延迟避免请求过多\n\n      setTimeout(function () {\n        console.info(\"尝试重连...\");\n        that.initWebSocket();\n        that.lockReconnect = false;\n      }, 5000);\n    },\n    heartCheckFun: function heartCheckFun() {\n      var that = this; //心跳检测,每20s心跳一次\n\n      that.heartCheck = {\n        timeout: 20000,\n        timeoutObj: null,\n        serverTimeoutObj: null,\n        reset: function reset() {\n          clearTimeout(this.timeoutObj); //clearTimeout(this.serverTimeoutObj);\n\n          return this;\n        },\n        start: function start() {\n          var self = this;\n          this.timeoutObj = setTimeout(function () {\n            //这里发送一个心跳，后端收到后，返回一个心跳消息，\n            //onmessage拿到返回的心跳就说明连接正常\n            that.websocketSend(\"HeartBeat\");\n            console.info(\"客户端发送心跳\"); //self.serverTimeoutObj = setTimeout(function(){//如果超过一定时间还没重置，说明后端主动断开了\n            //  that.websock.close();//如果onclose会执行reconnect，我们执行ws.close()就行了.如果直接执行reconnect 会触发onclose导致重连两次\n            //}, self.timeout)\n          }, this.timeout);\n        }\n      };\n    },\n    showDetail: function showDetail(key, data) {\n      var _this6 = this;\n\n      this.$notification.close(key);\n      var id = data.msgId;\n      getAction(this.url.queryById, {\n        id: id\n      }).then(function (res) {\n        if (res.success) {\n          var record = res.result;\n\n          _this6.showAnnouncement(record);\n        }\n      });\n    }\n  }\n};",null]}