{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\ideaworkspace\\jxc-front-end\\src\\permission.js","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\permission.js","mtime":1648374777576},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1648365119872}],"contextDependencies":[],"result":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Vue from 'vue';\nimport router from './router';\nimport store from './store';\nimport NProgress from 'nprogress'; // progress bar\n\nimport 'nprogress/nprogress.css'; // progress bar style\n\nimport notification from 'ant-design-vue/es/notification';\nimport { ACCESS_TOKEN, INDEX_MAIN_PAGE_PATH } from '@/store/mutation-types';\nimport { generateIndexRouter } from \"@/utils/util\";\nNProgress.configure({\n  showSpinner: false\n}); // NProgress Configuration\n\nvar whiteList = ['/user/login', '/user/register', '/user/register-result', '/user/alteration']; // no redirect whitelist\n\nrouter.beforeEach(function (to, from, next) {\n  NProgress.start(); // start progress bar\n\n  if (Vue.ls.get(ACCESS_TOKEN)) {\n    /* has token */\n    if (to.path === '/user/login') {\n      next({\n        path: INDEX_MAIN_PAGE_PATH\n      });\n      NProgress.done();\n    } else {\n      if (store.getters.permissionList.length === 0) {\n        store.dispatch('GetPermissionList').then(function (res) {\n          var menuData = res.result.menu;\n          console.log(res.message);\n\n          if (menuData === null || menuData === \"\" || menuData === undefined) {\n            return;\n          }\n\n          var constRoutes = [];\n          constRoutes = generateIndexRouter(menuData); // 添加主界面路由\n\n          store.dispatch('UpdateAppRouter', {\n            constRoutes: constRoutes\n          }).then(function () {\n            // 根据roles权限生成可访问的路由表\n            // 动态添加可访问路由表\n            router.addRoutes(store.getters.addRouters);\n            var redirect = decodeURIComponent(from.query.redirect || to.path);\n\n            if (to.path === redirect) {\n              // hack方法 确保addRoutes已完成 ,set the replace: true so the navigation will not leave a history record\n              next(_objectSpread({}, to, {\n                replace: true\n              }));\n            } else {\n              // 跳转到目的路由\n              next({\n                path: redirect\n              });\n            }\n          });\n        }).catch(function () {\n          /* notification.error({\r\n             message: '系统提示',\r\n             description: '请求用户信息失败，请重试！'\r\n           })*/\n          store.dispatch('Logout').then(function () {\n            next({\n              path: '/user/login',\n              query: {\n                redirect: to.fullPath\n              }\n            });\n          });\n        });\n      } else {\n        next();\n      }\n    }\n  } else {\n    if (whiteList.indexOf(to.path) !== -1) {\n      // 在免登录白名单，直接进入\n      next();\n    } else {\n      next({\n        path: '/user/login',\n        query: {\n          redirect: to.fullPath\n        }\n      });\n      NProgress.done(); // if current page is login will not trigger afterEach hook, so manually handle it\n    }\n  }\n});\nrouter.afterEach(function () {\n  NProgress.done(); // finish progress bar\n});",null]}