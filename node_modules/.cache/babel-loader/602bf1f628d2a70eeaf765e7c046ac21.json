{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\views\\system\\modules\\QuartzJobModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\views\\system\\modules\\QuartzJobModal.vue","mtime":1648374778156},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { httpAction } from '@/api/manage';\nimport JCron from \"@/components/jeecg/JCron\";\nimport pick from 'lodash.pick'; // import moment from \"moment\"\n\nexport default {\n  name: \"QuartzJobModal\",\n  components: {\n    JCron: JCron\n  },\n  data: function data() {\n    return {\n      title: \"操作\",\n      buttonStyle: 'solid',\n      visible: false,\n      model: {},\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 5\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      },\n      cron: {\n        label: '',\n        value: ''\n      },\n      confirmLoading: false,\n      form: this.$form.createForm(this),\n      validatorRules: {\n        cron: {\n          rules: [{\n            required: true,\n            message: '请输入cron表达式!'\n          }]\n        }\n      },\n      url: {\n        add: \"/sys/quartzJob/add\",\n        edit: \"/sys/quartzJob/edit\"\n      }\n    };\n  },\n  created: function created() {},\n  methods: {\n    add: function add() {\n      this.edit({});\n    },\n    edit: function edit(record) {\n      var _this = this;\n\n      var that = this;\n      that.form.resetFields();\n      this.model = Object.assign({}, record);\n      console.log(this.model);\n      this.visible = true;\n      this.$nextTick(function () {\n        _this.form.setFieldsValue(pick(_this.model, 'jobClassName', 'cronExpression', 'parameter', 'description', 'status'));\n      });\n    },\n    close: function close() {\n      this.$emit('close');\n      this.visible = false;\n    },\n    handleOk: function handleOk() {\n      var _this2 = this;\n\n      var that = this; // 触发表单验证\n\n      this.form.validateFields(function (err, values) {\n        console.log('values', values);\n\n        if (!err) {\n          if (typeof values.cronExpression == \"undefined\" || Object.keys(values.cronExpression).length == 0) {\n            _this2.$message.warning('请输入cron表达式!');\n\n            return false;\n          }\n\n          that.confirmLoading = true;\n          var httpurl = '';\n          var method = '';\n\n          if (!_this2.model.id) {\n            httpurl += _this2.url.add;\n            method = 'post';\n          } else {\n            httpurl += _this2.url.edit;\n            method = 'put';\n          }\n\n          var formData = Object.assign(_this2.model, values); //时间格式化\n\n          console.log('提交参数', formData);\n          httpAction(httpurl, formData, method).then(function (res) {\n            if (res.success) {\n              that.$message.success(res.message);\n              that.$emit('ok');\n            } else {\n              that.$message.warning(res.message);\n            }\n          }).finally(function () {\n            that.confirmLoading = false;\n            that.close();\n          });\n        }\n      });\n    },\n    handleCancel: function handleCancel() {\n      this.close();\n    },\n    setCorn: function setCorn(data) {\n      var _this3 = this;\n\n      console.log('data)', data);\n      this.$nextTick(function () {\n        _this3.model.cronExpression = data;\n      }); // console.log(Object.keys(data).length==0);\n\n      if (Object.keys(data).length == 0) {\n        this.$message.warning('请输入cron表达式!');\n      }\n    },\n    validateCron: function validateCron(rule, value, callback) {\n      if (!value) {\n        callback();\n      } else if (Object.keys(value).length == 0) {\n        callback(\"请输入cron表达式!\");\n      }\n    }\n  }\n};",null]}