{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\finance\\modules\\ReceivableCheckModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\finance\\modules\\ReceivableCheckModal.vue","mtime":1648374777628},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport pick from 'lodash.pick';\nimport JDate from '@/components/jeecg/JDate';\nimport JDictSelectTag from \"@/components/dict/JDictSelectTag\";\nimport { getAction, putAction, httpAction } from '@api/manage';\nimport splitPane from 'vue-splitpane';\nimport { getFormatDate } from \"../../utils/util\";\nimport RpCheckEntryList from \"./RpCheck/RpCheckEntryList\";\nimport RpCheckReceivableList from \"./RpCheck/RpCheckReceivableList\";\nimport RpCheckReceiptList from \"./RpCheck/RpCheckReceiptList\";\nexport default {\n  name: 'ReceivableCheckModal',\n  mixins: [],\n  components: {\n    JDate: JDate,\n    JDictSelectTag: JDictSelectTag,\n    RpCheckReceivableList: RpCheckReceivableList,\n    RpCheckReceiptList: RpCheckReceiptList,\n    RpCheckEntryList: RpCheckEntryList,\n    splitPane: splitPane\n  },\n  data: function data() {\n    return {\n      action: \"\",\n      title: '操作',\n      width: '1200px',\n      visible: false,\n      form: this.$form.createForm(this),\n      confirmLoading: false,\n      model: {},\n      moreStatus: false,\n      spans: {\n        labelCol: {\n          span: 3\n        },\n        wrapperCol: {\n          span: 21\n        },\n        labelCol1: {\n          span: 2\n        },\n        wrapperCol1: {\n          span: 22\n        },\n        labelCol2: {\n          span: 4\n        },\n        wrapperCol2: {\n          span: 20\n        },\n        labelCol3: {\n          span: 6\n        },\n        wrapperCol3: {\n          span: 18\n        },\n        labelCol6: {\n          span: 12\n        },\n        wrapperCol6: {\n          span: 12\n        }\n      },\n      validatorRules: {\n        billNo: {\n          rules: [{\n            required: true,\n            message: '请输入单据编号!'\n          }]\n        },\n        billDate: {\n          rules: [{\n            required: true,\n            message: '请输入单据日期!'\n          }]\n        },\n        receivableCheckType: {\n          rules: []\n        },\n        customerId: {\n          rules: []\n        },\n        remark: {\n          rules: []\n        },\n        billProcStatus: {\n          rules: []\n        },\n        isApproved: {\n          rules: []\n        },\n        isClosed: {\n          rules: []\n        },\n        isVoided: {\n          rules: []\n        },\n        effectiveTime: {\n          rules: []\n        },\n        approverId: {\n          rules: []\n        },\n        flowId: {\n          rules: []\n        },\n        createTime: {\n          rules: []\n        },\n        createBy: {\n          rules: []\n        },\n        sysOrgCode: {\n          rules: []\n        },\n        updateTime: {\n          rules: []\n        },\n        updateBy: {\n          rules: []\n        }\n      },\n      totalAmt1: 0,\n      entryCount1: 0,\n      ReceivableCount: 0,\n      selectedEntryCount1: 0,\n      selectedReceivableCount: 0,\n      totalAmt2: 0,\n      entryCount2: 0,\n      paymentCount: 0,\n      selectedEntryCount2: 0,\n      selectedReceiptCount: 0,\n      url: {\n        add: \"/finance/finReceivableCheck/add\",\n        edit: \"/finance/finReceivableCheck/edit\",\n        approve: \"/finance/finReceivableCheck/approve\",\n        finRpCheckEntry: {\n          list: '/finance/finReceivableCheck/queryFinReceivableCheckEntryByMainId'\n        }\n      }\n    };\n  },\n  computed: {\n    readOnly: function readOnly() {\n      return this.action !== \"add\" && this.action !== \"edit\";\n    },\n\n    /**\n     * @return {number}\n     */\n    ReceivableHeight: function ReceivableHeight() {\n      var a = this.ReceivableCount === 0 ? 4.5 : this.ReceivableCount,\n          b = this.entryCount1 === 0 ? 4.5 : this.entryCount1;\n      return (a > b ? a : b) * 38 + 150;\n    },\n    splitPaneHeight: function splitPaneHeight() {\n      var a = this.paymentCount === 0 ? 4.5 : this.paymentCount,\n          b = this.entryCount2 === 0 ? 4.5 : this.entryCount2;\n      return this.ReceivableHeight + (a > b ? a : b) * 38 + 180;\n    }\n  },\n  methods: {\n    addInit: function addInit() {\n      this.model = {}; //应收核销类型：收款核应收\n\n      this.model.receivableCheckType = '101'; //处理状态：编辑中\n\n      this.model.billProcStatus = '12'; // 请求后台的填值规则接口地址\n\n      var url = '/sys/fillRule/executeRuleByCode/';\n      var ruleCode = 'receivable_check_bill_no';\n      var that = this;\n      putAction(url + ruleCode, {}).then(function (res) {\n        // 执行成功，获取返回的值，并赋到页面上\n        if (res.success) {\n          that.$nextTick(function () {\n            that.form.setFieldsValue({\n              'billNo': res.result,\n              'billDate': getFormatDate()\n            });\n          });\n        }\n      });\n    },\n\n    /** 列表点击新增按钮时调用此方法 */\n    add: function add() {\n      this.addInit();\n      this.edit(this.model);\n    },\n    resetModal: function resetModal() {\n      var _this = this;\n\n      // reset modal\n      this.entryCount1 = 0;\n      this.selectedEntryCount1 = 0;\n      this.selectedReceivableCount = 0;\n      this.entryCount2 = 0;\n      this.selectedEntryCount2 = 0;\n      this.selectedReceiptCount = 0;\n      this.form.resetFields();\n      this.$nextTick(function () {\n        _this.$refs.rpCheckEntryList1.resetTable();\n\n        _this.$refs.rpCheckEntryList2.resetTable();\n\n        if (!_this.readOnly) {\n          _this.$refs.rpCheckReceivableList.resetTable();\n\n          _this.$refs.rpCheckReceiptList.resetTable();\n        }\n      });\n    },\n\n    /** 列表点击了编辑（修改）按钮时调用此方法 */\n    edit: function edit(record) {\n      var _this2 = this;\n\n      this.resetModal();\n      this.model = Object.assign({}, record);\n      this.visible = true;\n      this.$nextTick(function () {\n        _this2.form.setFieldsValue(pick(_this2.model, 'billNo', 'billDate', 'customerId', 'remark', 'billProcStatus', 'isApproved', 'isClosed', 'isVoided', 'effectiveTime', 'approverId', 'flowId', 'createTime', 'createBy', 'sysOrgCode', 'updateTime', 'updateBy'));\n      }); // 加载子表数据\n\n      this.$nextTick(function () {\n        if (_this2.model.id) {\n          queryCheckEntry(_this2);\n\n          _this2.onCustomerChange(_this2.model.customerId);\n        }\n      });\n      /** 查询数据 */\n\n      function queryCheckEntry(that) {\n        var url = that.url.finRpCheckEntry.list;\n        var params = {\n          id: that.model.id\n        };\n        that.$refs.rpCheckEntryList1.loading = true;\n        that.$refs.rpCheckEntryList2.loading = true;\n        getAction(url, params).then(function (res) {\n          var rows1 = [],\n              rows2 = [];\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = (res.result || [])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var row = _step.value;\n              if (row.checkSide === \"1\") rows1.push(row);else rows2.push(row);\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          that.$refs.rpCheckEntryList1.dataSource = rows1;\n          that.$refs.rpCheckEntryList2.dataSource = rows2;\n        }).finally(function () {\n          that.$refs.rpCheckEntryList1.loading = false;\n          that.$refs.rpCheckEntryList2.loading = false;\n        });\n      }\n    },\n    onCustomerChange: function onCustomerChange(val) {\n      if (!this.readOnly && val) {\n        var params = {\n          customerId: val\n        };\n        this.$refs.rpCheckReceivableList.queryParam = params;\n        this.$refs.rpCheckReceivableList.loadData(1);\n        this.$refs.rpCheckReceiptList.queryParam = params;\n        this.$refs.rpCheckReceiptList.loadData(1);\n      }\n    },\n    onReceivableDataSourceChange: function onReceivableDataSourceChange() {\n      this.ReceivableCount = this.$refs.rpCheckReceivableList.dataSource.length;\n      this.makeAdded(this.$refs.rpCheckReceivableList, this.$refs.rpCheckEntryList1);\n    },\n    //注意：\n    // rpCheckReceivableList与rpCheckReceiptList的loadData(),由于其中getAction是异步执行，\n    // 所以如果在其后调用本函数将无效（此时rpCheckReceivableList.dataSource还是空的）。\n    makeAdded: function makeAdded(fromComponent, toComponent) {\n      var rows = [];\n      var change = false;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = fromComponent.dataSource[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var fromRecord = _step2.value;\n          var added = false;\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n\n          try {\n            for (var _iterator3 = toComponent.dataSource[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var toRecord = _step3.value;\n\n              if (fromRecord.id === toRecord.sourceId) {\n                added = true;\n\n                if (fromRecord.added !== \"是\") {\n                  fromRecord.added = \"是\";\n                  change = true;\n                }\n\n                break;\n              }\n            } // 以前是added，但现在不是\n\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n\n          if (!added && fromRecord.added === \"是\") {\n            fromRecord.added = \"\";\n            change = true;\n          }\n\n          rows.push(fromRecord);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      if (change) {\n        //避免循环触发dataSourceChange\n        fromComponent.disableDataSourceChange = true;\n        fromComponent.dataSource = rows;\n      }\n    },\n    onReceivableSelectChange: function onReceivableSelectChange() {\n      var count = 0;\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = this.$refs.rpCheckReceivableList.selectionRows[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var row = _step4.value;\n          if (row.added !== \"是\") count++;\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      this.selectedReceivableCount = count;\n    },\n    onEntryList1SelectChange: function onEntryList1SelectChange() {\n      this.selectedEntryCount1 = this.$refs.rpCheckEntryList1.selectedRowKeys.length;\n    },\n    onEntryList1DataSourceChange: function onEntryList1DataSourceChange() {\n      this.entryCount1 = this.$refs.rpCheckEntryList1.dataSource.length;\n    },\n    onReceiptDataSourceChange: function onReceiptDataSourceChange() {\n      this.paymentCount = this.$refs.rpCheckReceiptList.dataSource.length;\n      this.makeAdded(this.$refs.rpCheckReceiptList, this.$refs.rpCheckEntryList2);\n    },\n    onReceiptSelectChange: function onReceiptSelectChange() {\n      var count = 0;\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = this.$refs.rpCheckReceiptList.selectionRows[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var row = _step5.value;\n          if (row.added !== \"是\") count++;\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      this.selectedReceiptCount = count;\n    },\n    onEntryList2SelectChange: function onEntryList2SelectChange() {\n      this.selectedEntryCount2 = this.$refs.rpCheckEntryList2.selectedRowKeys.length;\n    },\n    onEntryList2DataSourceChange: function onEntryList2DataSourceChange() {\n      this.entryCount2 = this.$refs.rpCheckEntryList2.dataSource.length;\n    },\n    handleEntryList1Add: function handleEntryList1Add() {\n      var _this$$refs$rpCheckEn;\n\n      var maxEntryNo = 100;\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = this.$refs.rpCheckEntryList1.dataSource[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var row = _step6.value;\n          if (maxEntryNo < row.entryNo) maxEntryNo = row.entryNo;\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n\n      var rows = [];\n      var _iteratorNormalCompletion7 = true;\n      var _didIteratorError7 = false;\n      var _iteratorError7 = undefined;\n\n      try {\n        for (var _iterator7 = this.$refs.rpCheckReceivableList.selectionRows[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n          var _row = _step7.value;\n\n          if (_row.added !== \"是\") {\n            rows.push({\n              entryNo: ++maxEntryNo,\n              checkSide: \"1\",\n              sourceType: \"fin_receivable\",\n              sourceId: _row.id,\n              sourceNo: _row.billNo,\n              uncheckedAmt: _row.uncheckedAmt,\n              amt: _row.uncheckedAmt\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError7 = true;\n        _iteratorError7 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n            _iterator7.return();\n          }\n        } finally {\n          if (_didIteratorError7) {\n            throw _iteratorError7;\n          }\n        }\n      }\n\n      (_this$$refs$rpCheckEn = this.$refs.rpCheckEntryList1.dataSource).push.apply(_this$$refs$rpCheckEn, rows);\n\n      this.selectedReceivableCount = 0;\n      this.$refs.rpCheckReceivableList.selectedRowKeys = [];\n      this.$refs.rpCheckReceivableList.selectionRows = [];\n      this.makeAdded(this.$refs.rpCheckReceivableList, this.$refs.rpCheckEntryList1);\n    },\n    handleEntryList1Remove: function handleEntryList1Remove() {\n      if (this.$refs.rpCheckEntryList1.selectionRows === 0) return;\n      var rows = [];\n      var _iteratorNormalCompletion8 = true;\n      var _didIteratorError8 = false;\n      var _iteratorError8 = undefined;\n\n      try {\n        for (var _iterator8 = this.$refs.rpCheckEntryList1.dataSource[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n          var row = _step8.value;\n          var removedRow = {\n            sourceId: \"\"\n          };\n          var _iteratorNormalCompletion9 = true;\n          var _didIteratorError9 = false;\n          var _iteratorError9 = undefined;\n\n          try {\n            for (var _iterator9 = this.$refs.rpCheckEntryList1.selectionRows[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n              removedRow = _step9.value;\n              //移除的\n              if (row.sourceId === removedRow.sourceId) break;\n            } //不移除的\n\n          } catch (err) {\n            _didIteratorError9 = true;\n            _iteratorError9 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n                _iterator9.return();\n              }\n            } finally {\n              if (_didIteratorError9) {\n                throw _iteratorError9;\n              }\n            }\n          }\n\n          if (row.sourceId !== removedRow.sourceId) rows.push(row);\n        }\n      } catch (err) {\n        _didIteratorError8 = true;\n        _iteratorError8 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n            _iterator8.return();\n          }\n        } finally {\n          if (_didIteratorError8) {\n            throw _iteratorError8;\n          }\n        }\n      }\n\n      this.$refs.rpCheckEntryList1.dataSource = rows;\n      this.selectedEntryCount1 = 0;\n      this.$refs.rpCheckEntryList1.selectedRowKeys = [];\n      this.$refs.rpCheckEntryList1.selectionRows = [];\n      this.makeAdded(this.$refs.rpCheckReceivableList, this.$refs.rpCheckEntryList1);\n    },\n    handleEntryList2Add: function handleEntryList2Add() {\n      var _this$$refs$rpCheckEn2;\n\n      var maxEntryNo = 200;\n      var _iteratorNormalCompletion10 = true;\n      var _didIteratorError10 = false;\n      var _iteratorError10 = undefined;\n\n      try {\n        for (var _iterator10 = this.$refs.rpCheckEntryList2.dataSource[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n          var row = _step10.value;\n          if (maxEntryNo < row.entryNo) maxEntryNo = row.entryNo;\n        }\n      } catch (err) {\n        _didIteratorError10 = true;\n        _iteratorError10 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion10 && _iterator10.return != null) {\n            _iterator10.return();\n          }\n        } finally {\n          if (_didIteratorError10) {\n            throw _iteratorError10;\n          }\n        }\n      }\n\n      var rows = [];\n      var _iteratorNormalCompletion11 = true;\n      var _didIteratorError11 = false;\n      var _iteratorError11 = undefined;\n\n      try {\n        for (var _iterator11 = this.$refs.rpCheckReceiptList.selectionRows[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n          var _row2 = _step11.value;\n\n          if (_row2.added !== \"是\") {\n            rows.push({\n              entryNo: ++maxEntryNo,\n              checkSide: \"2\",\n              sourceType: \"fin_receipt..102\",\n              sourceId: _row2.id,\n              sourceNo: _row2.billNo,\n              uncheckedAmt: _row2.uncheckedAmt,\n              amt: _row2.uncheckedAmt\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError11 = true;\n        _iteratorError11 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion11 && _iterator11.return != null) {\n            _iterator11.return();\n          }\n        } finally {\n          if (_didIteratorError11) {\n            throw _iteratorError11;\n          }\n        }\n      }\n\n      (_this$$refs$rpCheckEn2 = this.$refs.rpCheckEntryList2.dataSource).push.apply(_this$$refs$rpCheckEn2, rows);\n\n      this.selectedReceiptCount = 0;\n      this.$refs.rpCheckReceiptList.selectedRowKeys = [];\n      this.$refs.rpCheckReceiptList.selectionRows = [];\n      this.makeAdded(this.$refs.rpCheckReceiptList, this.$refs.rpCheckEntryList2);\n    },\n    handleEntryList2Remove: function handleEntryList2Remove() {\n      if (this.$refs.rpCheckEntryList2.selectionRows === 0) return;\n      var rows = [];\n      var _iteratorNormalCompletion12 = true;\n      var _didIteratorError12 = false;\n      var _iteratorError12 = undefined;\n\n      try {\n        for (var _iterator12 = this.$refs.rpCheckEntryList2.dataSource[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n          var row = _step12.value;\n          var removedRow = {\n            sourceId: \"\"\n          };\n          var _iteratorNormalCompletion13 = true;\n          var _didIteratorError13 = false;\n          var _iteratorError13 = undefined;\n\n          try {\n            for (var _iterator13 = this.$refs.rpCheckEntryList2.selectionRows[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n              removedRow = _step13.value;\n              //移除的\n              if (row.sourceId === removedRow.sourceId) break;\n            } //不移除的\n\n          } catch (err) {\n            _didIteratorError13 = true;\n            _iteratorError13 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion13 && _iterator13.return != null) {\n                _iterator13.return();\n              }\n            } finally {\n              if (_didIteratorError13) {\n                throw _iteratorError13;\n              }\n            }\n          }\n\n          if (row.sourceId !== removedRow.sourceId) rows.push(row);\n        }\n      } catch (err) {\n        _didIteratorError12 = true;\n        _iteratorError12 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion12 && _iterator12.return != null) {\n            _iterator12.return();\n          }\n        } finally {\n          if (_didIteratorError12) {\n            throw _iteratorError12;\n          }\n        }\n      }\n\n      this.$refs.rpCheckEntryList2.dataSource = rows;\n      this.selectedEntryCount2 = 0;\n      this.$refs.rpCheckEntryList2.selectedRowKeys = [];\n      this.$refs.rpCheckEntryList2.selectionRows = [];\n      this.makeAdded(this.$refs.rpCheckReceiptList, this.$refs.rpCheckEntryList2);\n    },\n\n    /** 关闭弹窗，并将所有JEditableTable实例回归到初始状态 */\n    close: function close() {\n      this.visible = false;\n      this.$emit('close');\n    },\n    handleOk: function handleOk() {\n      var _this3 = this;\n\n      // 触发表单验证\n      this.form.validateFields(function (err, values) {\n        if (!err) {\n          var formData = _this3.classifyIntoFormData(values);\n\n          return _this3.request(formData, false);\n        }\n      });\n    },\n\n    /** 整理成formData */\n    classifyIntoFormData: function classifyIntoFormData(formValue) {\n      var main = Object.assign(this.model, formValue);\n      return _objectSpread({}, main, {\n        // 展开\n        finReceivableCheckEntryList: this.$refs.rpCheckEntryList1.dataSource.concat(this.$refs.rpCheckEntryList2.dataSource)\n      });\n    },\n\n    /** 发起请求，自动判断是执行新增还是修改操作 */\n    request: function request(formData, isSubmit) {\n      var _this4 = this;\n\n      var url = this.url.add,\n          method = 'post';\n\n      if (this.model.id) {\n        url = this.url.edit;\n        method = 'put';\n      }\n\n      this.confirmLoading = true;\n      httpAction(url, formData, method).then(function (res) {\n        if (res.success) {\n          _this4.$message.success(res.message);\n\n          _this4.$emit('ok');\n\n          _this4.close();\n        } else {\n          _this4.$message.warning(res.message);\n        }\n      }).catch(function (e) {\n        if (isSubmit) _this4.form.setFieldsValue({\n          billProcStatus: '12'\n        });\n      }).finally(function () {\n        _this4.confirmLoading = false;\n      });\n    },\n    handleCancel: function handleCancel() {\n      this.close();\n    },\n    handleSave: function handleSave() {\n      this.handleOk();\n    },\n    handleSubmit: function handleSubmit() {\n      var _this5 = this;\n\n      //处理状态=编辑完成\n      this.form.setFieldsValue({\n        billProcStatus: '13'\n      }); //出错时要恢复billProcStatus为\"12\"，所以下面未直接调用handleSave()！\n      // 触发表单验证\n\n      this.form.validateFields(function (err, values) {\n        if (!err) {\n          var formData = _this5.classifyIntoFormData(values);\n\n          return _this5.request(formData, true);\n        }\n      });\n    },\n    handleApproved: function handleApproved() {\n      var that = this;\n      putAction(that.url.approve, {\n        id: that.model.id\n      }).then(function (res) {\n        if (res.success) {\n          that.$message.success(res.message);\n          that.$emit('ok');\n          that.close();\n        } else {\n          that.$message.warning(res.message);\n        }\n      });\n    },\n    popupCallback: function popupCallback(row) {\n      this.form.setFieldsValue(pick(row, 'billNo', 'billDate', 'customerId', 'remark', 'billProcStatus', 'isApproved', 'isClosed', 'isVoided', 'effectiveTime', 'approverId', 'flowId', 'createTime', 'createBy', 'sysOrgCode', 'updateTime', 'updateBy'));\n    }\n  }\n};",null]}