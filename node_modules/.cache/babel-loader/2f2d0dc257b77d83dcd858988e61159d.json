{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\views\\system\\modules\\SysCheckRuleModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\views\\system\\modules\\SysCheckRuleModal.vue","mtime":1648374778159},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport pick from 'lodash.pick';\nimport { httpAction } from '@/api/manage';\nimport { validateDuplicateValue, alwaysResolve, failedSymbol } from '@/utils/util';\nimport { FormTypes } from '@/utils/JEditableTableUtil';\nimport JEditableTable from '@comp/jeecg/JEditableTable';\nexport default {\n  name: 'SysCheckRuleModal',\n  components: {\n    JEditableTable: JEditableTable,\n    'my-action-button': {\n      props: {\n        rowEvent: Object,\n        allowEmpty: Boolean\n      },\n      methods: {\n        confirmIsShow: function confirmIsShow() {\n          var _this$rowEvent = this.rowEvent,\n              index = _this$rowEvent.index,\n              inputValues = _this$rowEvent.allValues.inputValues;\n          var value = inputValues[index];\n          return value.digits || value.pattern;\n        },\n        handleLineAdd: function handleLineAdd() {\n          var target = this.rowEvent.target;\n          target.add();\n        },\n        handleLineDelete: function handleLineDelete() {\n          var _this$rowEvent2 = this.rowEvent,\n              rowId = _this$rowEvent2.rowId,\n              target = _this$rowEvent2.target;\n          target.removeRows(rowId);\n        },\n        renderDeleteButton: function renderDeleteButton() {\n          var h = this.$createElement;\n\n          if (this.allowEmpty || this.rowEvent.index > 0) {\n            if (this.confirmIsShow()) {\n              return h(\"a-popconfirm\", {\n                \"attrs\": {\n                  \"title\": \"确定要删除吗？\"\n                },\n                \"on\": {\n                  \"confirm\": this.handleLineDelete\n                }\n              }, [h(\"a-button\", {\n                \"attrs\": {\n                  \"icon\": \"minus\"\n                }\n              })]);\n            } else {\n              return h(\"a-button\", {\n                \"attrs\": {\n                  \"icon\": \"minus\"\n                },\n                \"on\": {\n                  \"click\": this.handleLineDelete\n                }\n              });\n            }\n          }\n\n          return '';\n        }\n      },\n      render: function render() {\n        var h = arguments[0];\n        return h(\"div\", [h(\"a-button\", {\n          \"on\": {\n            \"click\": this.handleLineAdd\n          },\n          \"attrs\": {\n            \"icon\": \"plus\"\n          }\n        }), \"\\xA0\", this.renderDeleteButton()]);\n      }\n    }\n  },\n  data: function data() {\n    var _this = this;\n\n    return {\n      title: '操作',\n      visible: false,\n      model: {},\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 5\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      },\n      confirmLoading: false,\n      form: this.$form.createForm(this),\n      validatorRules: {\n        ruleName: {\n          rules: [{\n            required: true,\n            message: '请输入规则名称!'\n          }]\n        },\n        ruleCode: {\n          rules: [{\n            required: true,\n            message: '请输入规则Code!'\n          }, {\n            validator: function validator(rule, value, callback) {\n              return validateDuplicateValue('sys_check_rule', 'rule_code', value, _this.model.id, callback);\n            }\n          }]\n        }\n      },\n      tabs: {\n        activeKey: 'design',\n        global: {\n          key: 'global',\n          columns: [{\n            title: '优先级',\n            key: 'priority',\n            width: '15%',\n            type: FormTypes.select,\n            defaultValue: '1',\n            options: [{\n              title: '优先运行',\n              value: '1'\n            }, {\n              title: '最后运行',\n              value: '0'\n            }],\n            validateRules: []\n          }, {\n            title: '规则（正则表达式）',\n            key: 'pattern',\n            width: '50%',\n            type: FormTypes.input,\n            validateRules: [{\n              required: true,\n              message: '规则不能为空'\n            }, {\n              handler: this.validatePatternHandler\n            }]\n          }, {\n            title: '提示文本',\n            key: 'message',\n            width: '20%',\n            type: FormTypes.input,\n            validateRules: [{\n              required: true,\n              message: '${title}不能为空'\n            }]\n          }, {\n            title: '操作',\n            key: 'action',\n            width: '15%',\n            slotName: 'action',\n            type: FormTypes.slot\n          }],\n          dataSource: []\n        },\n        design: {\n          key: 'design',\n          columns: [{\n            title: '位数',\n            key: 'digits',\n            width: '15%',\n            type: FormTypes.inputNumber,\n            validateRules: [{\n              required: true,\n              message: '${title}不能为空'\n            }, {\n              pattern: /^[1-9]\\d*$/,\n              message: '请输入零以上的正整数'\n            }]\n          }, {\n            title: '规则（正则表达式）',\n            key: 'pattern',\n            width: '50%',\n            type: FormTypes.input,\n            validateRules: [{\n              required: true,\n              message: '规则不能为空'\n            }, {\n              handler: this.validatePatternHandler\n            }]\n          }, {\n            title: '提示文本',\n            key: 'message',\n            width: '20%',\n            type: FormTypes.input,\n            validateRules: [{\n              required: true,\n              message: '${title}不能为空'\n            }]\n          }, {\n            title: '操作',\n            key: 'action',\n            width: '15%',\n            slotName: 'action',\n            type: FormTypes.slot\n          }],\n          dataSource: []\n        }\n      },\n      url: {\n        add: '/sys/checkRule/add',\n        edit: '/sys/checkRule/edit'\n      }\n    };\n  },\n  created: function created() {},\n  methods: {\n    validatePatternHandler: function validatePatternHandler(type, value, row, column, callback, target) {\n      if (type === 'blur' || type === 'getValues') {\n        try {\n          new RegExp(value);\n          callback(true);\n        } catch (e) {\n          callback(false, '请输入正确的正则表达式');\n        }\n      } else {\n        callback(true); // 不填写或者填写 null 代表不进行任何操作\n      }\n    },\n    add: function add() {\n      this.edit({});\n    },\n    edit: function edit(record) {\n      var _this2 = this;\n\n      this.form.resetFields();\n      this.tabs.activeKey = this.tabs.design.key;\n      this.tabs.global.dataSource = [];\n      this.tabs.design.dataSource = [{\n        digits: '',\n        pattern: '',\n        message: ''\n      }];\n      this.model = Object.assign({}, record);\n      this.visible = true;\n      this.$nextTick(function () {\n        _this2.form.setFieldsValue(pick(_this2.model, 'ruleName', 'ruleCode', 'ruleDescription')); // 子表数据\n\n\n        var ruleJson = _this2.model.ruleJson;\n\n        if (ruleJson) {\n          var ruleList = JSON.parse(ruleJson); // 筛选出全局规则和局部规则\n\n          var global = [],\n              design = [],\n              priority = '1';\n          ruleList.forEach(function (rule) {\n            if (rule.digits === '*') {\n              global.push(Object.assign(rule, {\n                priority: priority\n              }));\n            } else {\n              priority = '0';\n              design.push(rule);\n            }\n          });\n          _this2.tabs.global.dataSource = global;\n          _this2.tabs.design.dataSource = design;\n        }\n      });\n    },\n    close: function close() {\n      this.$emit('close');\n      this.visible = false;\n    },\n    handleOk: function handleOk() {\n      var _this3 = this;\n\n      Promise.all([// 主表单校验\n      alwaysResolve(new Promise(function (resolve, reject) {\n        _this3.form.validateFields(function (error, values) {\n          return error ? reject(error) : resolve(values);\n        });\n      })), // 局部规则子表校验\n      alwaysResolve(this.$refs.designTable.getValuesPromise), // 全局规则子表校验\n      alwaysResolve(this.$refs.globalTable.getValuesPromise)]).then(function (results) {\n        var _results = _slicedToArray(results, 3),\n            mainResult = _results[0],\n            designResult = _results[1],\n            globalResult = _results[2];\n\n        if (mainResult.type === failedSymbol) {\n          return Promise.reject('主表校验未通过');\n        } else if (designResult.type === failedSymbol) {\n          _this3.tabs.activeKey = _this3.tabs.design.key;\n          return Promise.reject('局部规则子表校验未通过');\n        } else if (globalResult.type === failedSymbol) {\n          _this3.tabs.activeKey = _this3.tabs.global.key;\n          return Promise.reject('全局规则子表校验未通过');\n        } else {\n          // 所有校验已通过，这一步是整合数据\n          var mainValues = mainResult.data,\n              globalValues = globalResult.data,\n              designValues = designResult.data; // 整合两个子表的数据\n\n          var firstGlobal = [],\n              afterGlobal = [];\n          globalValues.forEach(function (v) {\n            v.digits = '*';\n\n            if (v.priority === '1') {\n              firstGlobal.push(v);\n            } else {\n              afterGlobal.push(v);\n            }\n          });\n          var concatValues = firstGlobal.concat(designValues).concat(afterGlobal);\n          var subValues = concatValues.map(function (i) {\n            return pick(i, 'digits', 'pattern', 'message');\n          }); // 生成 formData，用于传入后台\n\n          var ruleJson = JSON.stringify(subValues);\n          var formData = Object.assign(_this3.model, mainValues, {\n            ruleJson: ruleJson\n          }); // 判断请求方式和请求地址，并发送请求\n\n          var method = 'post',\n              httpUrl = _this3.url.add;\n\n          if (_this3.model.id) {\n            method = 'put';\n            httpUrl = _this3.url.edit;\n          }\n\n          _this3.confirmLoading = true;\n          return httpAction(httpUrl, formData, method);\n        }\n      }).then(function (res) {\n        if (res.success) {\n          _this3.$message.success(res.message);\n\n          _this3.$emit('ok');\n\n          _this3.close();\n        } else {\n          _this3.$message.warning(res.message);\n        }\n      }).catch(function (e) {\n        console.error(e);\n      }).finally(function () {\n        _this3.confirmLoading = false;\n      });\n    },\n    handleCancel: function handleCancel() {\n      this.close();\n    }\n  }\n};",null]}