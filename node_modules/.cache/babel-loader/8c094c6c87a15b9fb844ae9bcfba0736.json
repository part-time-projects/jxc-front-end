{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\components\\jeecg\\JTreeTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\components\\jeecg\\JTreeTable.vue","mtime":1648374777540},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getAction } from '@/api/manage';\nexport default {\n  name: 'JTreeTable',\n  props: {\n    rowKey: {\n      type: String,\n      default: 'id'\n    },\n    // 根据什么查询，如果传递 id 就根据 id 查询\n    queryKey: {\n      type: String,\n      default: 'parentId'\n    },\n    queryParams: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    // 查询顶级时的值，如果顶级为0，则传0\n    topValue: {\n      type: String,\n      default: null\n    },\n    columns: {\n      type: Array,\n      required: true\n    },\n    url: {\n      type: String,\n      required: true\n    },\n    childrenUrl: {\n      type: String,\n      default: null\n    },\n    tableProps: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n\n    /** 是否在创建组件的时候就查询数据 */\n    immediateRequest: {\n      type: Boolean,\n      default: true\n    },\n    condition: {\n      type: String,\n      default: '',\n      required: false\n    }\n  },\n  data: function data() {\n    return {\n      dataSource: [],\n      expandedRowKeys: []\n    };\n  },\n  computed: {\n    getChildrenUrl: function getChildrenUrl() {\n      if (this.childrenUrl) {\n        return this.childrenUrl;\n      } else {\n        return this.url;\n      }\n    },\n    slots: function slots() {\n      var slots = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.columns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var column = _step.value;\n\n          if (column.scopedSlots && column.scopedSlots.customRender) {\n            slots.push(column.scopedSlots.customRender);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return slots;\n    },\n    tableAttrs: function tableAttrs() {\n      return Object.assign(this.$attrs, this.tableProps);\n    }\n  },\n  watch: {\n    queryParams: {\n      deep: true,\n      handler: function handler() {\n        this.loadData();\n      }\n    }\n  },\n  created: function created() {\n    if (this.immediateRequest) this.loadData();\n  },\n  methods: {\n    /** 加载数据*/\n    loadData: function loadData() {\n      var _this = this;\n\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.topValue;\n      var first = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var url = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.url;\n      this.$emit('requestBefore', {\n        first: first\n      });\n\n      if (first) {\n        this.expandedRowKeys = [];\n      }\n\n      var params = Object.assign({}, this.queryParams || {});\n      params[this.queryKey] = id;\n\n      if (this.condition && this.condition.length > 0) {\n        params['condition'] = this.condition;\n      }\n\n      return getAction(url, params).then(function (res) {\n        var list = [];\n\n        if (res.result instanceof Array) {\n          list = res.result;\n        } else if (res.result.records instanceof Array) {\n          list = res.result.records;\n        } else {\n          throw '返回数据类型不识别';\n        }\n\n        var dataSource = list.map(function (item) {\n          // 判断是否标记了带有子级\n          if (item.hasChildren === true) {\n            var _loadChild;\n\n            // 查找第一个带有dataIndex的值的列\n            var firstColumn;\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = _this.columns[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var column = _step2.value;\n                firstColumn = column.dataIndex;\n                if (firstColumn) break;\n              } // 定义默认展开时显示的loading子级，实际子级数据只在展开时加载\n\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n\n            var loadChild = (_loadChild = {\n              id: \"\".concat(item.id, \"_loadChild\")\n            }, _defineProperty(_loadChild, firstColumn, 'loading...'), _defineProperty(_loadChild, \"isLoading\", true), _loadChild);\n            item.children = [loadChild];\n          }\n\n          return item;\n        });\n\n        if (first) {\n          _this.dataSource = dataSource;\n        }\n\n        _this.$emit('requestSuccess', {\n          first: first,\n          dataSource: dataSource,\n          res: res\n        });\n\n        return Promise.resolve(dataSource);\n      }).finally(function () {\n        return _this.$emit('requestFinally', {\n          first: first\n        });\n      });\n    },\n\n    /** 点击展开图标时触发 */\n    handleExpand: function handleExpand(expanded, record) {\n      // 判断是否是展开状态\n      if (expanded) {\n        // 判断子级的首个项的标记是否是“正在加载中”，如果是就加载数据\n        if (record.children[0].isLoading === true) {\n          this.loadData(record.id, false, this.getChildrenUrl).then(function (dataSource) {\n            // 处理好的数据可直接赋值给children\n            if (dataSource.length === 0) {\n              record.children = null;\n            } else {\n              record.children = dataSource;\n            }\n          });\n        }\n      }\n    }\n  }\n};",null]}