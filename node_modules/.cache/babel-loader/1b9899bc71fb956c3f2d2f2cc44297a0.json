{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\components\\ListColumnsSetter.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\components\\ListColumnsSetter.vue","mtime":1648374777613},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Vue from \"vue\";\nexport default {\n  name: \"ListColumnsSetter\",\n  props: {\n    columns: {\n      type: Array,\n      required: true\n    },\n    defColumns: {\n      type: Array,\n      required: true\n    },\n    ignoreColumns: {\n      type: Array,\n      default: function _default() {\n        return ['rowIndex', 'action', 'flag'];\n      }\n    },\n    listName: {\n      type: String,\n      default: ''\n    }\n  },\n  model: {\n    prop: 'columns',\n    event: 'change'\n  },\n  data: function data() {\n    return {\n      defColumns_: [],\n      settingColumns: []\n    };\n  },\n  computed: {\n    ls_key: function ls_key() {\n      return this.$route.name + '/' + this.listName + ':colsettings';\n    }\n  },\n  mounted: function mounted() {\n    var _this$defColumns_;\n\n    (_this$defColumns_ = this.defColumns_).push.apply(_this$defColumns_, _toConsumableArray(this.defColumns));\n\n    this.initColumns();\n  },\n  methods: {\n    initColumns: function initColumns() {\n      var _this = this;\n\n      //权限过滤（列权限控制时打开，修改第二个参数为授权码前缀）\n      //this.defColumns_ = colAuthFilter(this.defColumns_,'testdemo:');\n      var colSettings = Vue.ls.get(this.ls_key);\n      var columns = [];\n\n      if (colSettings === null || colSettings === undefined) {\n        var allSettingColumns = [];\n        this.defColumns_.forEach(function (item, i, array) {\n          allSettingColumns.push(item.dataIndex);\n        });\n        this.settingColumns = allSettingColumns;\n        columns = this.defColumns_;\n      } else {\n        this.settingColumns = colSettings;\n        columns = this.defColumns_.filter(function (item) {\n          if (_this.ignoreColumns.includes(item.key) || _this.ignoreColumns.includes(item.dataIndex)) {\n            return true;\n          }\n\n          if (colSettings.includes(item.dataIndex)) {\n            return true;\n          }\n\n          return false;\n        });\n      }\n\n      this.$emit('change', columns);\n    },\n    //列设置更改事件\n    onColSettingsChange: function onColSettingsChange(checkedValues) {\n      var _this2 = this;\n\n      Vue.ls.set(this.ls_key, checkedValues, 7 * 24 * 60 * 60 * 1000);\n      this.settingColumns = checkedValues;\n      var columns = this.defColumns_.filter(function (item) {\n        if (_this2.ignoreColumns.includes(item.key) || _this2.ignoreColumns.includes(item.dataIndex)) {\n          return true;\n        }\n\n        if (_this2.settingColumns.includes(item.dataIndex)) {\n          return true;\n        }\n\n        return false;\n      });\n      this.$emit('change', columns);\n    }\n  }\n};",{"version":3,"sources":["ListColumnsSetter.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <a-popover title=\"自定义列\" trigger=\"click\" placement=\"leftBottom\">\r\n    <template slot=\"content\">\r\n      <a-checkbox-group @change=\"onColSettingsChange\" v-model=\"settingColumns\"\r\n                        :defaultValue=\"settingColumns\" style=\"width: 400px;\">\r\n        <a-row>\r\n          <template v-for=\"(item,index) in defColumns_\">\r\n            <template v-if=\"!ignoreColumns.includes(item.key) && !ignoreColumns.includes(item.dataIndex)\">\r\n              <a-col :span=\"12\"><a-checkbox :value=\"item.dataIndex\">{{ item.title }}</a-checkbox></a-col>\r\n            </template>\r\n          </template>\r\n        </a-row>\r\n      </a-checkbox-group>\r\n    </template>\r\n    <a-button type=\"link\" icon=\"setting\">自定义列</a-button>\r\n  </a-popover>\r\n</template>\r\n\r\n<script>\r\n  import Vue from \"vue\";\r\n\r\n  export default {\r\n    name: \"ListColumnsSetter\",\r\n\r\n    props: {\r\n      columns:{\r\n        type:Array,\r\n        required: true\r\n      },\r\n      defColumns:{\r\n        type:Array,\r\n        required: true\r\n      },\r\n      ignoreColumns:{\r\n        type: Array,\r\n        default: () => ['rowIndex', 'action', 'flag']\r\n      },\r\n      listName:{\r\n        type:String,\r\n        default: '',\r\n      }\r\n    },\r\n\r\n    model: {\r\n      prop: 'columns',\r\n      event: 'change'\r\n    },\r\n\r\n    data() {\r\n      return {\r\n        defColumns_: [],\r\n        settingColumns:[]\r\n      }\r\n    },\r\n\r\n    computed: {\r\n      ls_key() { return this.$route.name + '/' + this.listName + ':colsettings'},\r\n    },\r\n\r\n    mounted() {\r\n      this.defColumns_.push(...this.defColumns);\r\n      this.initColumns();\r\n    },\r\n\r\n    methods: {\r\n      initColumns(){\r\n        //权限过滤（列权限控制时打开，修改第二个参数为授权码前缀）\r\n        //this.defColumns_ = colAuthFilter(this.defColumns_,'testdemo:');\r\n\r\n        let colSettings = Vue.ls.get(this.ls_key);\r\n        let columns = [];\r\n        if(colSettings===null||colSettings===undefined){\r\n          let allSettingColumns = [];\r\n          this.defColumns_.forEach(function (item,i,array ) {\r\n            allSettingColumns.push(item.dataIndex);\r\n          })\r\n          this.settingColumns = allSettingColumns;\r\n          columns = this.defColumns_;\r\n        } else {\r\n          this.settingColumns = colSettings;\r\n          columns = this.defColumns_.filter(item => {\r\n            if(this.ignoreColumns.includes(item.key) || this.ignoreColumns.includes(item.dataIndex)){\r\n              return true;\r\n            }\r\n            if (colSettings.includes(item.dataIndex)) {\r\n              return true;\r\n            }\r\n            return false;\r\n          })\r\n        }\r\n        this.$emit('change', columns);\r\n      },\r\n\r\n      //列设置更改事件\r\n      onColSettingsChange (checkedValues) {\r\n        Vue.ls.set(this.ls_key, checkedValues, 7*24*60*60*1000)\r\n        this.settingColumns = checkedValues;\r\n        const columns = this.defColumns_.filter(item => {\r\n          if(this.ignoreColumns.includes(item.key) || this.ignoreColumns.includes(item.dataIndex)){\r\n            return true\r\n          }\r\n          if (this.settingColumns.includes(item.dataIndex)) {\r\n            return true\r\n          }\r\n          return false\r\n        })\r\n        this.$emit('change', columns);\r\n      },\r\n    },\r\n\r\n  }\r\n</script>\r\n"],"sourceRoot":"src/views/erp/components"}]}