{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\finance\\modules\\RubricSalInvoiceModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\finance\\modules\\RubricSalInvoiceModal.vue","mtime":1648374777632},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport pick from 'lodash.pick';\nimport { FormTypes, getRefPromise, VALIDATE_NO_PASSED, validateFormAndTables } from '@/utils/JEditableTableUtil';\nimport { JEditableTableMixin } from '@/mixins/JEditableTableMixin';\nimport JDate from '@/components/jeecg/JDate';\nimport JUpload from '@/components/jeecg/JUpload';\nimport JDictSelectTag from \"@/components/dict/JDictSelectTag\";\nimport JSelectUserByDep from '@/components/jeecgbiz/JSelectUserByDep';\nimport { putAction } from '@api/manage';\nimport { billModalMixin } from '../../mixins/billModalMixin';\nimport EditableTableColumnsSetter from \"../../components/EditableTableColumnsSetter\";\nimport OnlCgreportSelectModal from '../../components/OnlCgreportSelectModal';\nimport { getFormatDate } from '../../utils/util';\nimport { validateEntryNo } from '../../utils/editableTableValidate';\nexport default {\n  name: 'RubricSalInvoiceModal',\n  mixins: [JEditableTableMixin, billModalMixin],\n  components: {\n    EditableTableColumnsSetter: EditableTableColumnsSetter,\n    JDate: JDate,\n    JUpload: JUpload,\n    JSelectUserByDep: JSelectUserByDep,\n    JDictSelectTag: JDictSelectTag,\n    OnlCgreportSelectModal: OnlCgreportSelectModal\n  },\n  data: function data() {\n    return {\n      width: '1200px',\n      moreStatus: false,\n      // 新增时子表默认添加几行空数据\n      addDefaultRowNum: 0,\n      validatorRules: {\n        billDate: {\n          rules: [{\n            required: true,\n            message: '请输入单据日期!'\n          }]\n        },\n        customerId: {\n          rules: [{\n            required: true,\n            message: '请输入客户!'\n          }]\n        },\n        sourceNo: {\n          rules: [{\n            required: true,\n            message: '请输入销售发票!'\n          }]\n        }\n      },\n      refKeys: ['finSalInvoiceEntry', 'sourceFinSalInvoiceEntry'],\n      tableKeys: ['finSalInvoiceEntry'],\n      activeKey: 'finSalInvoiceEntry',\n      // 红单明细\n      finSalInvoiceEntryTable: {\n        loading: false,\n        dataSource: [],\n        selectedRowCount: 0,\n        settingColumns: [],\n        //显示列设置\n        columns: [{\n          title: '分录号',\n          key: 'entryNo',\n          type: FormTypes.inputNumber,\n          width: \"60px\",\n          disabled: true\n        }, {\n          title: '源单类型',\n          key: 'sourceType',\n          type: FormTypes.hidden,\n          width: \"1px\",\n          disabled: true\n        }, {\n          title: '源单分录ID',\n          key: 'sourceEntryId',\n          type: FormTypes.hidden,\n          width: \"1px\",\n          disabled: true\n        }, {\n          title: '源单分录号',\n          key: 'sourceEntryNo',\n          type: FormTypes.hidden,\n          width: \"1px\",\n          disabled: true\n        }, {\n          title: '物料',\n          key: 'materialId',\n          type: FormTypes.sel_search,\n          dictCode: \"bas_material,name,id\",\n          width: \"160px\",\n          defaultValue: '',\n          options: [],\n          disabled: true\n        }, {\n          title: '仓库',\n          key: 'warehouseId',\n          type: FormTypes.select,\n          dictCode: \"bas_warehouse,name,id\",\n          width: \"150px\",\n          defaultValue: '',\n          options: [],\n          disabled: true\n        }, {\n          title: '批次号',\n          key: 'batchNo',\n          type: FormTypes.input,\n          width: \"200px\",\n          defaultValue: '',\n          disabled: true\n        }, {\n          title: '结算数量',\n          key: 'settleQty',\n          type: FormTypes.input,\n          width: \"100px\",\n          defaultValue: '',\n          disabled: true\n        }, {\n          title: '结算金额',\n          key: 'settleAmt',\n          type: FormTypes.input,\n          width: \"100px\",\n          defaultValue: '',\n          disabled: true\n        }, {\n          title: '税率',\n          key: 'taxRate',\n          type: FormTypes.input,\n          width: \"80px\",\n          defaultValue: ''\n        }, {\n          title: '发票号',\n          key: 'invoiceNo',\n          type: FormTypes.input,\n          width: \"240px\",\n          placeholder: '请输入${title}',\n          defaultValue: '',\n          validateRules: [{\n            required: true,\n            message: '${title}不能为空'\n          }]\n        }, {\n          title: '开票日期',\n          key: 'invoiceDate',\n          type: FormTypes.date,\n          width: \"120px\",\n          placeholder: '请输入${title}',\n          defaultValue: ''\n        }, {\n          title: '开票数量',\n          key: 'invoiceQty',\n          type: FormTypes.inputNumber,\n          width: \"100px\",\n          placeholder: '请输入${title}',\n          defaultValue: '',\n          validateRules: [{\n            required: true,\n            message: '${title}不能为空'\n          }, {\n            pattern: /^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$/,\n            message: '请输入0或负数!'\n          }, {\n            handler: this.validateRubric\n          }]\n        }, {\n          title: '开票金额',\n          key: 'invoiceAmt',\n          type: FormTypes.inputNumber,\n          width: \"100px\",\n          placeholder: '请输入${title}',\n          defaultValue: '',\n          validateRules: [{\n            required: true,\n            message: '${title}不能为空'\n          }, {\n            pattern: /^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$/,\n            message: '请输入0或负数!'\n          }, {\n            handler: this.validateRubric\n          }]\n        }, {\n          title: '备注',\n          key: 'remark',\n          type: FormTypes.input,\n          width: \"200px\",\n          placeholder: '请输入${title}',\n          defaultValue: ''\n        }, {\n          title: '备注2',\n          key: 'remark2',\n          type: FormTypes.input,\n          width: \"200px\",\n          placeholder: '请输入${title}',\n          defaultValue: ''\n        }, {\n          title: '备注3',\n          key: 'remark3',\n          type: FormTypes.input,\n          width: \"200px\",\n          placeholder: '请输入${title}',\n          defaultValue: ''\n        }]\n      },\n      //蓝字明细\n      sourceFinSalInvoiceEntryTable: {\n        loading: false,\n        dataSource: [],\n        selectedRowCount: 0,\n        disabledRows: {}\n      },\n      url: {\n        add: \"/finance/finSalInvoice/add\",\n        edit: \"/finance/finSalInvoice/edit\",\n        approve: \"/finance/finSalInvoice/approve\",\n        finSalInvoiceEntry: {\n          list: '/finance/finSalInvoice/queryFinSalInvoiceEntryByMainId'\n        }\n      }\n    };\n  },\n  methods: {\n    getAllTable: function getAllTable() {\n      var _this = this;\n\n      var values = this.tableKeys.map(function (key) {\n        return getRefPromise(_this, key);\n      });\n      return Promise.all(values);\n    },\n    addInit: function addInit() {\n      this.model.isAuto = 0;\n      this.model.isRubric = 1;\n      this.model.sourceType = 'fin_sal_invoice'; //处理状态：编辑中\n\n      this.model.billProcStatus = '12'; // 请求后台的填值规则接口地址\n\n      var url = '/sys/fillRule/executeRuleByCode/';\n      var ruleCode = 'sal_invoice_bill_no';\n      var that = this;\n      putAction(url + ruleCode, {}).then(function (res) {\n        // 执行成功，获取返回的值，并赋到页面上\n        if (res.success) {\n          that.model.billNo = res.result;\n          that.$nextTick(function () {\n            that.form.setFieldsValue({\n              'billNo': res.result,\n              'billDate': getFormatDate()\n            });\n          });\n        }\n      });\n    },\n\n    /** 调用完edit()方法之后会自动调用此方法 */\n    editAfter: function editAfter() {\n      var _this2 = this;\n\n      var that = this; //sourceFinSalInvoiceEntry未在tableKeys中\n\n      this.$nextTick(function () {\n        return that.$refs.sourceFinSalInvoiceEntry.initialize();\n      });\n\n      if (this.action === 'add') {\n        this.addInit();\n        this.activeKey = 'sourceFinSalInvoiceEntry';\n      } else {\n        this.activeKey = 'finSalInvoiceEntry';\n      }\n\n      var fieldval = pick(this.model, 'billNo', 'billDate', 'isAuto', 'invoiceType', 'isRubric', 'sourceType', 'sourceNo', 'clerkId', 'customerId', 'attachment', 'remark', 'billProcStatus', 'approverId', 'flowId', 'isApproved', 'effectiveTime', 'isVoided', 'isClosed', 'sysOrgCode', 'createBy', 'createTime', 'updateBy', 'updateTime');\n      this.$nextTick(function () {\n        _this2.form.setFieldsValue(fieldval);\n      }); // 加载子表数据\n\n      if (this.model.id) {\n        var loadSecondSubTableData = function loadSecondSubTableData() {\n          var params = {\n            id: that.model.sourceId\n          };\n          that.requestSubTableData(that.url.finSalInvoiceEntry.list, params, that.sourceFinSalInvoiceEntryTable, that.refreshDisabledRows);\n        };\n\n        var params = {\n          id: this.model.id\n        };\n        this.requestSubTableData(this.url.finSalInvoiceEntry.list, params, this.finSalInvoiceEntryTable, loadSecondSubTableData);\n      }\n    },\n\n    /** 整理成formData */\n    classifyIntoFormData: function classifyIntoFormData(allValues) {\n      var main = Object.assign(this.model, allValues.formValue);\n      return _objectSpread({}, main, {\n        // 展开\n        finSalInvoiceEntryList: allValues.tablesValue[0].values\n      });\n    },\n    validateError: function validateError(msg) {\n      this.$message.error(msg);\n    },\n    popupCallback: function popupCallback(row) {\n      this.form.setFieldsValue(pick(row, 'billNo', 'billDate', 'isAuto', 'invoiceType', 'isRubric', 'sourceType', 'sourceNo', 'clerkId', 'customerId', 'attachment', 'remark', 'billProcStatus', 'approverId', 'flowId', 'isApproved', 'effectiveTime', 'isVoided', 'isClosed', 'sysOrgCode', 'createBy', 'createTime', 'updateBy', 'updateTime'));\n    },\n    handleSourceSelect: function handleSourceSelect() {\n      var queryParams = {};\n      queryParams['customer_id'] = this.form.getFieldValue('customerId');\n      this.$refs.selectModal.initQueryParams(queryParams);\n      this.$refs.selectModal.visible = true;\n    },\n    handleSourceSelectCallback: function handleSourceSelectCallback(selectedRows) {\n      if (this.model.sourceId === selectedRows[0]['id']) return;\n      this.model.sourceId = selectedRows[0]['id'];\n      this.form.setFieldsValue({\n        sourceNo: selectedRows[0]['bill_no'],\n        customerId: selectedRows[0]['customer_id']\n      }); // 加载子表数据\n\n      var params = {\n        id: this.model.sourceId\n      };\n      this.requestSubTableData(this.url.finSalInvoiceEntry.list, params, this.sourceFinSalInvoiceEntryTable, this.refreshDisabledRows);\n    },\n    handleAddEntry: function handleAddEntry() {\n      var source = this.$refs.sourceFinSalInvoiceEntry,\n          target = this.$refs.finSalInvoiceEntry;\n\n      var _source$getValuesSync = source.getValuesSync({\n        validate: false,\n        rowIds: source.selectedRowIds\n      }),\n          values = _source$getValuesSync.values;\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var v = _step.value;\n          var row = pick(v, 'entryNo', 'materialId', 'warehouseId', 'batchNo', 'settleQty', 'settleAmt', 'taxRate');\n          row.sourceType = 'fin_sal_invoice.fin_sal_invoice_entry';\n          row.sourceEntryId = v.id;\n          row.sourceEntryNo = this.form.getFieldValue(\"sourceNo\") + '.' + v.entryNo;\n          row.invoiceQty = -v.invoiceQty;\n          row.invoiceAmt = -v.invoiceAmt;\n          target.add();\n          var rowId = target.rows[target.rows.length - 1].id;\n          target.setValues([{\n            rowKey: rowId,\n            values: row\n          }]);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.refreshDisabledRows();\n    },\n    handleRemoveEntry: function handleRemoveEntry() {\n      this.$refs.finSalInvoiceEntry.removeSelectedRows();\n      this.refreshDisabledRows();\n    },\n    refreshDisabledRows: function refreshDisabledRows() {\n      var entryNos = [];\n\n      var _this$$refs$finSalInv = this.$refs.finSalInvoiceEntry.getValuesSync({\n        validate: false\n      }),\n          values = _this$$refs$finSalInv.values;\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = values[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var v = _step2.value;\n          entryNos.push(Number(v.entryNo));\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      this.sourceFinSalInvoiceEntryTable.disabledRows = entryNos.length === 0 ? {} : {\n        entryNo: entryNos\n      }; //disabledRowIds不初始会保留前面的数据，导致与disabledRows不一致！\n\n      this.$refs.sourceFinSalInvoiceEntry.disabledRowIds = []; //使新的disabledRows生效\n\n      var dataSource = _toConsumableArray(this.sourceFinSalInvoiceEntryTable.dataSource);\n\n      this.sourceFinSalInvoiceEntryTable.dataSource = dataSource;\n    },\n    validateRubric: function validateRubric(type, value, row, column, callback, target) {\n      if (type !== 'blur') {\n        callback();\n        return;\n      }\n\n      var _target$getValuesSync = target.getValuesSync({\n        validate: false,\n        rowIds: [row.id]\n      }),\n          values = _target$getValuesSync.values;\n\n      var rubric = Number(values[0][column.key]);\n\n      if (isNaN(rubric)) {\n        callback();\n        return;\n      }\n\n      var sourceEntryId = values[0].sourceEntryId;\n      var rows = this.sourceFinSalInvoiceEntryTable.dataSource.filter(function (row) {\n        return row.id === sourceEntryId;\n      });\n      var blue = rows[0][column.key];\n\n      if (isNaN(blue)) {\n        callback();\n        return;\n      }\n\n      if (-rubric > blue) {\n        callback(false, '不能超出蓝单！');\n        return;\n      }\n\n      callback(true); //true：通过验证\n    }\n  }\n};",null]}