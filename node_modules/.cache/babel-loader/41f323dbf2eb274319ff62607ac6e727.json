{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\finance\\modules\\OtherPaymentModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\finance\\modules\\OtherPaymentModal.vue","mtime":1648374777624},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport pick from 'lodash.pick';\nimport { FormTypes, getRefPromise, VALIDATE_NO_PASSED, validateFormAndTables } from '@/utils/JEditableTableUtil';\nimport { JEditableTableMixin } from '@/mixins/JEditableTableMixin';\nimport JDate from '@/components/jeecg/JDate';\nimport JUpload from '@/components/jeecg/JUpload';\nimport JDictSelectTag from \"@/components/dict/JDictSelectTag\";\nimport { putAction } from '@api/manage';\nimport { billModalMixin } from '../../mixins/billModalMixin';\nimport { getFormatDate } from '../../utils/util';\nimport { validateEntryNo, validateByIsRubric } from '../../utils/editableTableValidate';\nexport default {\n  name: 'OtherPaymentModal',\n  mixins: [JEditableTableMixin, billModalMixin],\n  components: {\n    JDate: JDate,\n    JUpload: JUpload,\n    JDictSelectTag: JDictSelectTag\n  },\n  data: function data() {\n    return {\n      width: '1200px',\n      moreStatus: false,\n      // 新增时子表默认添加几行空数据\n      addDefaultRowNum: 1,\n      validatorRules: {\n        billNo: {\n          rules: [{\n            required: true,\n            message: '请输入单据编号!'\n          }]\n        },\n        billDate: {\n          rules: [{\n            required: true,\n            message: '请输入单据日期!'\n          }]\n        },\n        supplierId: {\n          rules: [{\n            required: true,\n            message: '请选择供应商!'\n          }]\n        },\n        amt: {\n          rules: []\n        },\n        deductedAmt: {\n          rules: []\n        },\n        checkedAmt: {\n          rules: []\n        },\n        attachment: {\n          rules: []\n        },\n        remark: {\n          rules: []\n        },\n        billProcStatus: {\n          rules: []\n        },\n        isApproved: {\n          rules: []\n        },\n        isClosed: {\n          rules: []\n        },\n        isVoided: {\n          rules: []\n        },\n        effectiveTime: {\n          rules: []\n        },\n        approverId: {\n          rules: []\n        },\n        flowId: {\n          rules: []\n        },\n        createTime: {\n          rules: []\n        },\n        createBy: {\n          rules: []\n        },\n        sysOrgCode: {\n          rules: []\n        },\n        updateTime: {\n          rules: []\n        },\n        updateBy: {\n          rules: []\n        }\n      },\n      refKeys: ['finPaymentEntry'],\n      tableKeys: ['finPaymentEntry'],\n      activeKey: 'finPaymentEntry',\n      // 付款明细\n      finPaymentEntryTable: {\n        loading: false,\n        dataSource: [],\n        columns: [{\n          title: '分录号',\n          key: 'entryNo',\n          type: FormTypes.inputNumber,\n          width: \"60px\",\n          placeholder: '请输入${title}',\n          defaultValue: '',\n          validateRules: [{\n            required: true,\n            message: '${title}不能为空'\n          }, {\n            pattern: /^[1-9]\\d*$/,\n            message: '请输入零以上的正整数'\n          }, {\n            handler: validateEntryNo\n          }]\n        }, {\n          //sourceType、sourceEntry、sourceEntryNo应一起考虑\n          title: '源单分录号',\n          key: 'sourceEntryNo',\n          type: FormTypes.input,\n          width: \"180px\",\n          defaultValue: ''\n        }, {\n          title: '结算方式',\n          key: 'settleMethod',\n          type: FormTypes.select,\n          dictCode: \"x_settle_method\",\n          width: \"150px\",\n          defaultValue: '',\n          options: [],\n          validateRules: [{\n            required: true,\n            message: '${title}不能为空'\n          }]\n        }, {\n          title: '资金账户',\n          key: 'bankAccountId',\n          type: FormTypes.select,\n          dictCode: \"bas_bank_account,account_no,id\",\n          width: \"260px\",\n          defaultValue: '',\n          options: []\n        }, {\n          title: '金额',\n          key: 'amt',\n          type: FormTypes.inputNumber,\n          width: \"120px\",\n          defaultValue: '',\n          validateRules: [{\n            required: true,\n            message: '${title}不能为空'\n          }, {\n            handler: validateByIsRubric\n          }]\n        }, {\n          title: '备注',\n          key: 'remark',\n          type: FormTypes.input,\n          width: \"200px\",\n          defaultValue: ''\n        }, {\n          title: '备注2',\n          key: 'remark2',\n          type: FormTypes.input,\n          width: \"200px\",\n          defaultValue: ''\n        }, {\n          title: '备注3',\n          key: 'remark3',\n          type: FormTypes.input,\n          width: \"200px\",\n          defaultValue: ''\n        }]\n      },\n      url: {\n        add: \"/finance/finPayment/add\",\n        edit: \"/finance/finPayment/edit\",\n        approve: \"/finance/finPayment/approve\",\n        finPaymentEntry: {\n          list: '/finance/finPayment/queryFinPaymentEntryByMainId'\n        }\n      }\n    };\n  },\n  methods: {\n    getAllTable: function getAllTable() {\n      var _this = this;\n\n      var values = this.tableKeys.map(function (key) {\n        return getRefPromise(_this, key);\n      });\n      return Promise.all(values);\n    },\n    addInit: function addInit() {\n      //其他付款\n      this.model.paymentType = '299';\n      this.model.isRubric = 0; //处理状态：编辑中\n\n      this.model.billProcStatus = '12';\n      this.model.amt = 0;\n      this.model.deductedAmt = 0;\n      this.model.checkedAmt = 0; // 请求后台的填值规则接口地址\n\n      var url = '/sys/fillRule/executeRuleByCode/';\n      var ruleCode = 'payment_bill_no';\n      var that = this;\n      putAction(url + ruleCode, {}).then(function (res) {\n        // 执行成功，获取返回的值，并赋到页面上\n        if (res.success) {\n          that.$nextTick(function () {\n            that.form.setFieldsValue({\n              'billNo': res.result,\n              'billDate': getFormatDate()\n            });\n          });\n        }\n      });\n    },\n\n    /** 调用完edit()方法之后会自动调用此方法 */\n    editAfter: function editAfter() {\n      var _this2 = this;\n\n      if (this.action === 'add') {\n        this.addInit();\n      }\n\n      var fieldval = pick(this.model, 'billNo', 'billDate', 'supplierId', 'isRubric', 'amt', 'deductedAmt', 'checkedAmt', 'attachment', 'remark', 'billProcStatus', 'isApproved', 'isClosed', 'isVoided', 'effectiveTime', 'approverId', 'flowId', 'createTime', 'createBy', 'sysOrgCode', 'updateTime', 'updateBy');\n      this.$nextTick(function () {\n        _this2.form.setFieldsValue(fieldval);\n      }); // 加载子表数据\n\n      if (this.model.id) {\n        var params = {\n          id: this.model.id\n        };\n        this.requestSubTableData(this.url.finPaymentEntry.list, params, this.finPaymentEntryTable);\n      }\n    },\n\n    /** 整理成formData */\n    classifyIntoFormData: function classifyIntoFormData(allValues) {\n      var main = Object.assign(this.model, allValues.formValue);\n      return _objectSpread({}, main, {\n        // 展开\n        finPaymentEntryList: allValues.tablesValue[0].values\n      });\n    },\n    validateError: function validateError(msg) {\n      this.$message.error(msg);\n    },\n    popupCallback: function popupCallback(row) {\n      this.form.setFieldsValue(pick(row, 'billNo', 'billDate', 'supplierId', 'isRubric', 'amt', 'deductedAmt', 'checkedAmt', 'attachment', 'remark', 'billProcStatus', 'isApproved', 'isClosed', 'isVoided', 'effectiveTime', 'approverId', 'flowId', 'createTime', 'createBy', 'sysOrgCode', 'updateTime', 'updateBy'));\n    },\n    onEntryDeleted: function onEntryDeleted(deleteIds) {\n      this.calcTotalAmt();\n    },\n    //单元值改变一个字符就触发一次\n    onValueChange: function onValueChange(event) {\n      var type = event.type,\n          row = event.row,\n          column = event.column,\n          value = event.value,\n          target = event.target;\n\n      if (column.key === \"amt\") {\n        this.calcTotalAmt();\n      }\n    },\n    calcTotalAmt: function calcTotalAmt() {\n      var _this$$refs$finPaymen = this.$refs.finPaymentEntry.getValuesSync({\n        validate: false\n      }),\n          error = _this$$refs$finPaymen.error,\n          values = _this$$refs$finPaymen.values;\n\n      var total = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var v = _step.value;\n          var amt = Number(v['amt']);\n\n          if (!isNaN(amt)) {\n            total += amt;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var that = this;\n      that.$nextTick(function () {\n        that.form.setFieldsValue({\n          'amt': total\n        });\n      });\n    }\n  }\n};",null]}