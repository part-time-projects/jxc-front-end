{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\ideaworkspace\\jxc-front-end\\src\\components\\dict\\JDictSelectUtil.js","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\components\\dict\\JDictSelectUtil.js","mtime":1648374777525},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1648365119872}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"D:\\\\ideaworkspace\\\\jxc-front-end\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n/**\r\n * 字典 util\r\n * author: scott\r\n * date: 20190109\r\n */\nimport { ajaxGetDictItems, getDictItemsFromCache } from '@/api/api';\nimport { getAction } from '@/api/manage';\n/**\r\n * 获取字典数组\r\n * @param dictCode 字典Code\r\n * @return List<Map>\r\n */\n\nexport function initDictOptions(_x) {\n  return _initDictOptions.apply(this, arguments);\n}\n/**\r\n * 字典值替换文本通用方法\r\n * @param dictOptions  字典数组\r\n * @param text  字典值\r\n * @return String\r\n */\n\nfunction _initDictOptions() {\n  _initDictOptions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dictCode) {\n    var _res, res;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (dictCode) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", '字典Code不能为空!');\n\n          case 2:\n            if (!getDictItemsFromCache(dictCode)) {\n              _context.next = 7;\n              break;\n            }\n\n            _res = {};\n            _res.result = getDictItemsFromCache(dictCode);\n            _res.success = true;\n            return _context.abrupt(\"return\", _res);\n\n          case 7:\n            _context.next = 9;\n            return ajaxGetDictItems(dictCode);\n\n          case 9:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _initDictOptions.apply(this, arguments);\n}\n\nexport function filterDictText(dictOptions, text) {\n  // --update-begin----author:sunjianlei---date:20200323------for: 字典翻译 text 允许逗号分隔 ---\n  if (text != null && dictOptions instanceof Array) {\n    var result = []; // 允许多个逗号分隔\n\n    var splitText = text.toString().trim().split(',');\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = splitText[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var txt = _step.value;\n        var dictText = txt;\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = dictOptions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var dictItem = _step2.value;\n\n            if (txt === dictItem.value.toString()) {\n              dictText = dictItem.text;\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        result.push(dictText);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return result.join(',');\n  }\n\n  return text; // --update-end----author:sunjianlei---date:20200323------for: 字典翻译 text 允许逗号分隔 ---\n}\n/**\r\n * 字典值替换文本通用方法(多选)\r\n * @param dictOptions  字典数组\r\n * @param text  字典值\r\n * @return String\r\n */\n\nexport function filterMultiDictText(dictOptions, text) {\n  //js “!text” 认为0为空，所以做提前处理\n  if (text === 0 || text === '0') {\n    if (dictOptions) {\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = dictOptions[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var dictItem = _step3.value;\n\n          if (text == dictItem.value) {\n            return dictItem.text;\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n  }\n\n  if (!text || text == 'null' || !dictOptions || dictOptions.length == 0) {\n    return \"\";\n  }\n\n  var re = \"\";\n  text = text.toString();\n  var arr = text.split(\",\");\n  dictOptions.forEach(function (option) {\n    if (option) {\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] === option.value) {\n          re += option.text + \",\";\n          break;\n        }\n      }\n    }\n  });\n\n  if (re == \"\") {\n    return text;\n  }\n\n  return re.substring(0, re.length - 1);\n}\n/**\r\n * 翻译字段值对应的文本\r\n * @param children\r\n * @returns string\r\n */\n\nexport function filterDictTextByCache(dictCode, key) {\n  if (key == null || key.length == 0) {\n    return;\n  }\n\n  if (!dictCode) {\n    return '字典Code不能为空!';\n  } //优先从缓存中读取字典配置\n\n\n  if (getDictItemsFromCache(dictCode)) {\n    var item = getDictItemsFromCache(dictCode).filter(function (t) {\n      return t[\"value\"] == key;\n    });\n\n    if (item && item.length > 0) {\n      return item[0][\"text\"];\n    }\n  }\n}\n/** 通过code获取字典数组 */\n\nexport function getDictItems(_x2, _x3) {\n  return _getDictItems.apply(this, arguments);\n}\n\nfunction _getDictItems() {\n  _getDictItems = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dictCode, params) {\n    var desformDictItems;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!getDictItemsFromCache(dictCode)) {\n              _context2.next = 3;\n              break;\n            }\n\n            desformDictItems = getDictItemsFromCache(dictCode).map(function (item) {\n              return _objectSpread({}, item, {\n                label: item.text\n              });\n            });\n            return _context2.abrupt(\"return\", desformDictItems);\n\n          case 3:\n            _context2.next = 5;\n            return ajaxGetDictItems(dictCode, params).then(function (_ref) {\n              var success = _ref.success,\n                  result = _ref.result;\n\n              if (success) {\n                var _res2 = result.map(function (item) {\n                  return _objectSpread({}, item, {\n                    label: item.text\n                  });\n                });\n\n                console.log('------- 从DB中获取到了字典-------dictCode : ', dictCode, _res2);\n                return Promise.resolve(_res2);\n              } else {\n                console.error('getDictItems error: : ', res);\n                return Promise.resolve([]);\n              }\n            }).catch(function (res) {\n              console.error('getDictItems error: ', res);\n              return Promise.resolve([]);\n            });\n\n          case 5:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getDictItems.apply(this, arguments);\n}",{"version":3,"sources":["D:/ideaworkspace/jxc-front-end/src/components/dict/JDictSelectUtil.js"],"names":["ajaxGetDictItems","getDictItemsFromCache","getAction","initDictOptions","dictCode","res","result","success","filterDictText","dictOptions","text","Array","splitText","toString","trim","split","txt","dictText","dictItem","value","push","join","filterMultiDictText","length","re","arr","forEach","option","i","substring","filterDictTextByCache","key","item","filter","t","getDictItems","params","desformDictItems","map","label","then","console","log","Promise","resolve","error","catch"],"mappings":"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","sourcesContent":["/**\r\n * 字典 util\r\n * author: scott\r\n * date: 20190109\r\n */\r\n\r\nimport {ajaxGetDictItems,getDictItemsFromCache} from '@/api/api'\r\nimport {getAction} from '@/api/manage'\r\n\r\n/**\r\n * 获取字典数组\r\n * @param dictCode 字典Code\r\n * @return List<Map>\r\n */\r\nexport async function initDictOptions(dictCode) {\r\n  if (!dictCode) {\r\n    return '字典Code不能为空!';\r\n  }\r\n  //优先从缓存中读取字典配置\r\n  if(getDictItemsFromCache(dictCode)){\r\n    let res = {}\r\n    res.result = getDictItemsFromCache(dictCode);\r\n    res.success = true;\r\n    return res;\r\n  }\r\n  //获取字典数组\r\n  let res = await ajaxGetDictItems(dictCode);\r\n  return res;\r\n}\r\n\r\n/**\r\n * 字典值替换文本通用方法\r\n * @param dictOptions  字典数组\r\n * @param text  字典值\r\n * @return String\r\n */\r\nexport function filterDictText(dictOptions, text) {\r\n  // --update-begin----author:sunjianlei---date:20200323------for: 字典翻译 text 允许逗号分隔 ---\r\n  if (text != null && dictOptions instanceof Array) {\r\n    let result = []\r\n    // 允许多个逗号分隔\r\n    let splitText = text.toString().trim().split(',')\r\n    for (let txt of splitText) {\r\n      let dictText = txt\r\n      for (let dictItem of dictOptions) {\r\n        if (txt === dictItem.value.toString()) {\r\n          dictText = dictItem.text\r\n          break\r\n        }\r\n      }\r\n      result.push(dictText)\r\n    }\r\n    return result.join(',')\r\n  }\r\n  return text\r\n  // --update-end----author:sunjianlei---date:20200323------for: 字典翻译 text 允许逗号分隔 ---\r\n}\r\n\r\n/**\r\n * 字典值替换文本通用方法(多选)\r\n * @param dictOptions  字典数组\r\n * @param text  字典值\r\n * @return String\r\n */\r\nexport function filterMultiDictText(dictOptions, text) {\r\n  //js “!text” 认为0为空，所以做提前处理\r\n  if(text === 0 || text === '0'){\r\n    if(dictOptions){\r\n      for (let dictItem of dictOptions) {\r\n        if (text == dictItem.value) {\r\n          return dictItem.text\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if(!text || text=='null' || !dictOptions || dictOptions.length==0){\r\n    return \"\"\r\n  }\r\n  let re = \"\";\r\n  text = text.toString()\r\n  let arr = text.split(\",\")\r\n  dictOptions.forEach(function (option) {\r\n    if(option){\r\n      for(let i=0;i<arr.length;i++){\r\n        if (arr[i] === option.value) {\r\n          re += option.text+\",\";\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  });\r\n  if(re==\"\"){\r\n    return text;\r\n  }\r\n  return re.substring(0,re.length-1);\r\n}\r\n\r\n/**\r\n * 翻译字段值对应的文本\r\n * @param children\r\n * @returns string\r\n */\r\nexport function filterDictTextByCache(dictCode, key) {\r\n  if(key==null ||key.length==0){\r\n    return;\r\n  }\r\n  if (!dictCode) {\r\n    return '字典Code不能为空!';\r\n  }\r\n   //优先从缓存中读取字典配置\r\n  if(getDictItemsFromCache(dictCode)){\r\n    let item = getDictItemsFromCache(dictCode).filter(t => t[\"value\"] == key)\r\n    if(item && item.length>0){\r\n      return item[0][\"text\"]\r\n    }\r\n  }\r\n}\r\n\r\n/** 通过code获取字典数组 */\r\nexport async function getDictItems(dictCode, params) {\r\n    //优先从缓存中读取字典配置\r\n    if(getDictItemsFromCache(dictCode)){\r\n      let desformDictItems = getDictItemsFromCache(dictCode).map(item => ({...item, label: item.text}))\r\n      return desformDictItems;\r\n    }\r\n\r\n    //缓存中没有，就请求后台\r\n    return await ajaxGetDictItems(dictCode, params).then(({success, result}) => {\r\n      if (success) {\r\n        let res = result.map(item => ({...item, label: item.text}))\r\n        console.log('------- 从DB中获取到了字典-------dictCode : ', dictCode, res)\r\n        return Promise.resolve(res)\r\n      } else {\r\n        console.error('getDictItems error: : ', res)\r\n        return Promise.resolve([])\r\n      }\r\n    }).catch((res) => {\r\n      console.error('getDictItems error: ', res)\r\n      return Promise.resolve([])\r\n    })\r\n}"]}]}