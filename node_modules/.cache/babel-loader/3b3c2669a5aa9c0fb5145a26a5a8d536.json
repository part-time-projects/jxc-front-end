{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\stock\\modules\\PurInBillModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\stock\\modules\\PurInBillModal.vue","mtime":1648374777646},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport pick from 'lodash.pick';\nimport { FormTypes, getRefPromise } from '@/utils/JEditableTableUtil';\nimport { JEditableTableMixin } from '@/mixins/JEditableTableMixin';\nimport JDate from '@/components/jeecg/JDate';\nimport JUpload from '@/components/jeecg/JUpload';\nimport JSelectUserByDep from '@/components/jeecgbiz/JSelectUserByDep';\nimport JDictSelectTag from \"@/components/dict/JDictSelectTag\";\nimport { putAction } from '@api/manage';\nimport { billModalMixin } from '../../mixins/billModalMixin';\nimport EditableTableColumnsSetter from \"../../components/EditableTableColumnsSetter\";\nimport { getFormatDate } from '../../utils/util';\nimport { validateEntryNo } from '../../utils/editableTableValidate';\nexport default {\n  name: 'PurInBillModal',\n  mixins: [JEditableTableMixin, billModalMixin],\n  components: {\n    EditableTableColumnsSetter: EditableTableColumnsSetter,\n    JDate: JDate,\n    JUpload: JUpload,\n    JSelectUserByDep: JSelectUserByDep,\n    JDictSelectTag: JDictSelectTag\n  },\n  data: function data() {\n    return {\n      width: '1200px',\n      moreStatus: false,\n      // 新增时子表默认添加几行空数据\n      addDefaultRowNum: 1,\n      validatorRules: {\n        stockIoType: {\n          rules: []\n        },\n        billNo: {\n          rules: [{\n            required: true,\n            message: '请输入单据编号!'\n          }]\n        },\n        billDate: {\n          rules: [{\n            required: true,\n            message: '请输入单据日期!'\n          }]\n        },\n        sourceType: {\n          rules: []\n        },\n        sourceId: {\n          rules: []\n        },\n        sourceNo: {\n          rules: []\n        },\n        clerkId: {\n          rules: []\n        },\n        handlerId: {\n          rules: []\n        },\n        hasRp: {\n          rules: []\n        },\n        isRubric: {\n          rules: []\n        },\n        isSameSettle: {\n          rules: []\n        },\n        supplierId: {\n          rules: []\n        },\n        customerId: {\n          rules: []\n        },\n        attachment: {\n          rules: []\n        },\n        remark: {\n          rules: []\n        },\n        billProcStatus: {\n          rules: []\n        },\n        approverId: {\n          rules: []\n        },\n        flowId: {\n          rules: []\n        },\n        isApproved: {\n          rules: []\n        },\n        effectiveTime: {\n          rules: []\n        },\n        isVoided: {\n          rules: []\n        },\n        isClosed: {\n          rules: []\n        },\n        sysOrgCode: {\n          rules: []\n        },\n        createBy: {\n          rules: []\n        },\n        createTime: {\n          rules: []\n        },\n        updateBy: {\n          rules: []\n        },\n        updateTime: {\n          rules: []\n        }\n      },\n      refKeys: ['stkIoBillEntry'],\n      tableKeys: ['stkIoBillEntry'],\n      activeKey: 'stkIoBillEntry',\n      // 明细\n      stkIoBillEntryTable: {\n        loading: false,\n        dataSource: [],\n        columns: [{\n          title: '分录号',\n          key: 'entryNo',\n          type: FormTypes.inputNumber,\n          width: \"60px\",\n          validateRules: [{\n            required: true,\n            message: '${title}不能为空'\n          }, {\n            pattern: /^[1-9]\\d*$/,\n            message: '请输入零以上的正整数'\n          }, {\n            handler: validateEntryNo\n          }]\n        }, {\n          //sourceType、sourceEntryId、sourceEntryNo应一起考虑\n          title: '源单分录号',\n          key: 'sourceEntryNo',\n          type: FormTypes.input,\n          width: \"180px\",\n          defaultValue: ''\n        }, {\n          title: '物料',\n          key: 'materialId',\n          type: FormTypes.sel_search,\n          dictCode: \"bas_material,name,id\",\n          width: \"200px\",\n          placeholder: '请输入${title}',\n          defaultValue: '',\n          validateRules: [{\n            required: true,\n            message: '${title}不能为空'\n          }],\n          options: []\n        }, {\n          title: '计量单位',\n          key: 'unitId',\n          type: FormTypes.select,\n          dictCode: \"bas_measure_unit,name,id\",\n          width: \"100px\",\n          placeholder: '请输入${title}',\n          defaultValue: '',\n          validateRules: [{\n            required: true,\n            message: '${title}不能为空'\n          }],\n          options: []\n        }, {\n          title: '入库数量',\n          key: 'qty',\n          type: FormTypes.inputNumber,\n          statistics: \"true\",\n          width: \"100px\",\n          placeholder: '请输入${title}',\n          defaultValue: '',\n          validateRules: [{\n            required: true,\n            message: '${title}不能为空'\n          }]\n        }, {\n          title: '入库成本',\n          key: 'cost',\n          type: FormTypes.inputNumber,\n          statistics: \"true\",\n          width: \"100px\",\n          placeholder: '请输入${title}',\n          defaultValue: '',\n          validateRules: [{\n            required: true,\n            message: '${title}不能为空'\n          }]\n        }, {\n          title: '成本含税',\n          key: 'isInclTax',\n          type: FormTypes.select,\n          dictCode: \"yn\",\n          width: \"80px\",\n          placeholder: '请输入${title}',\n          defaultValue: '',\n          options: [],\n          validateRules: [{\n            required: true,\n            message: '${title}不能为空'\n          }]\n        }, {\n          title: '仓库',\n          key: 'warehouseId',\n          type: FormTypes.select,\n          dictCode: \"bas_warehouse,name,id\",\n          width: \"150px\",\n          placeholder: '请输入${title}',\n          defaultValue: '',\n          options: [],\n          validateRules: [{\n            required: true,\n            message: '${title}不能为空'\n          }]\n        }, {\n          title: '批次号',\n          key: 'batchNo',\n          type: FormTypes.input,\n          width: \"200px\",\n          placeholder: '请输入${title}',\n          defaultValue: '',\n          validateRules: [{\n            required: true,\n            message: '${title}不能为空'\n          }]\n        }, {\n          title: '结算数量',\n          key: 'settleQty',\n          type: FormTypes.inputNumber,\n          statistics: \"true\",\n          width: \"100px\",\n          placeholder: '请输入${title}',\n          defaultValue: ''\n        }, {\n          title: '含税单价',\n          key: 'settlePrice',\n          type: FormTypes.inputNumber,\n          width: \"100px\",\n          placeholder: '请输入${title}',\n          defaultValue: ''\n        }, {\n          title: '税率%',\n          key: 'taxRate',\n          type: FormTypes.inputNumber,\n          width: \"100px\",\n          placeholder: '请输入${title}',\n          defaultValue: ''\n        }, {\n          title: '税额',\n          key: 'tax',\n          type: FormTypes.inputNumber,\n          statistics: \"true\",\n          width: \"100px\",\n          placeholder: '请输入${title}',\n          defaultValue: ''\n        }, {\n          title: '折让金额',\n          key: 'discountAmt',\n          type: FormTypes.inputNumber,\n          statistics: \"true\",\n          width: \"100px\",\n          placeholder: '请输入${title}',\n          defaultValue: '0'\n        }, {\n          title: '折让税额',\n          key: 'discountTax',\n          type: FormTypes.inputNumber,\n          width: \"100px\",\n          placeholder: '请输入${title}',\n          defaultValue: '0'\n        }, {\n          title: '结算金额',\n          key: 'settleAmt',\n          type: FormTypes.inputNumber,\n          statistics: \"true\",\n          width: \"120px\",\n          placeholder: '请输入${title}',\n          defaultValue: '',\n          validateRules: [{\n            required: true,\n            message: '${title}不能为空'\n          }]\n        }, {\n          title: '已开票数量',\n          key: 'invoicedQty',\n          type: FormTypes.input,\n          statistics: \"true\",\n          width: \"120px\",\n          defaultValue: '',\n          disabled: true\n        }, {\n          title: '已开票金额',\n          key: 'invoicedAmt',\n          type: FormTypes.input,\n          statistics: \"true\",\n          width: \"120px\",\n          defaultValue: '',\n          disabled: true\n        }, {\n          title: '备注',\n          key: 'remark',\n          type: FormTypes.input,\n          width: \"200px\",\n          placeholder: '请输入${title}',\n          defaultValue: ''\n        }, {\n          title: '备注2',\n          key: 'remark2',\n          type: FormTypes.input,\n          width: \"200px\",\n          placeholder: '请输入${title}',\n          defaultValue: ''\n        }, {\n          title: '备注3',\n          key: 'remark3',\n          type: FormTypes.input,\n          width: \"200px\",\n          placeholder: '请输入${title}',\n          defaultValue: ''\n        }, {\n          title: '',\n          key: 'flag',\n          type: FormTypes.input,\n          width: \"1px\",\n          placeholder: '',\n          defaultValue: ''\n        }]\n      },\n      url: {\n        add: \"/stock/stkIoBill/add\",\n        edit: \"/stock/stkIoBill/edit\",\n        approve: \"/stock/stkIoBill/approve\",\n        stkIoBillEntry: {\n          list: '/stock/stkIoBill/queryEntryByMainId'\n        }\n      }\n    };\n  },\n  methods: {\n    getAllTable: function getAllTable() {\n      var _this = this;\n\n      var values = this.tableKeys.map(function (key) {\n        return getRefPromise(_this, key);\n      });\n      return Promise.all(values);\n    },\n    addInit: function addInit() {\n      var _this2 = this;\n\n      //采购入库\n      this.model.stockIoType = '101';\n      this.model.isRubric = 0; //是否有往来\n\n      this.model.hasRp = 1; //结算是否同入库（或取自系统参数）\n\n      this.model.isSameSettle = 0; //处理状态：编辑中\n\n      this.model.billProcStatus = '12'; // 请求后台的填值规则接口地址\n\n      var url = '/sys/fillRule/executeRuleByCode/';\n      var ruleCode = 'stock_io_bill_no';\n      var that = this;\n      putAction(url + ruleCode, {}).then(function (res) {\n        // 执行成功，获取返回的值，并赋到页面上\n        if (res.success) {\n          that.model.billNo = res.result;\n          that.$nextTick(function () {\n            that.form.setFieldsValue({\n              'billNo': res.result,\n              'billDate': getFormatDate()\n            }); //初始空白行增加时，billNo可能还未生成！\n\n            var _this2$$refs$stkIoBil = _this2.$refs.stkIoBillEntry.getValuesSync({\n              validate: false\n            }),\n                values = _this2$$refs$stkIoBil.values;\n\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n              for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var v = _step.value;\n                that.$refs.stkIoBillEntry.setValues([{\n                  rowKey: v.id,\n                  values: {\n                    batchNo: that.model.billNo + '-' + v.entryNo\n                  }\n                }]);\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n          });\n        }\n      });\n    },\n\n    /** 调用完edit()方法之后会自动调用此方法 */\n    editAfter: function editAfter() {\n      var _this3 = this;\n\n      if (this.action === 'add') {\n        this.addInit();\n      }\n\n      var fieldval = pick(this.model, 'billNo', 'billDate', 'sourceType', 'sourceId', 'sourceNo', 'clerkId', 'handlerId', 'isRubric', 'isSameSettle', 'supplierId', 'customerId', 'attachment', 'remark', 'billProcStatus', 'approverId', 'flowId', 'isApproved', 'effectiveTime', 'isVoided', 'isClosed', 'sysOrgCode', 'createBy', 'createTime', 'updateBy', 'updateTime');\n      this.$nextTick(function () {\n        _this3.form.setFieldsValue(fieldval);\n\n        _this3.onIsSameSettleChange(_this3.model.isSameSettle.toString());\n      }); // 加载子表数据\n\n      if (this.model.id) {\n        var params = {\n          id: this.model.id\n        };\n        this.requestSubTableData(this.url.stkIoBillEntry.list, params, this.stkIoBillEntryTable);\n      }\n    },\n\n    /** 整理成formData */\n    classifyIntoFormData: function classifyIntoFormData(allValues) {\n      var main = Object.assign(this.model, allValues.formValue);\n      return _objectSpread({}, main, {\n        // 展开\n        stkIoBillEntryList: allValues.tablesValue[0].values\n      });\n    },\n    validateError: function validateError(msg) {\n      this.$message.error(msg);\n    },\n    popupCallback: function popupCallback(row) {\n      this.form.setFieldsValue(pick(row, 'billNo', 'billDate', 'sourceType', 'sourceId', 'sourceNo', 'clerkId', 'handlerId', 'isRubric', 'isSameSettle', 'supplierId', 'customerId', 'attachment', 'remark', 'billProcStatus', 'approverId', 'flowId', 'isApproved', 'effectiveTime', 'isVoided', 'isClosed', 'sysOrgCode', 'createBy', 'createTime', 'updateBy', 'updateTime'));\n    },\n    onIsSameSettleChange: function onIsSameSettleChange(val) {\n      this.$refs.stkIoBillEntry.columns.forEach(function (item, i, array) {\n        if (item.key === \"settleQty\" || item.key === \"settleAmt\") {\n          item.disabled = val === '1';\n        }\n      });\n\n      if (val === '1') {\n        var _this$$refs$stkIoBill = this.$refs.stkIoBillEntry.getValuesSync({\n          validate: false\n        }),\n            error = _this$$refs$stkIoBill.error,\n            values = _this$$refs$stkIoBill.values;\n\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = values[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var v = _step2.value;\n            this.$refs.stkIoBillEntry.setValues([{\n              rowKey: v.id,\n              values: {\n                settleQty: v.qty,\n                settleAmt: v.cost\n              }\n            }]);\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n    },\n    onInEntryAdded: function onInEntryAdded(event) {\n      this.onEntryAdded(event);\n      var row = event.row,\n          target = event.target;\n\n      var _target$getValuesSync = target.getValuesSync({\n        validate: false,\n        rowIds: [row.id]\n      }),\n          values = _target$getValuesSync.values;\n\n      var batchNo = this.model.billNo + \"-\" + values[0].entryNo;\n      target.setValues([{\n        rowKey: row.id,\n        values: {\n          batchNo: batchNo,\n          flag: \"1\"\n        }\n      }]);\n    },\n    //单元值改变一个字符就触发一次\n    onValueChange: function onValueChange(event) {\n      var type = event.type,\n          row = event.row,\n          column = event.column,\n          value = event.value,\n          target = event.target; //flag: 是否自动设置的batchNo\n\n      if (row.flag == null || row.flag === \"\") {\n        target.setValues([{\n          rowKey: row.id,\n          values: {\n            flag: \"0\"\n          }\n        }]);\n      }\n\n      if (column.key === \"entryNo\" && (row.flag === \"1\" || row.batchNo === \"\" || row.batchNo == null)) {\n        target.setValues([{\n          rowKey: row.id,\n          values: {\n            batchNo: this.model.billNo + \"-\" + value,\n            flag: \"1\"\n          }\n        }]);\n      } else if (column.key === \"batchNo\") {\n        target.setValues([{\n          rowKey: row.id,\n          values: {\n            flag: \"0\"\n          }\n        }]);\n      } //联动\n      //触发：入库数量, 联动列结算数量\n\n\n      if (column.key === 'qty') {\n        if (this.form.getFieldValue(\"isSameSettle\") === '1') {\n          target.setValues([{\n            rowKey: row.id,\n            values: {\n              settleQty: value\n            }\n          }]);\n        }\n      } //触发：入库成本, 联动：结算金额\n      else if (column.key === 'cost') {\n          if (this.form.getFieldValue(\"isSameSettle\") === '1') {\n            target.setValues([{\n              rowKey: row.id,\n              values: {\n                settleAmt: value\n              }\n            }]);\n          }\n        }\n    }\n  }\n};",null]}