{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\components\\jeecg\\JImportModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\components\\jeecg\\JImportModal.vue","mtime":1648374777535},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { postAction } from '@/api/manage';\nexport default {\n  name: 'JImportModal',\n  props: {\n    url: {\n      type: String,\n      default: '',\n      required: false\n    },\n    biz: {\n      type: String,\n      default: '',\n      required: false\n    }\n  },\n  data: function data() {\n    return {\n      visible: false,\n      uploading: false,\n      fileList: [],\n      uploadAction: '',\n      foreignKeys: ''\n    };\n  },\n  watch: {\n    url: function url(val) {\n      if (val) {\n        this.uploadAction = window._CONFIG['domianURL'] + val;\n      }\n    }\n  },\n  created: function created() {\n    this.uploadAction = window._CONFIG['domianURL'] + this.url;\n  },\n  methods: {\n    handleClose: function handleClose() {\n      this.visible = false;\n    },\n    show: function show(arg) {\n      this.fileList = [];\n      this.uploading = false;\n      this.visible = true;\n      this.foreignKeys = arg;\n    },\n    handleRemove: function handleRemove(file) {\n      var index = this.fileList.indexOf(file);\n      var newFileList = this.fileList.slice();\n      newFileList.splice(index, 1);\n      this.fileList = newFileList;\n    },\n    beforeUpload: function beforeUpload(file) {\n      this.fileList = [].concat(_toConsumableArray(this.fileList), [file]);\n      return false;\n    },\n    handleImport: function handleImport() {\n      var _this = this;\n\n      var fileList = this.fileList;\n      var formData = new FormData();\n\n      if (this.biz) {\n        formData.append('isSingleTableImport', this.biz);\n      }\n\n      if (this.foreignKeys && this.foreignKeys.length > 0) {\n        formData.append('foreignKeys', this.foreignKeys);\n      }\n\n      fileList.forEach(function (file) {\n        formData.append('files[]', file);\n      });\n      this.uploading = true;\n      postAction(this.uploadAction, formData).then(function (res) {\n        _this.uploading = false;\n\n        if (res.success) {\n          _this.$message.success(res.message);\n\n          _this.visible = false;\n\n          _this.$emit('ok');\n        } else {\n          _this.$message.warning(res.message);\n        }\n      });\n    }\n  }\n};",null]}