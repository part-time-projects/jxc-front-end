{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\components\\OnlCgreportSelectModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\components\\OnlCgreportSelectModal.vue","mtime":1648374777614},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport '@/assets/less/TableExpand.less';\nimport { getAction } from '@/api/manage';\nimport { filterMultiDictText } from '@/components/dict/JDictSelectUtil';\nimport { filterObj } from '@/utils/util';\nexport default {\n  name: \"OnlCgreportSelectModal\",\n  mixins: [],\n  components: {},\n  props: {\n    title: {\n      type: String,\n      default: '选择'\n    },\n    reportId: {\n      type: String,\n      required: true\n    },\n    params: {\n      //对应sqlParams\n      type: Object,\n      default: function _default() {\n        return {};\n      } //函数体需带括号\n\n    },\n    multiSelectable: {\n      type: Boolean,\n      default: false\n    },\n    width: {\n      type: Number,\n      default: 1000\n    },\n    fullscreen: {\n      type: Boolean,\n      default: false\n    },\n    switchFullscreen: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data: function data() {\n    return {\n      visible: false,\n      //报表定义中的查询字段\n      queryFields: [],\n      //查询参数，多个页面的查询参数用 ReportId 作为键来区分\n      queryParamsMap: {},\n      //报表定义SQL中嵌入的参数\n      sqlParams: {},\n      sorter: {\n        column: '',\n        order: 'desc'\n      },\n      dictOptions: {},\n      toggleSearchStatus: false,\n      //搜索 展开/关闭\n      description: '',\n      url: {\n        getColumnsAndData: '/online/cgreport/api/getColumnsAndData/',\n        getqueryFields: '/online/cgreport/api/getQueryInfo/',\n        getSqlParams: '/online/cgreport/api/getParamsInfo/'\n      },\n      table: {\n        loading: true,\n        // 表头\n        columns: [],\n        //数据集\n        dataSource: [],\n        // 选择器\n        selectedRowKeys: [],\n        selectionRows: [],\n        scroll: {\n          x: true\n        },\n        // 分页参数\n        pagination: {\n          current: 1,\n          pageSize: 10,\n          pageSizeOptions: ['10', '20', '30'],\n          showTotal: function showTotal(total, range) {\n            return range[0] + '-' + range[1] + ' 共' + total + '条';\n          },\n          showQuickJumper: true,\n          showSizeChanger: true,\n          total: 0\n        }\n      },\n      cgreportHeadName: \"\"\n    };\n  },\n  mounted: function mounted() {\n    this.initSqlParams();\n    this.initQueryFields();\n  },\n  computed: {\n    queryParams: {\n      get: function get() {\n        return this.queryParamsMap[this.reportId];\n      },\n      set: function set(newVal) {\n        this.$set(this.queryParamsMap, this.reportId, newVal);\n      }\n    }\n  },\n  methods: {\n    //报表定义SQL中嵌入的参数\n    initSqlParams: function initSqlParams() {\n      var _this = this;\n\n      this.sqlParams = {};\n      getAction(\"\".concat(this.url.getSqlParams).concat(this.reportId)).then(function (res) {\n        if (res.success) {\n          if (res.result && res.result.length > 0) {\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n              for (var _iterator = res.result[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var i = _step.value;\n                //参数来自引用本Modal时设置的属性\n                _this.sqlParams['self_' + i.paramName] = !_this.params[i.paramName] ? \"\" : _this.params[i.paramName];\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n          }\n        } else {\n          _this.$message.warning(res.message);\n        } // this.loadData()\n\n      });\n    },\n    //报表的动态查询参数\n    initQueryFields: function initQueryFields() {\n      var _this2 = this;\n\n      getAction(\"\".concat(this.url.getqueryFields).concat(this.reportId)).then(function (res) {\n        if (res.success) {\n          _this2.queryFields = res.result;\n        } else {\n          _this2.$message.warning(res.message);\n        }\n\n        _this2.loadData();\n      });\n    },\n    //显示本Modal前，调用本函数传递引用页面form或table值作为查询条件参数；\n    //readonly为true，表示传入的有值参数不能修改。\n    initQueryParams: function initQueryParams(queryParams) {\n      var readOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var queryFields = [];\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.queryFields[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var item = _step2.value;\n          item.readOnly = false;\n\n          if (readOnly) {\n            for (var x in queryParams) {\n              if (item.field === x) {\n                if (queryParams[x]) item.readOnly = queryParams[x] !== '';\n                break;\n              }\n            }\n          }\n\n          queryFields.push(item);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      this.queryFields = queryFields;\n      this.queryParams = queryParams;\n      this.loadData();\n    },\n    loadData: function loadData(arg) {\n      var _this3 = this;\n\n      if (arg === 1) {\n        this.table.pagination.current = 1;\n      }\n\n      var params = this.getQueryParams(); //查询条件\n\n      this.table.loading = true;\n      getAction(\"\".concat(this.url.getColumnsAndData).concat(this.reportId), params).then(function (res) {\n        if (res.success) {\n          var _res$result = res.result,\n              data = _res$result.data,\n              columns = _res$result.columns,\n              cgreportHeadName = _res$result.cgreportHeadName,\n              dictOptions = _res$result.dictOptions,\n              fieldHrefSlots = _res$result.fieldHrefSlots;\n          _this3.dictOptions = dictOptions;\n\n          for (var a = 0; a < columns.length; a++) {\n            if (columns[a].customRender) {\n              (function () {\n                var field_name = columns[a].customRender;\n\n                columns[a].customRender = function (t) {\n                  return t ? filterMultiDictText(_this3.dictOptions[field_name], t + '') : t;\n                };\n              })();\n            }\n          }\n\n          _this3.table.columns = _toConsumableArray(columns);\n          _this3.cgreportHeadName = cgreportHeadName;\n          _this3.fieldHrefSlots = fieldHrefSlots;\n\n          if (data) {\n            _this3.table.pagination.total = Number(data.total);\n            _this3.table.dataSource = data.records;\n          } else {\n            _this3.table.pagination.total = 0;\n            _this3.table.dataSource = [];\n          }\n        } else {\n          _this3.$message.warn('查询失败：' + res.message);\n        }\n      }).catch(function (e) {\n        console.error(e);\n\n        _this3.$message.error('查询失败');\n      }).finally(function () {\n        _this3.table.loading = false;\n      });\n    },\n    getQueryParams: function getQueryParams() {\n      var param = Object.assign({}, this.queryParams, this.sorter, this.sqlParams);\n      param.pageNo = this.table.pagination.current;\n      param.pageSize = this.table.pagination.pageSize;\n      return filterObj(param);\n    },\n    searchByQuery: function searchByQuery() {\n      this.loadData(1);\n    },\n    searchReset: function searchReset() {\n      var queryParams = {};\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.queryFields[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var item = _step3.value;\n          if (item.readOnly) queryParam[item.field] = this.queryParams[item.field];\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      this.queryParams = queryParams;\n      this.loadData(1);\n    },\n    handleToggleSearch: function handleToggleSearch() {\n      this.toggleSearchStatus = !this.toggleSearchStatus;\n    },\n    handleChangeInTableSelect: function handleChangeInTableSelect(selectedRowKeys, selectionRows) {\n      this.table.selectedRowKeys = selectedRowKeys;\n      this.table.selectionRows = selectionRows;\n    },\n    handleChangeInTable: function handleChangeInTable(pagination, filters, sorter) {\n      //分页、排序、筛选变化时触发\n      if (Object.keys(sorter).length > 0) {\n        this.sorter.column = sorter.field;\n        this.sorter.order = 'ascend' === sorter.order ? 'asc' : 'desc';\n      } else {\n        this.sorter.column = null;\n        this.sorter.order = null;\n      }\n\n      this.table.pagination = pagination;\n      this.loadData();\n    },\n    handleOk: function handleOk() {\n      this.$emit(\"callback\", this.table.selectionRows);\n    }\n  }\n};",null]}