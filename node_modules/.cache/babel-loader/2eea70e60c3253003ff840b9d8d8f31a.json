{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\finance\\modules\\RpCheck\\RpCheckEntryList.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\finance\\modules\\RpCheck\\RpCheckEntryList.vue","mtime":1648374777629},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { JeecgListMixin } from '@/mixins/JeecgListMixin';\nexport default {\n  name: \"RpCheckEntryList\",\n  mixins: [JeecgListMixin],\n  components: {},\n  props: {\n    // 核销类型:\n    checkType: {\n      type: String,\n      default: \"\"\n    },\n    // 核销方向: 1-应收应付， 2-收款付款\n    checkSide: {\n      type: String,\n      default: \"\"\n    },\n    readOnly: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data: function data() {\n    return {\n      disableMixinCreated: true,\n      // 表头\n      columns: [{\n        title: '分录号',\n        width: 90,\n        align: \"center\",\n        dataIndex: 'entryNo',\n        type: \"Number\",\n        sorter: function sorter(a, b) {\n          return a.entryNo - b.entryNo;\n        },\n        defaultSortOrder: 'ascend'\n      }, {\n        title: '单据号',\n        width: 180,\n        align: \"center\",\n        dataIndex: 'sourceNo'\n      }, {\n        title: '未核销金额',\n        width: 120,\n        align: \"center\",\n        dataIndex: 'uncheckedAmt'\n      }, {\n        title: '核销金额',\n        width: 120,\n        align: \"center\",\n        dataIndex: 'amt',\n        type: \"Number\",\n        scopedSlots: {\n          customRender: 'amt'\n        }\n      }, {\n        title: '备注',\n        align: \"center\",\n        dataIndex: 'remark',\n        scopedSlots: {\n          customRender: 'remark'\n        }\n      }],\n      dictOptions: {\n        billType: []\n      },\n      totalAmt: 0\n    };\n  },\n  computed: {\n    title: function title() {\n      if (this.checkType === \"201\") return this.checkSide === \"1\" ? \"应付\" : this.checkSide === \"2\" ? \"付款\" : \"\";\n    }\n  },\n  watch: {\n    dataSource: function dataSource() {\n      this.calcTotalAmt();\n      this.$emit(\"dataSourceChange\");\n    },\n    totalAmt: function totalAmt() {\n      this.$emit(\"totalAmtChange\", this.totalAmt);\n    }\n  },\n  methods: {\n    resetTable: function resetTable() {\n      this.dataSource = [];\n      this.selectedRowKeys = [];\n      this.selectionRows = [];\n    },\n    onMySelectChange: function onMySelectChange(selectedRowKeys, selectionRows) {\n      this.onSelectChange(selectedRowKeys, selectionRows);\n      this.$emit(\"selectChange\");\n    },\n    calcTotalAmt: function calcTotalAmt() {\n      var total = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.dataSource[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var record = _step.value;\n          var amt = Number(record.amt);\n\n          if (!isNaN(amt)) {\n            total += amt;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.totalAmt = total;\n    },\n    handleCellChange: function handleCellChange(value, record, column) {\n      record[column.dataIndex] = value; //触发dataSourceChange和刷新table\n\n      this.dataSource = _toConsumableArray(this.dataSource);\n    }\n  }\n};",null]}