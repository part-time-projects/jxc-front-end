{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\components\\jeecg\\JGraphicCode.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\components\\jeecg\\JGraphicCode.vue","mtime":1648374777534},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\nimport { getAction } from '@/api/manage';\nexport default {\n  name: 'JGraphicCode',\n  props: {\n    length: {\n      type: Number,\n      default: 4\n    },\n    fontSizeMin: {\n      type: Number,\n      default: 20\n    },\n    fontSizeMax: {\n      type: Number,\n      default: 45\n    },\n    backgroundColorMin: {\n      type: Number,\n      default: 180\n    },\n    backgroundColorMax: {\n      type: Number,\n      default: 240\n    },\n    colorMin: {\n      type: Number,\n      default: 50\n    },\n    colorMax: {\n      type: Number,\n      default: 160\n    },\n    lineColorMin: {\n      type: Number,\n      default: 40\n    },\n    lineColorMax: {\n      type: Number,\n      default: 180\n    },\n    dotColorMin: {\n      type: Number,\n      default: 0\n    },\n    dotColorMax: {\n      type: Number,\n      default: 255\n    },\n    contentWidth: {\n      type: Number,\n      default: 136\n    },\n    contentHeight: {\n      type: Number,\n      default: 38\n    },\n    remote: {\n      type: Boolean,\n      default: false,\n      required: false\n    }\n  },\n  methods: {\n    // 生成一个随机数\n    randomNum: function randomNum(min, max) {\n      return Math.floor(Math.random() * (max - min) + min);\n    },\n    // 生成一个随机的颜色\n    randomColor: function randomColor(min, max) {\n      var r = this.randomNum(min, max);\n      var g = this.randomNum(min, max);\n      var b = this.randomNum(min, max);\n      return 'rgb(' + r + ',' + g + ',' + b + ')';\n    },\n    drawPic: function drawPic() {\n      var _this = this;\n\n      this.randomCode().then(function () {\n        var canvas = document.getElementById('gc-canvas');\n        var ctx = canvas.getContext('2d');\n        ctx.textBaseline = 'bottom'; // 绘制背景\n\n        ctx.fillStyle = _this.randomColor(_this.backgroundColorMin, _this.backgroundColorMax);\n        ctx.fillRect(0, 0, _this.contentWidth, _this.contentHeight); // 绘制文字\n\n        for (var i = 0; i < _this.code.length; i++) {\n          _this.drawText(ctx, _this.code[i], i);\n        }\n\n        _this.drawLine(ctx);\n\n        _this.drawDot(ctx);\n\n        _this.$emit(\"success\", _this.code);\n      });\n    },\n    drawText: function drawText(ctx, txt, i) {\n      ctx.fillStyle = this.randomColor(this.colorMin, this.colorMax);\n      var fontSize = this.randomNum(this.fontSizeMin, this.fontSizeMax);\n      ctx.font = fontSize + 'px SimHei';\n      var padding = 10;\n      var offset = (this.contentWidth - 40) / (this.code.length - 1);\n      var x = padding;\n\n      if (i > 0) {\n        x = padding + i * offset;\n      } //let x = (i + 1) * (this.contentWidth / (this.code.length + 1))\n\n\n      var y = this.randomNum(this.fontSizeMax, this.contentHeight - 5);\n\n      if (fontSize > 40) {\n        y = 40;\n      }\n\n      var deg = this.randomNum(-10, 10); // 修改坐标原点和旋转角度\n\n      ctx.translate(x, y);\n      ctx.rotate(deg * Math.PI / 180);\n      ctx.fillText(txt, 0, 0); // 恢复坐标原点和旋转角度\n\n      ctx.rotate(-deg * Math.PI / 180);\n      ctx.translate(-x, -y);\n    },\n    drawLine: function drawLine(ctx) {\n      // 绘制干扰线\n      for (var i = 0; i < 1; i++) {\n        ctx.strokeStyle = this.randomColor(this.lineColorMin, this.lineColorMax);\n        ctx.beginPath();\n        ctx.moveTo(this.randomNum(0, this.contentWidth), this.randomNum(0, this.contentHeight));\n        ctx.lineTo(this.randomNum(0, this.contentWidth), this.randomNum(0, this.contentHeight));\n        ctx.stroke();\n      }\n    },\n    drawDot: function drawDot(ctx) {\n      // 绘制干扰点\n      for (var i = 0; i < 100; i++) {\n        ctx.fillStyle = this.randomColor(0, 255);\n        ctx.beginPath();\n        ctx.arc(this.randomNum(0, this.contentWidth), this.randomNum(0, this.contentHeight), 1, 0, 2 * Math.PI);\n        ctx.fill();\n      }\n    },\n    reloadPic: function reloadPic() {\n      this.drawPic();\n    },\n    randomCode: function randomCode() {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        if (_this2.remote == true) {\n          getAction(\"/sys/getCheckCode\").then(function (res) {\n            if (res.success) {\n              _this2.checkKey = res.result.key;\n              _this2.code = window.atob(res.result.code);\n              resolve();\n            } else {\n              _this2.$message.error(\"生成验证码错误,请联系系统管理员\");\n\n              _this2.code = 'BUG';\n              resolve();\n            }\n          }).catch(function () {\n            console.log(\"生成验证码连接服务器异常\");\n            _this2.code = 'BUG';\n            resolve();\n          });\n        } else {\n          _this2.randomLocalCode();\n\n          resolve();\n        }\n      });\n    },\n    randomLocalCode: function randomLocalCode() {\n      var random = ''; //去掉了I l i o O\n\n      var str = \"QWERTYUPLKJHGFDSAZXCVBNMqwertyupkjhgfdsazxcvbnm1234567890\";\n\n      for (var i = 0; i < this.length; i++) {\n        var index = Math.floor(Math.random() * 57);\n        random += str[index];\n      }\n\n      this.code = random;\n    },\n    getLoginParam: function getLoginParam() {\n      return {\n        checkCode: this.code,\n        checkKey: this.checkKey\n      };\n    }\n  },\n  mounted: function mounted() {\n    this.drawPic();\n  },\n  data: function data() {\n    return {\n      code: \"\",\n      checkKey: \"\"\n    };\n  }\n};",null]}