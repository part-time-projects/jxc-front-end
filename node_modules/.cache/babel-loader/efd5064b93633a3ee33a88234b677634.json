{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\stock\\modules\\OtherOutBillModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\stock\\modules\\OtherOutBillModal.vue","mtime":1648374777646},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport pick from 'lodash.pick';\nimport { FormTypes, getRefPromise, VALIDATE_NO_PASSED, validateFormAndTables } from '@/utils/JEditableTableUtil';\nimport { JEditableTableMixin } from '@/mixins/JEditableTableMixin';\nimport JDate from '@/components/jeecg/JDate';\nimport JUpload from '@/components/jeecg/JUpload';\nimport JSelectUserByDep from '@/components/jeecgbiz/JSelectUserByDep';\nimport JDictSelectTag from \"@/components/dict/JDictSelectTag\";\nimport { getAction, putAction } from '@api/manage';\nimport { getFormatDate } from '../../utils/util';\nimport Vue from \"vue\";\nimport OnlCgreportSelectModal from '../../components/OnlCgreportSelectModal';\nexport default {\n  name: 'OtherOutBillModal',\n  mixins: [JEditableTableMixin],\n  components: {\n    JDate: JDate,\n    JUpload: JUpload,\n    JSelectUserByDep: JSelectUserByDep,\n    JDictSelectTag: JDictSelectTag,\n    OnlCgreportSelectModal: OnlCgreportSelectModal\n  },\n  data: function data() {\n    return {\n      action: '',\n      moreStatus: false,\n      width: '1200px',\n      spans: {\n        labelCol1: {\n          span: 2\n        },\n        wrapperCol1: {\n          span: 22\n        },\n        labelCol2: {\n          span: 4\n        },\n        wrapperCol2: {\n          span: 20\n        },\n        labelCol3: {\n          span: 6\n        },\n        wrapperCol3: {\n          span: 18\n        },\n        labelCol6: {\n          span: 12\n        },\n        wrapperCol6: {\n          span: 12\n        }\n      },\n      // 新增时子表默认添加几行空数据\n      addDefaultRowNum: 1,\n      validatorRules: {\n        stockIoType: {\n          rules: []\n        },\n        billNo: {\n          rules: [{\n            required: true,\n            message: '请输入单据编号!'\n          }]\n        },\n        billDate: {\n          rules: [{\n            required: true,\n            message: '请输入单据日期!'\n          }]\n        },\n        sourceType: {\n          rules: []\n        },\n        sourceId: {\n          rules: []\n        },\n        sourceNo: {\n          rules: []\n        },\n        clerkId: {\n          rules: []\n        },\n        handlerId: {\n          rules: []\n        },\n        hasRp: {\n          rules: []\n        },\n        isRubric: {\n          rules: []\n        },\n        isSameSettle: {\n          rules: []\n        },\n        supplierId: {\n          rules: []\n        },\n        customerId: {\n          rules: []\n        },\n        attachment: {\n          rules: []\n        },\n        remark: {\n          rules: []\n        },\n        billProcStatus: {\n          rules: []\n        },\n        approverId: {\n          rules: []\n        },\n        flowId: {\n          rules: []\n        },\n        isApproved: {\n          rules: []\n        },\n        effectiveTime: {\n          rules: []\n        },\n        isVoided: {\n          rules: []\n        },\n        isClosed: {\n          rules: []\n        },\n        sysOrgCode: {\n          rules: []\n        },\n        createBy: {\n          rules: []\n        },\n        createTime: {\n          rules: []\n        },\n        updateBy: {\n          rules: []\n        },\n        updateTime: {\n          rules: []\n        }\n      },\n      refKeys: ['stkIoBillEntry'],\n      tableKeys: ['stkIoBillEntry'],\n      activeKey: 'stkIoBillEntry',\n      // 明细\n      stkIoBillEntryTable: {\n        loading: false,\n        dataSource: [],\n        columns: [{\n          title: '分录号',\n          key: 'entryNo',\n          type: FormTypes.inputNumber,\n          width: \"60px\",\n          validateRules: [{\n            required: true,\n            message: '${title}不能为空'\n          }, {\n            pattern: /^[1-9]\\d*$/,\n            message: '请输入零以上的正整数'\n          }, {\n            handler: this.validateEntryNoHandler\n          }]\n        }, {\n          //sourceType、sourceEntryId、sourceEntryNo应一起考虑\n          title: '源单分录号',\n          key: 'sourceEntryNo',\n          type: FormTypes.input,\n          width: \"180px\",\n          defaultValue: '',\n          disabled: true\n        }, {\n          title: '物料',\n          key: 'materialId',\n          type: FormTypes.sel_search,\n          dictCode: \"bas_material,name,id\",\n          width: \"200px\",\n          placeholder: '请输入${title}',\n          defaultValue: '',\n          validateRules: [{\n            required: true,\n            message: '${title}不能为空'\n          }],\n          options: []\n        }, {\n          title: '仓库',\n          key: 'warehouseId',\n          type: FormTypes.select,\n          dictCode: \"bas_warehouse,name,id\",\n          width: \"150px\",\n          placeholder: '请输入${title}',\n          defaultValue: '',\n          options: [],\n          validateRules: [{\n            required: true,\n            message: '${title}不能为空'\n          }]\n        }, {\n          title: '批次号',\n          key: 'batchNo',\n          type: FormTypes.input,\n          width: \"200px\",\n          placeholder: '请输入${title}',\n          defaultValue: '',\n          validateRules: [{\n            required: true,\n            message: '${title}不能为空'\n          }]\n        }, {\n          title: '',\n          key: 'batchNoSelectModal',\n          type: FormTypes.slot,\n          slotName: 'batchNoSelectModal',\n          orgFields: \"material_id,warehouse_id,batch_no,unit_id,unit_id,qty,cost,id\",\n          destFields: \"materialId,warehouseId,batchNo,unitId,inventoryUnitId,inventoryQty,inventoryCost,inventoryId\",\n          width: \"45px\"\n        }, {\n          title: '库存单位',\n          key: 'inventoryUnitId',\n          type: FormTypes.select,\n          dictCode: \"bas_measure_unit,name,id\",\n          width: \"100px\",\n          disabled: true\n        }, {\n          title: '库存数量',\n          key: 'inventoryQty',\n          type: FormTypes.input,\n          statistics: \"true\",\n          width: \"100px\",\n          disabled: true\n        }, {\n          title: '出库单位',\n          key: 'unitId',\n          type: FormTypes.select,\n          dictCode: \"bas_measure_unit,name,id\",\n          width: \"100px\",\n          placeholder: '请输入${title}',\n          defaultValue: '',\n          validateRules: [{\n            required: true,\n            message: '${title}不能为空'\n          }],\n          options: []\n        }, {\n          title: '出库数量',\n          key: 'qty',\n          type: FormTypes.inputNumber,\n          statistics: \"true\",\n          width: \"100px\",\n          placeholder: '请输入${title}',\n          defaultValue: '',\n          validateRules: [{\n            required: true,\n            message: '${title}不能为空'\n          }, {\n            handler: this.validateQtyHandler\n          }]\n        }, {\n          title: '出库成本',\n          key: 'cost',\n          type: FormTypes.inputNumber,\n          statistics: \"true\",\n          width: \"100px\",\n          placeholder: '请输入${title}',\n          defaultValue: '',\n          disabled: true\n        }, {\n          title: '库存批次id',\n          key: 'inventoryId',\n          type: FormTypes.hidden,\n          width: \"10px\",\n          disabled: true\n        }, {\n          title: '库存成本',\n          key: 'inventoryCost',\n          type: FormTypes.input,\n          statistics: \"true\",\n          width: \"100px\",\n          disabled: true\n        }, {\n          title: '备注',\n          key: 'remark',\n          type: FormTypes.input,\n          width: \"200px\",\n          placeholder: '请输入${title}',\n          defaultValue: ''\n        }, {\n          title: '备注2',\n          key: 'remark2',\n          type: FormTypes.input,\n          width: \"200px\",\n          placeholder: '请输入${title}',\n          defaultValue: ''\n        }, {\n          title: '备注3',\n          key: 'remark3',\n          type: FormTypes.input,\n          width: \"200px\",\n          placeholder: '请输入${title}',\n          defaultValue: ''\n        }],\n        settingColumns: []\n      },\n      url: {\n        add: \"/stock/stkIoBill/add\",\n        edit: \"/stock/stkIoBill/edit\",\n        approve: \"/stock/stkIoBill/approve\",\n        stkIoBillEntry: {\n          list: '/stock/stkIoBill/queryEntryByMainId',\n          editingList: '/stock/stkIoBill/queryEditingEntryByMainId'\n        }\n      }\n    };\n  },\n  computed: {\n    readOnly: function readOnly() {\n      return this.action !== \"add\" && this.action !== \"edit\";\n    }\n  },\n  methods: {\n    getAllTable: function getAllTable() {\n      var _this = this;\n\n      var values = this.tableKeys.map(function (key) {\n        return getRefPromise(_this, key);\n      });\n      return Promise.all(values);\n    },\n    addInit: function addInit() {\n      //销售出库\n      this.model.stockIoType = '299';\n      this.model.isRubric = 0; //是否有往来\n\n      this.model.hasRp = 0; //结算是否同出库（或取自系统参数）\n\n      this.model.isSameSettle = 0; //处理状态：编辑中\n\n      this.model.billProcStatus = '12'; // 请求后台的填值规则接口地址\n\n      var url = '/sys/fillRule/executeRuleByCode/';\n      var ruleCode = 'stock_io_bill_no';\n      var that = this;\n      putAction(url + ruleCode, {}).then(function (res) {\n        // 执行成功，获取返回的值，并赋到页面上\n        if (res.success) {\n          that.model.billNo = res.result;\n          that.$nextTick(function () {\n            that.form.setFieldsValue({\n              'billNo': res.result,\n              'billDate': getFormatDate()\n            });\n          });\n        }\n      });\n    },\n\n    /** 调用完edit()方法之后会自动调用此方法 */\n    editAfter: function editAfter() {\n      var _this2 = this;\n\n      if (this.action === 'add') {\n        this.addInit();\n      }\n\n      var fieldval = pick(this.model, 'billNo', 'billDate', 'sourceType', 'sourceId', 'sourceNo', 'clerkId', 'handlerId', 'isRubric', 'supplierId', 'customerId', 'attachment', 'remark', 'billProcStatus', 'approverId', 'flowId', 'isApproved', 'effectiveTime', 'isVoided', 'isClosed', 'sysOrgCode', 'createBy', 'createTime', 'updateBy', 'updateTime');\n      this.$nextTick(function () {\n        return _this2.form.setFieldsValue(fieldval);\n      }); // 加载子表数据\n\n      if (this.model.id) {\n        var params = {\n          id: this.model.id\n        };\n        var url = this.readOnly ? this.url.stkIoBillEntry.list : this.url.stkIoBillEntry.editingList;\n        this.requestSubTableData(url, params, this.stkIoBillEntryTable);\n      }\n    },\n\n    /** 整理成formData */\n    classifyIntoFormData: function classifyIntoFormData(allValues) {\n      var main = Object.assign(this.model, allValues.formValue);\n      return _objectSpread({}, main, {\n        // 展开\n        stkIoBillEntryList: allValues.tablesValue[0].values\n      });\n    },\n    validateError: function validateError(msg) {\n      this.$message.error(msg);\n    },\n    popupCallback: function popupCallback(row) {\n      this.form.setFieldsValue(pick(row, 'billNo', 'billDate', 'sourceType', 'sourceId', 'sourceNo', 'clerkId', 'handlerId', 'isRubric', 'supplierId', 'customerId', 'attachment', 'remark', 'billProcStatus', 'approverId', 'flowId', 'isApproved', 'effectiveTime', 'isVoided', 'isClosed', 'sysOrgCode', 'createBy', 'createTime', 'updateBy', 'updateTime'));\n    },\n    handleSave: function handleSave() {\n      this.handleOk();\n    },\n    handleSubmit: function handleSubmit() {\n      var _this3 = this;\n\n      //处理状态=编辑完成\n      this.form.setFieldsValue({\n        billProcStatus: '13'\n      });\n      /** 触发表单验证 */\n\n      this.getAllTable().then(function (tables) {\n        /** 一次性验证主表和所有的次表 */\n        return validateFormAndTables(_this3.form, tables);\n      }).then(function (allValues) {\n        if (typeof _this3.classifyIntoFormData !== 'function') {\n          throw _this3.throwNotFunction('classifyIntoFormData');\n        }\n\n        var formData = _this3.classifyIntoFormData(allValues); // 发起请求\n\n\n        return _this3.request(formData);\n      }).catch(function (e) {\n        //处理状态=编辑中\n        _this3.form.setFieldsValue({\n          billProcStatus: '12'\n        });\n\n        if (e.error === VALIDATE_NO_PASSED) {\n          // 如果有未通过表单验证的子表，就自动跳转到它所在的tab\n          _this3.activeKey = e.index == null ? _this3.activeKey : _this3.refKeys[e.index];\n        } else {\n          console.error(e);\n        }\n      });\n    },\n    handleApproved: function handleApproved() {\n      var that = this;\n      putAction(that.url.approve, {\n        id: that.model.id\n      }).then(function (res) {\n        if (res.success) {\n          that.$message.success(res.message);\n          that.$emit('ok');\n          that.close();\n        } else {\n          that.$message.warning(res.message);\n        }\n      });\n    },\n    handleToggleMore: function handleToggleMore() {\n      this.moreStatus = !this.moreStatus;\n    },\n    //列设置更改事件\n    onColSettingsChange: function onColSettingsChange(checkedValues) {\n      var key = this.$route.name + \"/stkIoBillEntryTable:colsettings\";\n      Vue.ls.set(key, checkedValues, 7 * 24 * 60 * 60 * 1000);\n      this.stkIoBillEntryTable.settingColumns = checkedValues;\n      this.stkIoBillEntryTable.columns.forEach(function (item, i, array) {\n        if (checkedValues.includes(item.key)) {\n          if (item.typeDef !== undefined && item.typeDef !== null && item.typeDef !== \"\" && item.typeDef !== FormTypes.hidden) {\n            item.type = item.typeDef;\n          }\n        } else if (item.type !== FormTypes.hidden) {\n          item.typeDef = item.type;\n          item.type = FormTypes.hidden;\n        }\n      });\n    },\n    initColumns: function initColumns() {\n      //权限过滤（列权限控制时打开，修改第二个参数为授权码前缀）\n      //this.defColumns = colAuthFilter(this.defColumns,'testdemo:');\n      var key = this.$route.name + \"/stkIoBillEntryTable:colsettings\";\n      var colSettings = Vue.ls.get(key);\n      var that = this;\n\n      if (colSettings == null) {\n        this.stkIoBillEntryTable.columns.forEach(function (item, i, array) {\n          that.stkIoBillEntryTable.settingColumns.push(item.key);\n        });\n      } else {\n        this.stkIoBillEntryTable.settingColumns = colSettings;\n        this.stkIoBillEntryTable.columns.forEach(function (item, i, array) {\n          if (colSettings.includes(item.key)) {\n            if (item.typeDef !== undefined && item.typeDef !== null && item.typeDef !== \"\" && item.typeDef !== FormTypes.hidden) {\n              item.type = item.typeDef;\n            }\n          } else {\n            item.typeDef = item.type;\n            item.type = FormTypes.hidden;\n          }\n        });\n      }\n    },\n    onOutEntryAdded: function onOutEntryAdded(event) {\n      var row = event.row,\n          target = event.target;\n\n      var _target$getValuesSync = target.getValuesSync({\n        validate: false\n      }),\n          values = _target$getValuesSync.values;\n\n      var maxEntryNo = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var val = _step.value;\n          var entryNo = Number(val['entryNo']);\n          if (!isNaN(entryNo) && entryNo > maxEntryNo) maxEntryNo = entryNo;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      maxEntryNo += 10;\n      target.setValues([{\n        rowKey: row.id,\n        values: {\n          entryNo: maxEntryNo\n        }\n      }]);\n    },\n    //单元值改变一个字符就触发一次\n    onValueChange: function onValueChange(event) {\n      var type = event.type,\n          row = event.row,\n          column = event.column,\n          value = event.value,\n          target = event.target; //触发：物料ID、仓库id、批次号、出库数量触发，前三者引起库存数量、库存成本等变化，\n      //      这都需要重新计算，所以：简化为每次change都计算。\n      //联动：出库成本\n\n      var qty = Number(value),\n          inventoryQty = Number(row.inventoryQty),\n          inventoryConst = Number(row.inventoryCost);\n\n      if (!isNaN(qty) && !isNaN(inventoryQty) && !isNaN(inventoryConst) && inventoryQty > 0 && row.unitId && row.unitId !== \"\" && row.inventoryUnitId && row.inventoryUnitId !== \"\") {\n        var key = row.unitId + \"/\" + row.inventoryUnitId;\n        var rate = row.unitId === row.inventoryUnitId ? 1 : Vue.ls.get(key);\n\n        if (rate == null) {\n          var url = '/bas/basMeasureUnit/getRate';\n          var params = {\n            toId: row.unitId,\n            fromId: row.inventoryUnitId\n          };\n          getAction(url, params).then(function (res) {\n            if (res.success) {\n              rate = res.result;\n              Vue.ls.set(key, rate, 7 * 24 * 60 * 60 * 1000);\n              var cost = inventoryConst * qty / (inventoryQty * rate);\n              cost = cost.toFixed(2);\n              target.setValues([{\n                rowKey: row.id,\n                values: {\n                  cost: cost\n                }\n              }]);\n            }\n          });\n        } else {\n          var cost = inventoryConst * qty / (inventoryQty * rate);\n          cost = cost.toFixed(2);\n          target.setValues([{\n            rowKey: row.id,\n            values: {\n              cost: cost\n            }\n          }]);\n        }\n      }\n    },\n    handleBatchNoSelect: function handleBatchNoSelect(props) {\n      var row = props.getValue();\n      var orgFields = props.column.orgFields.split(',');\n      var destFields = props.column.destFields.split(',');\n      var queryParams = {};\n\n      for (var i = 0; i < orgFields.length; i++) {\n        queryParams[orgFields[i]] = row[destFields[i]];\n      }\n\n      this.$refs.selectModal.initQueryParams(queryParams);\n      this.$refs.selectModal.visible = true;\n    },\n    handleBatchNoSelectCallback: function handleBatchNoSelectCallback(props, selectedRows) {\n      var rowId = props.rowId,\n          target = props.target;\n      var orgFields = props.column.orgFields.split(',');\n      var destFields = props.column.destFields.split(',');\n\n      for (var i = 0; i < selectedRows.length; i++) {\n        var values = {};\n\n        for (var j = 0; j < orgFields.length; j++) {\n          values[destFields[j]] = selectedRows[i][orgFields[j]];\n        }\n\n        if (i === 0) {\n          target.setValues([{\n            rowKey: rowId,\n            values: values\n          }]);\n        } else {\n          target.add();\n          var rowId2 = target.rows[target.rows.length - 1].id;\n          target.setValues([{\n            rowKey: rowId2,\n            values: values\n          }]);\n        }\n      }\n    },\n    validateEntryNoHandler: function validateEntryNoHandler(type, value, row, column, callback, target) {\n      if (type !== 'blur') {\n        callback(); //无参或者null：不做操作\n\n        return;\n      }\n\n      var _target$getValuesSync2 = target.getValuesSync({\n        validate: false\n      }),\n          values = _target$getValuesSync2.values;\n\n      var count = 0;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = values[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var val = _step2.value;\n\n          if (Number(val['entryNo']) === Number(value)) {\n            if (++count >= 2) {\n              callback(false, '${title}不能重复');\n              return;\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      callback(true); //true：通过验证\n    },\n    validateQtyHandler: function validateQtyHandler(type, value, row, column, callback, target) {\n      if (type !== 'blur') {\n        callback();\n        return;\n      }\n\n      var _target$getValuesSync3 = target.getValuesSync({\n        validate: false,\n        rowIds: [row.id]\n      }),\n          values = _target$getValuesSync3.values;\n\n      var inventoryQty = Number(values[0].inventoryQty);\n      var qty = Number(value);\n\n      if (isNaN(qty) || isNaN(inventoryQty)) {\n        callback();\n        return;\n      }\n\n      if (qty > inventoryQty) {\n        callback(false, '不能大于库存数量！');\n        return;\n      }\n\n      var inventoryId = values[0].inventoryId;\n\n      if (!inventoryId) {\n        callback();\n        return;\n      }\n\n      var totalQty = 0;\n      var obj = target.getValuesSync({\n        validate: false\n      });\n      values = obj.values;\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = values[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var v = _step3.value;\n          qty = Number(v.qty);\n          if (!isNaN(qty)) totalQty += qty;\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      if (totalQty > inventoryQty) {\n        callback(false, '该库存批次的出库数量合计不能大于库存数量！');\n      } else {\n        callback(true);\n      }\n    }\n  },\n  created: function created() {\n    this.initColumns();\n  }\n};",null]}