{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\components\\layouts\\TabLayout.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\components\\layouts\\TabLayout.vue","mtime":1648374777556},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport GlobalLayout from '@/components/page/GlobalLayout';\nimport Contextmenu from '@/components/menu/Contextmenu';\nimport { mixin, mixinDevice } from '@/utils/mixin.js';\nimport { triggerWindowResizeEvent } from '@/utils/util';\nvar indexKey = '/dashboard/analysis';\nexport default {\n  name: 'TabLayout',\n  components: {\n    GlobalLayout: GlobalLayout,\n    Contextmenu: Contextmenu\n  },\n  mixins: [mixin, mixinDevice],\n  data: function data() {\n    return {\n      pageList: [],\n      linkList: [],\n      activePage: '',\n      menuVisible: false,\n      menuItemList: [{\n        key: '4',\n        icon: 'reload',\n        text: '刷 新'\n      }, {\n        key: '1',\n        icon: 'arrow-left',\n        text: '关闭左侧'\n      }, {\n        key: '2',\n        icon: 'arrow-right',\n        text: '关闭右侧'\n      }, {\n        key: '3',\n        icon: 'close',\n        text: '关闭其它'\n      }],\n      reloadFlag: true\n    };\n  },\n\n  /* update_begin author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用 ->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\n  provide: function provide() {\n    return {\n      closeCurrent: this.closeCurrent\n    };\n  },\n\n  /* update_end author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\n  computed: {\n    multipage: function multipage() {\n      //判断如果是手机模式，自动切换为单页面模式\n      if (this.isMobile()) {\n        return false;\n      } else {\n        return this.$store.state.app.multipage;\n      }\n    }\n  },\n  created: function created() {\n    if (this.$route.path != indexKey) {\n      this.addIndexToFirst();\n    } // update-begin-author:sunjianlei date:20191223 for: 修复刷新后菜单Tab名字显示异常\n\n\n    var storeKey = 'route:title:' + this.$route.fullPath;\n    var routeTitle = this.$ls.get(storeKey);\n\n    if (routeTitle) {\n      this.$route.meta.title = routeTitle;\n    } // update-end-author:sunjianlei date:20191223 for: 修复刷新后菜单Tab名字显示异常\n\n\n    this.pageList.push(this.$route);\n    this.linkList.push(this.$route.fullPath);\n    this.activePage = this.$route.fullPath;\n  },\n  mounted: function mounted() {},\n  watch: {\n    '$route': function $route(newRoute) {\n      //console.log(\"新的路由\",newRoute)\n      this.activePage = newRoute.fullPath;\n\n      if (!this.multipage) {\n        this.linkList = [newRoute.fullPath];\n        this.pageList = [Object.assign({}, newRoute)]; // update-begin-author:taoyan date:20200211 for: TASK #3368 【路由缓存】首页的缓存设置有问题，需要根据后台的路由配置来实现是否缓存\n      } else if (indexKey == newRoute.fullPath) {\n        //首页时 判断是否缓存 没有缓存 刷新之\n        if (newRoute.meta.keepAlive === false) {\n          this.routeReload();\n        } // update-end-author:taoyan date:20200211 for: TASK #3368 【路由缓存】首页的缓存设置有问题，需要根据后台的路由配置来实现是否缓存\n\n      } else if (this.linkList.indexOf(newRoute.fullPath) < 0) {\n        this.linkList.push(newRoute.fullPath);\n        this.pageList.push(Object.assign({}, newRoute)); // update-begin-author:sunjianlei date:20200103 for: 如果新增的页面配置了缓存路由，那么就强制刷新一遍\n\n        if (newRoute.meta.keepAlive) {\n          this.routeReload();\n        } // update-end-author:sunjianlei date:20200103 for: 如果新增的页面配置了缓存路由，那么就强制刷新一遍\n\n      } else if (this.linkList.indexOf(newRoute.fullPath) >= 0) {\n        var oldIndex = this.linkList.indexOf(newRoute.fullPath);\n        var oldPositionRoute = this.pageList[oldIndex];\n        this.pageList.splice(oldIndex, 1, Object.assign({}, newRoute, {\n          meta: oldPositionRoute.meta\n        }));\n      }\n    },\n    'activePage': function activePage(key) {\n      var index = this.linkList.lastIndexOf(key);\n      var waitRouter = this.pageList[index];\n      this.$router.push(Object.assign({}, waitRouter));\n      this.changeTitle(waitRouter.meta.title);\n    },\n    'multipage': function multipage(newVal) {\n      if (this.reloadFlag) {\n        if (!newVal) {\n          this.linkList = [this.$route.fullPath];\n          this.pageList = [this.$route];\n        }\n      }\n    },\n    // update-begin-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n    device: function device() {\n      if (this.multipage && this.linkList.indexOf(indexKey) === -1) {\n        this.addIndexToFirst();\n      }\n    } // update-end-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n\n  },\n  methods: {\n    // update-begin-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n    // 将首页添加到第一位\n    addIndexToFirst: function addIndexToFirst() {\n      this.pageList.splice(0, 0, {\n        name: 'dashboard-analysis',\n        path: indexKey,\n        fullPath: indexKey,\n        meta: {\n          icon: 'dashboard',\n          title: '首页'\n        }\n      });\n      this.linkList.splice(0, 0, indexKey);\n    },\n    // update-end-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n    // update-begin-author:sunjianlei date:20200120 for: 动态更改页面标题\n    changeTitle: function changeTitle(title) {\n      var projectTitle = \"Finer 进销存\"; // 首页特殊处理\n\n      if (this.$route.path === indexKey) {\n        document.title = projectTitle;\n      } else {\n        document.title = title + ' · ' + projectTitle;\n      }\n    },\n    // update-end-author:sunjianlei date:20200120 for: 动态更改页面标题\n    changePage: function changePage(key) {\n      this.activePage = key;\n    },\n    tabCallBack: function tabCallBack() {\n      this.$nextTick(function () {\n        triggerWindowResizeEvent();\n      });\n    },\n    editPage: function editPage(key, action) {\n      this[action](key);\n    },\n    remove: function remove(key) {\n      if (key == indexKey) {\n        this.$message.warning('首页不能关闭!');\n        return;\n      }\n\n      if (this.pageList.length === 1) {\n        this.$message.warning('这是最后一页，不能再关闭了啦');\n        return;\n      }\n\n      console.log(\"this.pageList \", this.pageList);\n      this.pageList = this.pageList.filter(function (item) {\n        return item.fullPath !== key;\n      });\n      var index = this.linkList.indexOf(key);\n      this.linkList = this.linkList.filter(function (item) {\n        return item !== key;\n      });\n      index = index >= this.linkList.length ? this.linkList.length - 1 : index;\n      this.activePage = this.linkList[index];\n    },\n    onContextmenu: function onContextmenu(e) {\n      var pagekey = this.getPageKey(e.target);\n\n      if (pagekey !== null) {\n        e.preventDefault();\n        this.menuVisible = true;\n      }\n    },\n    getPageKey: function getPageKey(target, depth) {\n      depth = depth || 0;\n\n      if (depth > 2) {\n        return null;\n      }\n\n      var pageKey = target.getAttribute('pagekey');\n      pageKey = pageKey || (target.previousElementSibling ? target.previousElementSibling.getAttribute('pagekey') : null);\n      return pageKey || (target.firstElementChild ? this.getPageKey(target.firstElementChild, ++depth) : null);\n    },\n    onMenuSelect: function onMenuSelect(key, target) {\n      var pageKey = this.getPageKey(target);\n\n      switch (key) {\n        case '1':\n          this.closeLeft(pageKey);\n          break;\n\n        case '2':\n          this.closeRight(pageKey);\n          break;\n\n        case '3':\n          this.closeOthers(pageKey);\n          break;\n\n        case '4':\n          this.routeReload();\n          break;\n\n        default:\n          break;\n      }\n    },\n\n    /* update_begin author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\n    closeCurrent: function closeCurrent() {\n      this.remove(this.activePage);\n    },\n\n    /* update_end author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\n    closeOthers: function closeOthers(pageKey) {\n      var index = this.linkList.indexOf(pageKey);\n\n      if (pageKey == indexKey || pageKey.indexOf('?ticke=') >= 0) {\n        this.linkList = this.linkList.slice(index, index + 1);\n        this.pageList = this.pageList.slice(index, index + 1);\n        this.activePage = this.linkList[0];\n      } else {\n        var indexContent = this.pageList.slice(0, 1)[0];\n        this.linkList = this.linkList.slice(index, index + 1);\n        this.pageList = this.pageList.slice(index, index + 1);\n        this.linkList.unshift(indexContent.fullPath);\n        this.pageList.unshift(indexContent);\n        this.activePage = this.linkList[1];\n      }\n    },\n    closeLeft: function closeLeft(pageKey) {\n      if (pageKey == indexKey) {\n        return;\n      }\n\n      var tempList = _toConsumableArray(this.pageList);\n\n      var indexContent = tempList.slice(0, 1)[0];\n      var index = this.linkList.indexOf(pageKey);\n      this.linkList = this.linkList.slice(index);\n      this.pageList = this.pageList.slice(index);\n      this.linkList.unshift(indexContent.fullPath);\n      this.pageList.unshift(indexContent);\n\n      if (this.linkList.indexOf(this.activePage) < 0) {\n        this.activePage = this.linkList[0];\n      }\n    },\n    closeRight: function closeRight(pageKey) {\n      var index = this.linkList.indexOf(pageKey);\n      this.linkList = this.linkList.slice(0, index + 1);\n      this.pageList = this.pageList.slice(0, index + 1);\n\n      if (this.linkList.indexOf(this.activePage < 0)) {\n        this.activePage = this.linkList[this.linkList.length - 1];\n      }\n    },\n    //update-begin-author:taoyan date:20190430 for:动态路由title显示配置的菜单title而不是其对应路由的title\n    dynamicRouterShow: function dynamicRouterShow(key, title) {\n      var keyIndex = this.linkList.indexOf(key);\n\n      if (keyIndex >= 0) {\n        var currRouter = this.pageList[keyIndex];\n        var meta = Object.assign({}, currRouter.meta, {\n          title: title\n        });\n        this.pageList.splice(keyIndex, 1, Object.assign({}, currRouter, {\n          meta: meta\n        }));\n\n        if (key === this.activePage) {\n          this.changeTitle(title);\n        }\n      }\n    },\n    //update-end-author:taoyan date:20190430 for:动态路由title显示配置的菜单title而不是其对应路由的title\n    //update-begin-author:taoyan date:20191008 for:路由刷新\n    routeReload: function routeReload() {\n      var _this = this;\n\n      this.reloadFlag = false;\n      var ToggleMultipage = \"ToggleMultipage\";\n      this.$store.dispatch(ToggleMultipage, false);\n      this.$nextTick(function () {\n        _this.$store.dispatch(ToggleMultipage, true);\n\n        _this.reloadFlag = true;\n      });\n    } //update-end-author:taoyan date:20191008 for:路由刷新\n\n  }\n};",null]}