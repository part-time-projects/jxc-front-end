{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\stock\\modules\\CheckBillModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\stock\\modules\\CheckBillModal.vue","mtime":1648374777643},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport pick from 'lodash.pick';\nimport { FormTypes, getRefPromise, VALIDATE_NO_PASSED, validateFormAndTables } from '@/utils/JEditableTableUtil';\nimport { JEditableTableMixin } from '@/mixins/JEditableTableMixin';\nimport JDate from '@/components/jeecg/JDate';\nimport JUpload from '@/components/jeecg/JUpload';\nimport JDictSelectTag from \"@/components/dict/JDictSelectTag\";\nimport { putAction } from '@api/manage';\nimport { billModalMixin } from '../../mixins/billModalMixin';\nimport { getFormatDate } from '../../utils/util';\nexport default {\n  name: 'CheckBillModal',\n  mixins: [JEditableTableMixin, billModalMixin],\n  components: {\n    JDate: JDate,\n    JUpload: JUpload,\n    JDictSelectTag: JDictSelectTag\n  },\n  data: function data() {\n    return {\n      width: '1200px',\n      moreStatus: false,\n      entryNoStep: 1,\n      //分录号自动编号步长\n      //盘点范围\n      checkRange: {},\n      lastCheckRange: {},\n      // 新增时子表默认添加几行空数据\n      addDefaultRowNum: 0,\n      validatorRules: {\n        billNo: {\n          rules: [{\n            required: true,\n            message: '请输入单据编号!'\n          }]\n        },\n        billDate: {\n          rules: [{\n            required: true,\n            message: '请输入单据日期!'\n          }]\n        },\n        warehouseId: {\n          rules: [{\n            required: true,\n            message: '请选择仓库!'\n          }]\n        }\n      },\n      refKeys: ['stkCheckBillEntry', 'stkCheckBillEntryNew'],\n      tableKeys: ['stkCheckBillEntry', 'stkCheckBillEntryNew'],\n      activeKey: 'stkCheckBillEntry',\n      // 明细\n      stkCheckBillEntryTable: {\n        loading: false,\n        dataSource: [],\n        columns: [{\n          title: '序号',\n          key: 'entryNo',\n          type: FormTypes.input,\n          width: \"70px\",\n          placeholder: '请输入${title}',\n          defaultValue: '',\n          disabled: true\n        }, {\n          title: '是否新批次',\n          key: 'isNewBatch',\n          type: FormTypes.hidden,\n          width: \"1px\",\n          defaultValue: '0',\n          disabled: true\n        }, {\n          title: '仓库',\n          key: 'warehouseId',\n          type: FormTypes.select,\n          dictCode: \"bas_warehouse,name,id\",\n          width: \"150px\",\n          defaultValue: '',\n          options: [],\n          disabled: true\n        }, {\n          title: '物料',\n          key: 'materialId',\n          type: FormTypes.select,\n          dictCode: \"bas_material,name,id\",\n          width: \"150px\",\n          defaultValue: '',\n          options: [],\n          disabled: true\n        }, {\n          title: '批号',\n          key: 'batchNo',\n          type: FormTypes.input,\n          width: \"220px\",\n          defaultValue: '',\n          disabled: true\n        }, {\n          title: '供应商',\n          key: 'supplierId',\n          type: FormTypes.select,\n          dictCode: \"bas_supplier,name,id\",\n          width: \"150px\",\n          defaultValue: '',\n          disabled: true\n        }, {\n          title: '计量单位',\n          key: 'unitId',\n          type: FormTypes.select,\n          dictCode: \"bas_measure_unit,name,id\",\n          width: \"100px\",\n          defaultValue: '',\n          options: [],\n          disabled: true\n        }, {\n          title: '账存数量',\n          key: 'bookQty',\n          type: FormTypes.input,\n          width: \"100px\",\n          placeholder: '请输入${title}',\n          defaultValue: '0',\n          disabled: true\n        }, {\n          title: '实存数量',\n          key: 'qty',\n          type: FormTypes.inputNumber,\n          width: \"100px\",\n          placeholder: '请输入${title}',\n          defaultValue: ''\n        }, {\n          title: '盈亏',\n          key: 'profitQty',\n          type: FormTypes.inputNumber,\n          width: \"100px\",\n          placeholder: '请输入${title}',\n          defaultValue: '',\n          disabled: true\n        }, {\n          title: '备注',\n          key: 'remark',\n          type: FormTypes.input,\n          width: \"200px\",\n          placeholder: '请输入${title}',\n          defaultValue: ''\n        }, {\n          title: '备注2',\n          key: 'remark2',\n          type: FormTypes.input,\n          width: \"200px\",\n          placeholder: '请输入${title}',\n          defaultValue: ''\n        }, {\n          title: '备注3',\n          key: 'remark3',\n          type: FormTypes.input,\n          width: \"200px\",\n          placeholder: '请输入${title}',\n          defaultValue: ''\n        }, {\n          title: '',\n          key: 'flag',\n          type: FormTypes.hidden,\n          width: \"1px\",\n          placeholder: '',\n          defaultValue: ''\n        }],\n        dataSourceNew: [],\n        columnsNew: []\n      },\n      url: {\n        add: \"/stock/stkCheckBill/add\",\n        edit: \"/stock/stkCheckBill/edit\",\n        approve: \"/stock/stkCheckBill/approve\",\n        stkCheckBillEntry: {\n          list: '/stock/stkCheckBill/queryStkCheckBillEntryByMainId',\n          listByRange: '/stock/stkCheckBill/queryStkCheckBillEntryByRange'\n        }\n      }\n    };\n  },\n  computed: {\n    isCheckRangeChange: function isCheckRangeChange() {\n      return this.checkRange.warehouseId !== this.lastCheckRange.warehouseId || this.checkRange.materialCategoryId !== this.lastCheckRange.materialCategoryId;\n    }\n  },\n  created: function created() {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = this.stkCheckBillEntryTable.columns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var col = _step.value;\n        var col2 = Object.assign({}, col);\n        if (!['entryNo', 'isNewBatch', 'bookQty', 'profitQty'].includes(col2.key)) col2.disabled = false;\n        if (col2.key === 'isNewBatch') col2.defaultValue = '1';\n        if (col2.key === 'bookQty') col2.defaultValue = '0';\n        this.stkCheckBillEntryTable.columnsNew.push(col2);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  },\n  methods: {\n    getAllTable: function getAllTable() {\n      var _this = this;\n\n      var values = this.tableKeys.map(function (key) {\n        return getRefPromise(_this, key);\n      });\n      return Promise.all(values);\n    },\n    addInit: function addInit() {\n      this.checkRange = {\n        warehouseId: '',\n        materialCategoryId: ''\n      };\n      this.lastCheckRange = Object.assign({}, this.checkRange); //处理状态：编辑中\n\n      this.model.billProcStatus = '12'; // 请求后台的填值规则接口地址\n\n      var url = '/sys/fillRule/executeRuleByCode/';\n      var ruleCode = 'stock_check_bill_no';\n      var that = this;\n      putAction(url + ruleCode, {}).then(function (res) {\n        // 执行成功，获取返回的值，并赋到页面上\n        if (res.success) {\n          that.model.billNo = res.result;\n          that.$nextTick(function () {\n            that.form.setFieldsValue({\n              'billNo': res.result,\n              'billDate': getFormatDate()\n            });\n          });\n        }\n      });\n    },\n\n    /** 调用完edit()方法之后会自动调用此方法 */\n    editAfter: function editAfter() {\n      var _this2 = this;\n\n      var columns = this.stkCheckBillEntryTable.columns.filter(function (col) {\n        return col.key === 'qty';\n      });\n\n      if (this.action === 'add') {\n        this.addInit();\n        columns[0].validateRules = [{}];\n      } else if (this.action === 'edit') {\n        columns[0].validateRules = [{\n          required: true,\n          message: '${title}不能为空'\n        }];\n      }\n\n      var fieldval = pick(this.model, 'billNo', 'billDate', 'warehouseId', 'materialCategoryId', 'checkerId', 'attachment', 'remark', 'billProcStatus', 'approverId', 'flowId', 'isApproved', 'effectiveTime', 'isVoided', 'isClosed', 'sysOrgCode', 'createBy', 'createTime', 'updateBy', 'updateTime');\n      this.$nextTick(function () {\n        _this2.form.setFieldsValue(fieldval);\n      }); // 加载子表数据\n\n      if (this.model.id) {\n        var splitData = function splitData() {\n          var dataSource = [],\n              dataSourceNew = [];\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = that.stkCheckBillEntryTable.dataSource[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var row = _step2.value;\n\n              if (row.isNewBatch === 0) {\n                dataSource.push(row);\n              } else {\n                dataSourceNew.push(row);\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          dataSource.sort(function (a, b) {\n            return a.entryNo - b.entryNo;\n          });\n          that.stkCheckBillEntryTable.dataSource = dataSource;\n          dataSourceNew.sort(function (a, b) {\n            return a.entryNo - b.entryNo;\n          });\n          that.stkCheckBillEntryTable.dataSourceNew = dataSourceNew;\n        };\n\n        var that = this;\n        var params = {\n          id: this.model.id\n        };\n        this.requestSubTableData(this.url.stkCheckBillEntry.list, params, this.stkCheckBillEntryTable, splitData);\n      }\n    },\n\n    /** 整理成formData */\n    classifyIntoFormData: function classifyIntoFormData(allValues) {\n      var main = Object.assign(this.model, allValues.formValue);\n      return _objectSpread({}, main, {\n        // 展开\n        stkCheckBillEntryList: allValues.tablesValue[0].values.concat(allValues.tablesValue[1].values)\n      });\n    },\n    validateError: function validateError(msg) {\n      this.$message.error(msg);\n    },\n    popupCallback: function popupCallback(row) {\n      this.form.setFieldsValue(pick(row, 'billNo', 'billDate', 'warehouseId', 'materialCategoryId', 'checkerId', 'attachment', 'remark', 'billProcStatus', 'approverId', 'flowId', 'isApproved', 'effectiveTime', 'isVoided', 'isClosed', 'sysOrgCode', 'createBy', 'createTime', 'updateBy', 'updateTime'));\n    },\n    handleCheckRangeOk: function handleCheckRangeOk() {\n      this.requestSubTableData(this.url.stkCheckBillEntry.listByRange, this.checkRange, this.stkCheckBillEntryTable);\n      this.lastCheckRange = Object.assign({}, this.checkRange);\n    },\n    onInEntryAdded: function onInEntryAdded(event) {\n      this.onEntryAdded(event);\n      var row = event.row,\n          target = event.target;\n\n      var _target$getValuesSync = target.getValuesSync({\n        validate: false,\n        rowIds: [row.id]\n      }),\n          values = _target$getValuesSync.values;\n\n      var batchNo = this.model.billNo + \"-\" + values[0].entryNo;\n      target.setValues([{\n        rowKey: row.id,\n        values: {\n          batchNo: batchNo,\n          flag: \"1\"\n        }\n      }]);\n    },\n    onValueChange: function onValueChange(event) {\n      var type = event.type,\n          row = event.row,\n          column = event.column,\n          value = event.value,\n          target = event.target; //flag: 是否自动设置的batchNo\n\n      if (row.flag == null || row.flag === \"\") {\n        target.setValues([{\n          rowKey: row.id,\n          values: {\n            flag: \"0\"\n          }\n        }]);\n      }\n\n      if (column.key === \"entryNo\" && (row.flag === \"1\" || row.batchNo === \"\" || row.batchNo == null)) {\n        target.setValues([{\n          rowKey: row.id,\n          values: {\n            batchNo: this.model.billNo + \"-\" + value,\n            flag: \"1\"\n          }\n        }]);\n      } else if (column.key === \"batchNo\") {\n        target.setValues([{\n          rowKey: row.id,\n          values: {\n            flag: \"0\"\n          }\n        }]);\n      } //qty 实存数量 --> profitQty 盈亏数量\n\n\n      if (column.key === 'qty') {\n        var qty = Number(value);\n        var bookQty = Number(row.bookQty);\n\n        if (!isNaN(qty) && !isNaN(bookQty)) {\n          target.setValues([{\n            rowKey: row.id,\n            values: {\n              profitQty: qty - bookQty\n            }\n          }]);\n        }\n      }\n    }\n  }\n};",null]}