{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\components\\jeecg\\JSuperQuery.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\components\\jeecg\\JSuperQuery.vue","mtime":1648374777538},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport moment from 'moment';\nimport * as utils from '@/utils/util';\nimport { mixinDevice } from '@/utils/mixin';\nimport JDate from '@/components/jeecg/JDate.vue';\nimport JSelectDepart from '@/components/jeecgbiz/JSelectDepart';\nimport JSelectMultiUser from '@/components/jeecgbiz/JSelectMultiUser';\nimport JMultiSelectTag from '@/components/dict/JMultiSelectTag';\nimport JAreaLinkage from '@comp/jeecg/JAreaLinkage';\nexport default {\n  name: 'JSuperQuery',\n  mixins: [mixinDevice],\n  components: {\n    JAreaLinkage: JAreaLinkage,\n    JMultiSelectTag: JMultiSelectTag,\n    JDate: JDate,\n    JSelectDepart: JSelectDepart,\n    JSelectMultiUser: JSelectMultiUser\n  },\n  props: {\n    /*\n     fieldList: [{\n        value:'',\n        text:'',\n        type:'',\n        dictCode:'' // 只要 dictCode 有值，无论 type 是什么，都显示为字典下拉框\n     }]\n     type:date datetime int number string\n    * */\n    fieldList: {\n      type: Array,\n      required: true\n    },\n\n    /*\n    * 这个回调函数接收一个数组参数 即查询条件\n    * */\n    callback: {\n      type: String,\n      required: false,\n      default: 'handleSuperQuery'\n    },\n    // 当前是否在加载中\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    // 保存查询条件的唯一 code，通过该 code 区分\n    // 默认为 null，代表以当前路由全路径为区分Code\n    saveCode: {\n      type: String,\n      default: null\n    }\n  },\n  data: function data() {\n    var h = this.$createElement;\n    return {\n      moment: moment,\n      fieldTreeData: [],\n      prompt: {\n        visible: false,\n        value: ''\n      },\n      visible: false,\n      queryParamsModel: [],\n      treeIcon: h(\"a-icon\", {\n        \"attrs\": {\n          \"type\": \"file-text\"\n        }\n      }),\n      // 保存查询条件的treeData\n      saveTreeData: [],\n      // 保存查询条件的前缀名\n      saveCodeBefore: 'JSuperQuerySaved_',\n      // 查询类型，过滤条件匹配（and、or）\n      matchType: 'and',\n      superQueryFlag: false\n    };\n  },\n  computed: {\n    izMobile: function izMobile() {\n      return this.device === 'mobile';\n    },\n    tooltipProps: function tooltipProps() {\n      return this.izMobile ? {\n        visible: false\n      } : {};\n    },\n    fullSaveCode: function fullSaveCode() {\n      var saveCode = this.saveCode;\n\n      if (saveCode == null || saveCode === '') {\n        saveCode = this.$route.fullPath;\n      }\n\n      return this.saveCodeBefore + saveCode;\n    }\n  },\n  watch: {\n    // 当 saveCode 变化时，重新查询已保存的条件\n    fullSaveCode: {\n      immediate: true,\n      handler: function handler() {\n        var _this = this;\n\n        var list = this.$ls.get(this.fullSaveCode);\n\n        if (list instanceof Array) {\n          this.saveTreeData = list.map(function (i) {\n            return _this.renderSaveTreeData(i);\n          });\n        }\n      }\n    },\n    fieldList: {\n      deep: true,\n      immediate: true,\n      handler: function handler(val) {\n        var mainData = [],\n            subData = [];\n        val.forEach(function (item) {\n          var data = _objectSpread({}, item);\n\n          data.label = data.label || data.text;\n          var hasChildren = data.children instanceof Array;\n          data.disabled = hasChildren;\n          data.selectable = !hasChildren;\n\n          if (hasChildren) {\n            data.children = data.children.map(function (item2) {\n              var child = _objectSpread({}, item2);\n\n              child.label = child.label || child.text;\n              child.label = data.label + '-' + child.label;\n              child.value = data.value + ',' + child.value;\n              child.val = '';\n              return child;\n            });\n            data.val = '';\n            subData.push(data);\n          } else {\n            mainData.push(data);\n          }\n        });\n        this.fieldTreeData = mainData.concat(subData);\n      }\n    }\n  },\n  methods: {\n    show: function show() {\n      if (!this.queryParamsModel || this.queryParamsModel.length === 0) {\n        this.resetLine();\n      }\n\n      this.visible = true;\n    },\n    handleOk: function handleOk() {\n      if (!this.isNullArray(this.queryParamsModel)) {\n        var event = {\n          matchType: this.matchType,\n          params: this.removeEmptyObject(this.queryParamsModel)\n        }; // 移动端模式下关闭弹窗\n\n        if (this.izMobile) {\n          this.visible = false;\n        }\n\n        this.emitCallback(event);\n      } else {\n        this.$message.warn(\"不能查询空条件\");\n      }\n    },\n    emitCallback: function emitCallback() {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _event$params = event.params,\n          params = _event$params === void 0 ? [] : _event$params,\n          _event$matchType = event.matchType,\n          matchType = _event$matchType === void 0 ? this.matchType : _event$matchType;\n      this.superQueryFlag = params && params.length > 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = params[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var param = _step.value;\n\n          if (Array.isArray(param.val)) {\n            param.val = param.val.join(',');\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      console.debug('---高级查询参数--->', {\n        params: params,\n        matchType: matchType\n      });\n      this.$emit(this.callback, params, matchType);\n    },\n    handleCancel: function handleCancel() {\n      this.close();\n    },\n    close: function close() {\n      this.$emit('close');\n      this.visible = false;\n    },\n    handleAdd: function handleAdd() {\n      this.addNewLine();\n    },\n    addNewLine: function addNewLine() {\n      this.queryParamsModel.push({\n        rule: 'eq'\n      });\n    },\n    resetLine: function resetLine() {\n      this.superQueryFlag = false;\n      this.queryParamsModel = [];\n      this.addNewLine();\n    },\n    handleDel: function handleDel(index) {\n      this.queryParamsModel.splice(index, 1);\n    },\n    handleSelected: function handleSelected(node, item) {\n      var _node$dataRef = node.dataRef,\n          type = _node$dataRef.type,\n          options = _node$dataRef.options,\n          dictCode = _node$dataRef.dictCode,\n          dictTable = _node$dataRef.dictTable,\n          customReturnField = _node$dataRef.customReturnField,\n          popup = _node$dataRef.popup;\n      item['type'] = type;\n      item['options'] = options;\n      item['dictCode'] = dictCode;\n      item['dictTable'] = dictTable;\n      item['customReturnField'] = customReturnField;\n\n      if (popup) {\n        item['popup'] = popup;\n      }\n\n      this.$set(item, 'val', undefined);\n    },\n    handleOpen: function handleOpen() {\n      this.show();\n    },\n    handleReset: function handleReset() {\n      this.resetLine();\n      this.emitCallback();\n    },\n    handleSave: function handleSave() {\n      var queryParams = this.removeEmptyObject(this.queryParamsModel);\n\n      if (this.isNullArray(queryParams)) {\n        this.$message.warning('空条件不能保存');\n      } else {\n        this.prompt.value = '';\n        this.prompt.visible = true;\n      }\n    },\n    handlePromptOk: function handlePromptOk() {\n      var _this2 = this;\n\n      var value = this.prompt.value;\n\n      if (!value) {\n        this.$message.warning('保存名称不能为空');\n        return;\n      } // 取出查询条件\n\n\n      var records = this.removeEmptyObject(this.queryParamsModel); // 判断有没有重名的\n\n      var filterList = this.saveTreeData.filter(function (i) {\n        return i.originTitle === value;\n      });\n\n      if (filterList.length > 0) {\n        this.$confirm({\n          content: \"\".concat(value, \" \\u5DF2\\u5B58\\u5728\\uFF0C\\u662F\\u5426\\u8986\\u76D6\\uFF1F\"),\n          onOk: function onOk() {\n            _this2.prompt.visible = false;\n            filterList[0].records = records;\n\n            _this2.saveToLocalStore();\n\n            _this2.$message.success('保存成功');\n          }\n        });\n      } else {\n        // 没有重名的，直接添加\n        this.prompt.visible = false; // 添加到树列表中\n\n        this.saveTreeData.push(this.renderSaveTreeData({\n          title: value,\n          matchType: this.matchType,\n          records: records\n        })); // 保存到 LocalStore\n\n        this.saveToLocalStore();\n        this.$message.success('保存成功');\n      }\n    },\n    handleTreeSelect: function handleTreeSelect(idx, event) {\n      if (event.selectedNodes[0]) {\n        var _event$selectedNodes$ = event.selectedNodes[0].data.props,\n            matchType = _event$selectedNodes$.matchType,\n            records = _event$selectedNodes$.records; // 将保存的matchType取出，兼容旧数据，如果没有保存就还是使用原来的\n\n        this.matchType = matchType || this.matchType;\n        this.queryParamsModel = utils.cloneObject(records);\n      }\n    },\n    handleRemoveSaveTreeItem: function handleRemoveSaveTreeItem(event, vNode) {\n      var _this3 = this;\n\n      // 阻止事件冒泡\n      event.stopPropagation();\n      this.$confirm({\n        content: '是否删除当前查询？',\n        onOk: function onOk() {\n          var eventKey = vNode.eventKey;\n\n          _this3.saveTreeData.splice(Number.parseInt(eventKey.substring(2)), 1);\n\n          _this3.saveToLocalStore();\n        }\n      });\n    },\n    // 将查询保存到 LocalStore 里\n    saveToLocalStore: function saveToLocalStore() {\n      var saveValue = this.saveTreeData.map(function (_ref) {\n        var originTitle = _ref.originTitle,\n            matchType = _ref.matchType,\n            records = _ref.records;\n        return {\n          title: originTitle,\n          matchType: matchType,\n          records: records\n        };\n      });\n      this.$ls.set(this.fullSaveCode, saveValue);\n    },\n    isNullArray: function isNullArray(array) {\n      //判断是不是空数组对象\n      if (!array || array.length === 0) {\n        return true;\n      }\n\n      if (array.length === 1) {\n        var obj = array[0];\n\n        if (!obj.field || obj.val == null || obj.val === '' || !obj.rule) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    // 去掉数组中的空对象\n    removeEmptyObject: function removeEmptyObject(arr) {\n      var array = utils.cloneObject(arr);\n\n      for (var i = 0; i < array.length; i++) {\n        var item = array[i];\n\n        if (item == null || Object.keys(item).length <= 0) {\n          array.splice(i--, 1);\n        } else {\n          if (Array.isArray(item.options)) {\n            // 如果有字典属性，就不需要保存 options 了\n            if (item.dictCode) {\n              // 去掉特殊属性\n              delete item.options;\n            }\n          }\n        }\n      }\n\n      return array;\n    },\n\n    /** 渲染保存查询条件的 title（加个删除按钮） */\n    renderSaveTreeData: function renderSaveTreeData(item) {\n      var _this4 = this;\n\n      var h = this.$createElement;\n      item.icon = this.treeIcon;\n      item.originTitle = item['title'];\n\n      item.title = function (fn, vNode) {\n        var originTitle = vNode.dataRef.originTitle;\n        return h(\"div\", {\n          \"class\": \"j-history-tree-title\"\n        }, [h(\"span\", [originTitle]), h(\"div\", {\n          \"class\": \"j-history-tree-title-closer\",\n          \"on\": {\n            \"click\": function click(e) {\n              return _this4.handleRemoveSaveTreeItem(e, vNode);\n            }\n          }\n        }, [h(\"a-icon\", {\n          \"attrs\": {\n            \"type\": \"close-circle\"\n          }\n        })])]);\n      };\n\n      return item;\n    },\n\n    /** 判断是否允许多选 */\n    allowMultiple: function allowMultiple(item) {\n      return item.rule === 'in';\n    },\n    handleRuleChange: function handleRuleChange(item, newValue) {\n      var oldValue = item.rule;\n      this.$set(item, 'rule', newValue); // 上一个规则是否是 in，且type是字典或下拉\n\n      if (oldValue === 'in') {\n        if (item.dictCode || item.options instanceof Array) {\n          var value = item.val;\n\n          if (typeof item.val === 'string') {\n            value = item.val.split(',')[0];\n          } else if (Array.isArray(item.val)) {\n            value = item.val[0];\n          }\n\n          this.$set(item, 'val', value);\n        }\n      }\n    },\n    handleChangeJPopup: function handleChangeJPopup(item, e, values) {\n      item.val = values[item.popup['destFields']];\n    }\n  }\n};",{"version":3,"sources":["JSuperQuery.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n<div class=\"j-super-query-box\">\r\n\r\n  <slot name=\"button\" :isActive=\"superQueryFlag\" :isMobile=\"izMobile\" :open=\"handleOpen\" :reset=\"handleReset\">\r\n    <a-tooltip v-if=\"superQueryFlag\" v-bind=\"tooltipProps\" :mouseLeaveDelay=\"0.2\">\r\n      <!-- begin 不知道为什么不加上这段代码就无法生效 -->\r\n      <span v-show=\"false\">{{tooltipProps}}</span>\r\n      <!-- end 不知道为什么不加上这段代码就无法生效 -->\r\n      <template slot=\"title\">\r\n        <span>已有高级查询条件生效</span>\r\n        <a-divider type=\"vertical\"/>\r\n        <a @click=\"handleReset\">清空</a>\r\n      </template>\r\n      <a-button-group>\r\n        <a-button type=\"primary\" @click=\"handleOpen\">\r\n          <a-icon type=\"appstore\" theme=\"twoTone\" spin/>\r\n          <span>高级查询</span>\r\n        </a-button>\r\n        <a-button v-if=\"izMobile\" type=\"primary\" icon=\"delete\" @click=\"handleReset\"/>\r\n      </a-button-group>\r\n    </a-tooltip>\r\n    <a-button v-else type=\"primary\" icon=\"filter\" @click=\"handleOpen\">高级查询</a-button>\r\n  </slot>\r\n\r\n  <j-modal\r\n    title=\"高级查询构造器\"\r\n    :width=\"1000\"\r\n    :visible=\"visible\"\r\n    @cancel=\"handleCancel\"\r\n    :mask=\"false\"\r\n    :fullscreen=\"izMobile\"\r\n    class=\"j-super-query-modal\"\r\n    style=\"top:5%;max-height: 95%;\"\r\n  >\r\n\r\n    <template slot=\"footer\">\r\n      <div style=\"float: left\">\r\n        <a-button :loading=\"loading\" @click=\"handleReset\">重置</a-button>\r\n        <a-button :loading=\"loading\" @click=\"handleSave\">保存查询条件</a-button>\r\n      </div>\r\n      <a-button :loading=\"loading\" @click=\"handleCancel\">关闭</a-button>\r\n      <a-button :loading=\"loading\" type=\"primary\" @click=\"handleOk\">查询</a-button>\r\n    </template>\r\n\r\n    <a-spin :spinning=\"loading\">\r\n      <a-row>\r\n        <a-col :sm=\"24\" :md=\"24-5\">\r\n\r\n          <a-empty v-if=\"queryParamsModel.length === 0\" style=\"margin-bottom: 12px;\">\r\n            <div slot=\"description\">\r\n              <span>没有任何查询条件</span>\r\n              <a-divider type=\"vertical\"/>\r\n              <a @click=\"handleAdd\">点击新增</a>\r\n            </div>\r\n          </a-empty>\r\n\r\n          <a-form v-else layout=\"inline\">\r\n\r\n            <a-row style=\"margin-bottom: 12px;\">\r\n              <a-col :md=\"12\" :xs=\"24\">\r\n                <a-form-item label=\"过滤条件匹配\" :labelCol=\"{md: 6,xs:24}\" :wrapperCol=\"{md: 18,xs:24}\" style=\"width: 100%;\">\r\n                  <a-select v-model=\"matchType\" :getPopupContainer=\"node=>node.parentNode\" style=\"width: 100%;\">\r\n                    <a-select-option value=\"and\">AND（所有条件都要求匹配）</a-select-option>\r\n                    <a-select-option value=\"or\">OR（条件中的任意一个匹配）</a-select-option>\r\n                  </a-select>\r\n                </a-form-item>\r\n              </a-col>\r\n            </a-row>\r\n\r\n            <a-row type=\"flex\" style=\"margin-bottom:10px\" :gutter=\"16\" v-for=\"(item, index) in queryParamsModel\" :key=\"index\">\r\n\r\n              <a-col :md=\"8\" :xs=\"24\" style=\"margin-bottom: 12px;\">\r\n                <a-tree-select\r\n                  showSearch\r\n                  v-model=\"item.field\"\r\n                  :treeData=\"fieldTreeData\"\r\n                  :dropdownStyle=\"{ maxHeight: '400px', overflow: 'auto' }\"\r\n                  placeholder=\"选择查询字段\"\r\n                  allowClear\r\n                  treeDefaultExpandAll\r\n                  :getPopupContainer=\"node=>node.parentNode\"\r\n                  style=\"width: 100%\"\r\n                  @select=\"(val,option)=>handleSelected(option,item)\"\r\n                >\r\n                </a-tree-select>\r\n              </a-col>\r\n\r\n              <a-col :md=\"4\" :xs=\"24\" style=\"margin-bottom: 12px;\">\r\n                <a-select placeholder=\"匹配规则\" :value=\"item.rule\" :getPopupContainer=\"node=>node.parentNode\" @change=\"handleRuleChange(item,$event)\">\r\n                  <a-select-option value=\"eq\">等于</a-select-option>\r\n                  <a-select-option value=\"like\">包含</a-select-option>\r\n                  <a-select-option value=\"right_like\">以..开始</a-select-option>\r\n                  <a-select-option value=\"left_like\">以..结尾</a-select-option>\r\n                  <a-select-option value=\"in\">在...中</a-select-option>\r\n                  <a-select-option value=\"ne\">不等于</a-select-option>\r\n                  <a-select-option value=\"gt\">大于</a-select-option>\r\n                  <a-select-option value=\"ge\">大于等于</a-select-option>\r\n                  <a-select-option value=\"lt\">小于</a-select-option>\r\n                  <a-select-option value=\"le\">小于等于</a-select-option>\r\n                </a-select>\r\n              </a-col>\r\n\r\n              <a-col :md=\"8\" :xs=\"24\" style=\"margin-bottom: 12px;\">\r\n                <template v-if=\"item.dictCode\">\r\n                  <template v-if=\"item.type === 'table-dict'\">\r\n                    <j-popup\r\n                      v-model=\"item.val\"\r\n                      :code=\"item.dictTable\"\r\n                      :field=\"item.dictCode\"\r\n                      :orgFields=\"item.dictCode\"\r\n                      :destFields=\"item.dictCode\"\r\n                    ></j-popup>\r\n                  </template>\r\n                  <template v-else>\r\n                    <j-multi-select-tag v-show=\"allowMultiple(item)\" v-model=\"item.val\" :dictCode=\"item.dictCode\" placeholder=\"请选择\"/>\r\n                    <j-dict-select-tag v-show=\"!allowMultiple(item)\" v-model=\"item.val\" :dictCode=\"item.dictCode\" placeholder=\"请选择\"/>\r\n                  </template>\r\n                </template>\r\n                <j-popup v-else-if=\"item.type === 'popup'\" :value=\"item.val\" v-bind=\"item.popup\" group-id=\"superQuery\" @input=\"(e,v)=>handleChangeJPopup(item,e,v)\"/>\r\n                <j-select-multi-user\r\n                  v-else-if=\"item.type === 'select-user' || item.type === 'sel_user'\"\r\n                  v-model=\"item.val\"\r\n                  :buttons=\"false\"\r\n                  :multiple=\"false\"\r\n                  placeholder=\"请选择用户\"\r\n                  :returnKeys=\"['id', item.customReturnField || 'username']\"\r\n                />\r\n                <j-select-depart\r\n                  v-else-if=\"item.type === 'select-depart' || item.type === 'sel_depart'\"\r\n                  v-model=\"item.val\"\r\n                  :multi=\"false\"\r\n                  placeholder=\"请选择部门\"\r\n                  :customReturnField=\"item.customReturnField || 'id'\"\r\n                />\r\n                <a-select\r\n                  v-else-if=\"item.options instanceof Array\"\r\n                  v-model=\"item.val\"\r\n                  :options=\"item.options\"\r\n                  allowClear\r\n                  placeholder=\"请选择\"\r\n                  :mode=\"allowMultiple(item)?'multiple':''\"\r\n                />\r\n                <j-area-linkage v-model=\"item.val\" v-else-if=\"item.type==='area-linkage' || item.type==='pca'\" style=\"width: 100%\"/>\r\n                <j-date v-else-if=\" item.type=='date' \" v-model=\"item.val\" placeholder=\"请选择日期\" style=\"width: 100%\"></j-date>\r\n                <j-date v-else-if=\" item.type=='datetime' \" v-model=\"item.val\" placeholder=\"请选择时间\" :show-time=\"true\" date-format=\"YYYY-MM-DD HH:mm:ss\" style=\"width: 100%\"></j-date>\r\n                <a-time-picker v-else-if=\"item.type==='time'\" :value=\"item.val ? moment(item.val,'HH:mm:ss') : null\" format=\"HH:mm:ss\" style=\"width: 100%\" @change=\"(time,value)=>item.val=value\"/>\r\n                <a-input-number v-else-if=\" item.type=='int'||item.type=='number' \" style=\"width: 100%\" placeholder=\"请输入数值\" v-model=\"item.val\"/>\r\n                <a-input v-else v-model=\"item.val\" placeholder=\"请输入值\"/>\r\n              </a-col>\r\n\r\n              <a-col :md=\"4\" :xs=\"0\" style=\"margin-bottom: 12px;\">\r\n                <a-button @click=\"handleAdd\" icon=\"plus\"></a-button>&nbsp;\r\n                <a-button @click=\"handleDel( index )\" icon=\"minus\"></a-button>\r\n              </a-col>\r\n\r\n              <a-col :md=\"0\" :xs=\"24\" style=\"margin-bottom: 12px;text-align: right;\">\r\n                <a-button @click=\"handleAdd\" icon=\"plus\"></a-button>&nbsp;\r\n                <a-button @click=\"handleDel( index )\" icon=\"minus\"></a-button>\r\n              </a-col>\r\n\r\n            </a-row>\r\n\r\n          </a-form>\r\n        </a-col>\r\n        <a-col :sm=\"24\" :md=\"5\">\r\n          <!-- 查询记录 -->\r\n\r\n          <a-card class=\"j-super-query-history-card\" :bordered=\"true\">\r\n            <div slot=\"title\">\r\n              保存的查询\r\n            </div>\r\n\r\n            <a-empty v-if=\"saveTreeData.length === 0\" class=\"j-super-query-history-empty\" description=\"没有保存任何查询\"/>\r\n            <a-tree\r\n              v-else\r\n              class=\"j-super-query-history-tree\"\r\n              showIcon\r\n              :treeData=\"saveTreeData\"\r\n              :selectedKeys=\"[]\"\r\n              @select=\"handleTreeSelect\"\r\n            >\r\n            </a-tree>\r\n          </a-card>\r\n\r\n\r\n        </a-col>\r\n      </a-row>\r\n\r\n\r\n    </a-spin>\r\n\r\n    <a-modal title=\"请输入保存的名称\" :visible=\"prompt.visible\" @cancel=\"prompt.visible=false\" @ok=\"handlePromptOk\">\r\n      <a-input v-model=\"prompt.value\"></a-input>\r\n    </a-modal>\r\n\r\n  </j-modal>\r\n</div>\r\n</template>\r\n\r\n<script>\r\n  import moment from 'moment'\r\n  import * as utils from '@/utils/util'\r\n  import { mixinDevice } from '@/utils/mixin'\r\n  import JDate from '@/components/jeecg/JDate.vue'\r\n  import JSelectDepart from '@/components/jeecgbiz/JSelectDepart'\r\n  import JSelectMultiUser from '@/components/jeecgbiz/JSelectMultiUser'\r\n  import JMultiSelectTag from '@/components/dict/JMultiSelectTag'\r\n  import JAreaLinkage from '@comp/jeecg/JAreaLinkage'\r\n\r\n  export default {\r\n    name: 'JSuperQuery',\r\n    mixins: [mixinDevice],\r\n    components: { JAreaLinkage, JMultiSelectTag, JDate, JSelectDepart, JSelectMultiUser },\r\n    props: {\r\n      /*\r\n       fieldList: [{\r\n          value:'',\r\n          text:'',\r\n          type:'',\r\n          dictCode:'' // 只要 dictCode 有值，无论 type 是什么，都显示为字典下拉框\r\n       }]\r\n       type:date datetime int number string\r\n      * */\r\n      fieldList: {\r\n        type: Array,\r\n        required: true\r\n      },\r\n      /*\r\n      * 这个回调函数接收一个数组参数 即查询条件\r\n      * */\r\n      callback: {\r\n        type: String,\r\n        required: false,\r\n        default: 'handleSuperQuery'\r\n      },\r\n\r\n      // 当前是否在加载中\r\n      loading: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n\r\n      // 保存查询条件的唯一 code，通过该 code 区分\r\n      // 默认为 null，代表以当前路由全路径为区分Code\r\n      saveCode: {\r\n        type: String,\r\n        default: null\r\n      }\r\n\r\n    },\r\n    data() {\r\n      return {\r\n        moment,\r\n        fieldTreeData: [],\r\n\r\n        prompt: {\r\n          visible: false,\r\n          value: ''\r\n        },\r\n\r\n        visible: false,\r\n        queryParamsModel: [],\r\n        treeIcon: <a-icon type=\"file-text\"/>,\r\n        // 保存查询条件的treeData\r\n        saveTreeData: [],\r\n        // 保存查询条件的前缀名\r\n        saveCodeBefore: 'JSuperQuerySaved_',\r\n        // 查询类型，过滤条件匹配（and、or）\r\n        matchType: 'and',\r\n        superQueryFlag: false,\r\n      }\r\n    },\r\n    computed: {\r\n      izMobile() {\r\n        return this.device === 'mobile'\r\n      },\r\n      tooltipProps() {\r\n        return this.izMobile ? { visible: false } : {}\r\n      },\r\n      fullSaveCode() {\r\n        let saveCode = this.saveCode\r\n        if (saveCode == null || saveCode === '') {\r\n          saveCode = this.$route.fullPath\r\n        }\r\n        return this.saveCodeBefore + saveCode\r\n      },\r\n    },\r\n    watch: {\r\n      // 当 saveCode 变化时，重新查询已保存的条件\r\n      fullSaveCode: {\r\n        immediate: true,\r\n        handler() {\r\n          let list = this.$ls.get(this.fullSaveCode)\r\n          if (list instanceof Array) {\r\n            this.saveTreeData = list.map(i => this.renderSaveTreeData(i))\r\n          }\r\n        }\r\n      },\r\n      fieldList: {\r\n        deep: true,\r\n        immediate: true,\r\n        handler(val) {\r\n          let mainData = [], subData = []\r\n          val.forEach(item => {\r\n            let data = { ...item }\r\n            data.label = data.label || data.text\r\n            let hasChildren = (data.children instanceof Array)\r\n            data.disabled = hasChildren\r\n            data.selectable = !hasChildren\r\n            if (hasChildren) {\r\n              data.children = data.children.map(item2 => {\r\n                let child = { ...item2 }\r\n                child.label = child.label || child.text\r\n                child.label = data.label + '-' + child.label\r\n                child.value = data.value + ',' + child.value\r\n                child.val = ''\r\n                return child\r\n              })\r\n              data.val = ''\r\n              subData.push(data)\r\n            } else {\r\n              mainData.push(data)\r\n            }\r\n          })\r\n          this.fieldTreeData = mainData.concat(subData)\r\n        }\r\n      }\r\n    },\r\n\r\n    methods: {\r\n      show() {\r\n        if (!this.queryParamsModel || this.queryParamsModel.length === 0) {\r\n          this.resetLine()\r\n        }\r\n        this.visible = true\r\n      },\r\n      handleOk() {\r\n        if (!this.isNullArray(this.queryParamsModel)) {\r\n          let event = {\r\n            matchType: this.matchType,\r\n            params: this.removeEmptyObject(this.queryParamsModel)\r\n          }\r\n          // 移动端模式下关闭弹窗\r\n          if (this.izMobile) {\r\n            this.visible = false\r\n          }\r\n          this.emitCallback(event)\r\n        } else {\r\n          this.$message.warn(\"不能查询空条件\")\r\n        }\r\n      },\r\n      emitCallback(event = {}) {\r\n        let { params = [], matchType = this.matchType } = event\r\n        this.superQueryFlag = (params && params.length > 0)\r\n        for (let param of params) {\r\n          if (Array.isArray(param.val)) {\r\n            param.val = param.val.join(',')\r\n          }\r\n        }\r\n        console.debug('---高级查询参数--->', { params, matchType })\r\n        this.$emit(this.callback, params, matchType)\r\n      },\r\n      handleCancel() {\r\n        this.close()\r\n      },\r\n      close() {\r\n        this.$emit('close')\r\n        this.visible = false\r\n      },\r\n      handleAdd() {\r\n        this.addNewLine()\r\n      },\r\n      addNewLine() {\r\n        this.queryParamsModel.push({ rule: 'eq' })\r\n      },\r\n      resetLine() {\r\n        this.superQueryFlag = false\r\n        this.queryParamsModel = []\r\n        this.addNewLine()\r\n      },\r\n      handleDel(index) {\r\n        this.queryParamsModel.splice(index, 1)\r\n      },\r\n      handleSelected(node, item) {\r\n        let { type, options, dictCode, dictTable, customReturnField, popup } = node.dataRef\r\n        item['type'] = type\r\n        item['options'] = options\r\n        item['dictCode'] = dictCode\r\n        item['dictTable'] = dictTable\r\n        item['customReturnField'] = customReturnField\r\n        if (popup) {\r\n          item['popup'] = popup\r\n        }\r\n        this.$set(item, 'val', undefined)\r\n      },\r\n      handleOpen() {\r\n        this.show()\r\n      },\r\n      handleReset() {\r\n        this.resetLine()\r\n        this.emitCallback()\r\n      },\r\n      handleSave() {\r\n        let queryParams = this.removeEmptyObject(this.queryParamsModel)\r\n        if (this.isNullArray(queryParams)) {\r\n          this.$message.warning('空条件不能保存')\r\n        } else {\r\n          this.prompt.value = ''\r\n          this.prompt.visible = true\r\n        }\r\n      },\r\n      handlePromptOk() {\r\n        let { value } = this.prompt\r\n        if(!value){\r\n          this.$message.warning('保存名称不能为空')\r\n          return\r\n        }\r\n        // 取出查询条件\r\n        let records = this.removeEmptyObject(this.queryParamsModel)\r\n        // 判断有没有重名的\r\n        let filterList = this.saveTreeData.filter(i => i.originTitle === value)\r\n        if (filterList.length > 0) {\r\n          this.$confirm({\r\n            content: `${value} 已存在，是否覆盖？`,\r\n            onOk: () => {\r\n              this.prompt.visible = false\r\n              filterList[0].records = records\r\n              this.saveToLocalStore()\r\n              this.$message.success('保存成功')\r\n            }\r\n          })\r\n        } else {\r\n          // 没有重名的，直接添加\r\n          this.prompt.visible = false\r\n          // 添加到树列表中\r\n          this.saveTreeData.push(this.renderSaveTreeData({\r\n            title: value,\r\n            matchType: this.matchType,\r\n            records: records\r\n          }))\r\n          // 保存到 LocalStore\r\n          this.saveToLocalStore()\r\n          this.$message.success('保存成功')\r\n        }\r\n      },\r\n      handleTreeSelect(idx, event) {\r\n        if (event.selectedNodes[0]) {\r\n          let { matchType, records } = event.selectedNodes[0].data.props\r\n          // 将保存的matchType取出，兼容旧数据，如果没有保存就还是使用原来的\r\n          this.matchType = matchType || this.matchType\r\n          this.queryParamsModel = utils.cloneObject(records)\r\n        }\r\n      },\r\n      handleRemoveSaveTreeItem(event, vNode) {\r\n        // 阻止事件冒泡\r\n        event.stopPropagation()\r\n\r\n        this.$confirm({\r\n          content: '是否删除当前查询？',\r\n          onOk: () => {\r\n            let { eventKey } = vNode\r\n            this.saveTreeData.splice(Number.parseInt(eventKey.substring(2)), 1)\r\n            this.saveToLocalStore()\r\n          },\r\n        })\r\n      },\r\n\r\n      // 将查询保存到 LocalStore 里\r\n      saveToLocalStore() {\r\n        let saveValue = this.saveTreeData.map(({ originTitle, matchType, records }) => ({ title: originTitle, matchType, records }))\r\n        this.$ls.set(this.fullSaveCode, saveValue)\r\n      },\r\n\r\n      isNullArray(array) {\r\n        //判断是不是空数组对象\r\n        if (!array || array.length === 0) {\r\n          return true\r\n        }\r\n        if (array.length === 1) {\r\n          let obj = array[0]\r\n          if (!obj.field || (obj.val == null || obj.val === '') || !obj.rule) {\r\n            return true\r\n          }\r\n        }\r\n        return false\r\n      },\r\n      // 去掉数组中的空对象\r\n      removeEmptyObject(arr) {\r\n        let array = utils.cloneObject(arr)\r\n        for (let i = 0; i < array.length; i++) {\r\n          let item = array[i]\r\n          if (item == null || Object.keys(item).length <= 0) {\r\n            array.splice(i--, 1)\r\n          } else {\r\n            if (Array.isArray(item.options)) {\r\n              // 如果有字典属性，就不需要保存 options 了\r\n              if (item.dictCode) {\r\n                // 去掉特殊属性\r\n                delete item.options\r\n              }\r\n            }\r\n          }\r\n        }\r\n        return array\r\n      },\r\n\r\n      /** 渲染保存查询条件的 title（加个删除按钮） */\r\n      renderSaveTreeData(item) {\r\n        item.icon = this.treeIcon\r\n        item.originTitle = item['title']\r\n        item.title = (fn, vNode) => {\r\n          let { originTitle } = vNode.dataRef\r\n          return (\r\n            <div class=\"j-history-tree-title\">\r\n              <span>{originTitle}</span>\r\n\r\n              <div class=\"j-history-tree-title-closer\" onClick={e => this.handleRemoveSaveTreeItem(e, vNode)}>\r\n                <a-icon type=\"close-circle\"/>\r\n              </div>\r\n            </div>\r\n          )\r\n        }\r\n        return item\r\n      },\r\n\r\n      /** 判断是否允许多选 */\r\n      allowMultiple(item) {\r\n        return item.rule === 'in'\r\n      },\r\n\r\n      handleRuleChange(item, newValue) {\r\n        let oldValue = item.rule\r\n        this.$set(item, 'rule', newValue)\r\n        // 上一个规则是否是 in，且type是字典或下拉\r\n        if (oldValue === 'in') {\r\n          if (item.dictCode || item.options instanceof Array) {\r\n            let value = item.val\r\n            if (typeof item.val === 'string') {\r\n              value = item.val.split(',')[0]\r\n            } else if (Array.isArray(item.val)) {\r\n              value = item.val[0]\r\n            }\r\n            this.$set(item, 'val', value)\r\n          }\r\n        }\r\n      },\r\n\r\n      handleChangeJPopup(item, e, values) {\r\n        item.val = values[item.popup['destFields']]\r\n      },\r\n\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n\r\n  .j-super-query-box {\r\n    display: inline-block;\r\n  }\r\n\r\n  .j-super-query-modal {\r\n\r\n    .j-super-query-history-card {\r\n      /deep/ .ant-card-body,\r\n      /deep/ .ant-card-head-title {\r\n        padding: 0;\r\n      }\r\n\r\n      /deep/ .ant-card-head {\r\n        padding: 4px 8px;\r\n        min-height: initial;\r\n      }\r\n    }\r\n\r\n    .j-super-query-history-empty {\r\n      /deep/ .ant-empty-image {\r\n        height: 80px;\r\n        line-height: 80px;\r\n        margin-bottom: 0;\r\n      }\r\n\r\n      /deep/ img {\r\n        width: 80px;\r\n        height: 65px;\r\n      }\r\n\r\n      /deep/ .ant-empty-description {\r\n        color: #afafaf;\r\n        margin: 8px 0;\r\n      }\r\n    }\r\n\r\n    .j-super-query-history-tree {\r\n\r\n      .j-history-tree-title {\r\n        width: calc(100% - 24px);\r\n        position: relative;\r\n        display: inline-block;\r\n\r\n        &-closer {\r\n          color: #999999;\r\n          position: absolute;\r\n          top: 0;\r\n          right: 0;\r\n          width: 24px;\r\n          height: 24px;\r\n          text-align: center;\r\n          opacity: 0;\r\n          transition: opacity 0.3s, color 0.3s;\r\n\r\n          &:hover {\r\n            color: #666666;\r\n          }\r\n\r\n          &:active {\r\n            color: #333333;\r\n          }\r\n        }\r\n\r\n        &:hover {\r\n          .j-history-tree-title-closer {\r\n            opacity: 1;\r\n          }\r\n        }\r\n\r\n      }\r\n\r\n      /deep/ .ant-tree-switcher {\r\n        display: none;\r\n      }\r\n\r\n      /deep/ .ant-tree-node-content-wrapper {\r\n        width: 100%;\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n</style>"],"sourceRoot":"src/components/jeecg"}]}