{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\ideaworkspace\\jxc-front-end\\src\\views\\modules\\online\\cgform\\auto\\ButtonExpHandler.js","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\views\\modules\\online\\cgform\\auto\\ButtonExpHandler.js","mtime":1648374778125},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1648365119872}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n * online 自定义按钮表达式处理类\r\n */\nvar ButtonExpHandler = /*#__PURE__*/function () {\n  /**\r\n   * 构造器\r\n   * @param express\r\n   */\n  function ButtonExpHandler(express, record) {\n    _classCallCheck(this, ButtonExpHandler);\n\n    this._express = express;\n    this._record = record;\n  }\n\n  _createClass(ButtonExpHandler, [{\n    key: \"show\",\n    get: function get() {\n      if (!this._express || this._express == '') {\n        return true;\n      }\n\n      var arr = this._express.split('#'); //获取字段值\n\n\n      var fieldValue = this._record[arr[0]]; //获取表达式\n\n      var exp = arr[1].toLowerCase(); //判断表达式\n\n      if (exp === 'eq') {\n        return fieldValue == arr[2];\n      } else if (exp === 'ne') {\n        return !(fieldValue == arr[2]);\n      } else if (exp === 'empty') {\n        if (arr[2] === 'true' || arr[2] === true) {\n          return !fieldValue || fieldValue == '';\n        } else {\n          return fieldValue && fieldValue.length > 0;\n        }\n      } else if (exp === 'in') {\n        var arr2 = arr[2].split(',');\n        return arr2.indexOf(String(fieldValue)) >= 0;\n      }\n\n      return false;\n    }\n  }]);\n\n  return ButtonExpHandler;\n}();\n\nexport { ButtonExpHandler as default };",{"version":3,"sources":["D:/ideaworkspace/jxc-front-end/src/views/modules/online/cgform/auto/ButtonExpHandler.js"],"names":["ButtonExpHandler","express","record","_express","_record","arr","split","fieldValue","exp","toLowerCase","length","arr2","indexOf","String"],"mappings":";;;;;;AAAA;;;IAGqBA,gB;AACnB;;;;AAIA,4BAAYC,OAAZ,EAAoBC,MAApB,EAA4B;AAAA;;AAC1B,SAAKC,QAAL,GAAgBF,OAAhB;AACA,SAAKG,OAAL,GAAeF,MAAf;AACD;;;;wBAEU;AACT,UAAG,CAAC,KAAKC,QAAN,IAAkB,KAAKA,QAAL,IAAe,EAApC,EAAuC;AACrC,eAAO,IAAP;AACD;;AACD,UAAIE,GAAG,GAAG,KAAKF,QAAL,CAAcG,KAAd,CAAoB,GAApB,CAAV,CAJS,CAKT;;;AACA,UAAIC,UAAU,GAAG,KAAKH,OAAL,CAAaC,GAAG,CAAC,CAAD,CAAhB,CAAjB,CANS,CAOT;;AACA,UAAIG,GAAG,GAAGH,GAAG,CAAC,CAAD,CAAH,CAAOI,WAAP,EAAV,CARS,CAST;;AACA,UAAGD,GAAG,KAAK,IAAX,EAAgB;AACd,eAAOD,UAAU,IAAIF,GAAG,CAAC,CAAD,CAAxB;AACD,OAFD,MAEM,IAAGG,GAAG,KAAK,IAAX,EAAgB;AACpB,eAAO,EAAED,UAAU,IAAIF,GAAG,CAAC,CAAD,CAAnB,CAAP;AACD,OAFK,MAEA,IAAGG,GAAG,KAAK,OAAX,EAAmB;AACvB,YAAGH,GAAG,CAAC,CAAD,CAAH,KAAS,MAAT,IAAmBA,GAAG,CAAC,CAAD,CAAH,KAAS,IAA/B,EAAoC;AAClC,iBAAO,CAACE,UAAD,IAAeA,UAAU,IAAE,EAAlC;AACD,SAFD,MAEK;AACH,iBAAOA,UAAU,IAAIA,UAAU,CAACG,MAAX,GAAkB,CAAvC;AACD;AACF,OANK,MAMA,IAAGF,GAAG,KAAK,IAAX,EAAgB;AACpB,YAAIG,IAAI,GAAGN,GAAG,CAAC,CAAD,CAAH,CAAOC,KAAP,CAAa,GAAb,CAAX;AACA,eAAOK,IAAI,CAACC,OAAL,CAAaC,MAAM,CAACN,UAAD,CAAnB,KAAkC,CAAzC;AACD;;AACD,aAAO,KAAP;AACD;;;;;;SAnCkBP,gB","sourcesContent":["/**\r\n * online 自定义按钮表达式处理类\r\n */\r\nexport default class ButtonExpHandler {\r\n  /**\r\n   * 构造器\r\n   * @param express\r\n   */\r\n  constructor(express,record) {\r\n    this._express = express;\r\n    this._record = record;\r\n  }\r\n\r\n  get show() {\r\n    if(!this._express || this._express==''){\r\n      return true;\r\n    }\r\n    let arr = this._express.split('#');\r\n    //获取字段值\r\n    let fieldValue = this._record[arr[0]];\r\n    //获取表达式\r\n    let exp = arr[1].toLowerCase();\r\n    //判断表达式\r\n    if(exp === 'eq'){\r\n      return fieldValue == arr[2];\r\n    }else if(exp === 'ne'){\r\n      return !(fieldValue == arr[2]);\r\n    }else if(exp === 'empty'){\r\n      if(arr[2]==='true' || arr[2]===true){\r\n        return !fieldValue || fieldValue=='';\r\n      }else{\r\n        return fieldValue && fieldValue.length>0\r\n      }\r\n    }else if(exp === 'in'){\r\n      let arr2 = arr[2].split(',');\r\n      return arr2.indexOf(String(fieldValue))>=0;\r\n    }\r\n    return false;\r\n  }\r\n\r\n}"]}]}