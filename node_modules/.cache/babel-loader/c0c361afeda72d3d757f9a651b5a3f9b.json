{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\ideaworkspace\\jxc-front-end\\src\\mixins\\JEditableTableMixin.js","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\mixins\\JEditableTableMixin.js","mtime":1648374777574},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1648365119872}],"contextDependencies":[],"result":["import JEditableTable from '@/components/jeecg/JEditableTable';\nimport { VALIDATE_NO_PASSED, getRefPromise, validateFormAndTables } from '@/utils/JEditableTableUtil';\nimport { httpAction, getAction } from '@/api/manage';\nexport var JEditableTableMixin = {\n  components: {\n    JEditableTable: JEditableTable\n  },\n  data: function data() {\n    return {\n      title: '操作',\n      visible: false,\n      form: this.$form.createForm(this),\n      confirmLoading: false,\n      model: {},\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 6\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 18\n        }\n      }\n    };\n  },\n  methods: {\n    /** 获取所有的editableTable实例 */\n    getAllTable: function getAllTable() {\n      var _this = this;\n\n      if (!(this.refKeys instanceof Array)) {\n        throw this.throwNotArray('refKeys');\n      }\n\n      var values = this.refKeys.map(function (key) {\n        return getRefPromise(_this, key);\n      });\n      return Promise.all(values);\n    },\n\n    /** 遍历所有的JEditableTable实例 */\n    eachAllTable: function eachAllTable(callback) {\n      // 开始遍历\n      this.getAllTable().then(function (tables) {\n        tables.forEach(function (item, index) {\n          if (typeof callback === 'function') {\n            callback(item, index);\n          }\n        });\n      });\n    },\n\n    /** 当点击新增按钮时调用此方法 */\n    add: function add() {\n      if (typeof this.addBefore === 'function') this.addBefore(); // 默认新增空数据\n\n      var rowNum = this.addDefaultRowNum;\n\n      if (typeof rowNum !== 'number') {\n        rowNum = 1;\n        console.warn('由于你没有在 data 中定义 addDefaultRowNum 或 addDefaultRowNum 不是数字，所以默认添加一条空数据，如果不想默认添加空数据，请将定义 addDefaultRowNum 为 0');\n      }\n\n      this.eachAllTable(function (item) {\n        item.add(rowNum);\n      });\n      if (typeof this.addAfter === 'function') this.addAfter(this.model);\n      this.edit({});\n    },\n\n    /** 当点击了编辑（修改）按钮时调用此方法 */\n    edit: function edit(record) {\n      if (typeof this.editBefore === 'function') this.editBefore(record);\n      this.visible = true;\n      this.activeKey = this.refKeys[0];\n      this.form.resetFields();\n      this.model = Object.assign({}, record);\n      if (typeof this.editAfter === 'function') this.editAfter(this.model);\n    },\n\n    /** 关闭弹窗，并将所有JEditableTable实例回归到初始状态 */\n    close: function close() {\n      this.visible = false;\n      this.eachAllTable(function (item) {\n        item.initialize();\n      });\n      this.$emit('close');\n    },\n\n    /** 查询某个tab的数据 */\n    requestSubTableData: function requestSubTableData(url, params, tab, success) {\n      tab.loading = true;\n      getAction(url, params).then(function (res) {\n        var result = res.result;\n        var dataSource = [];\n\n        if (result) {\n          if (Array.isArray(result)) {\n            dataSource = result;\n          } else if (Array.isArray(result.records)) {\n            dataSource = result.records;\n          }\n        }\n\n        tab.dataSource = dataSource;\n        typeof success === 'function' ? success(res) : '';\n      }).finally(function () {\n        tab.loading = false;\n      });\n    },\n\n    /** 发起请求，自动判断是执行新增还是修改操作 */\n    request: function request(formData) {\n      var _this2 = this;\n\n      var url = this.url.add,\n          method = 'post';\n\n      if (this.model.id) {\n        url = this.url.edit;\n        method = 'put';\n      }\n\n      this.confirmLoading = true;\n      httpAction(url, formData, method).then(function (res) {\n        if (res.success) {\n          _this2.$message.success(res.message);\n\n          _this2.$emit('ok');\n\n          _this2.close();\n        } else {\n          _this2.$message.warning(res.message);\n        }\n      }).finally(function () {\n        _this2.confirmLoading = false;\n      });\n    },\n\n    /* --- handle 事件 --- */\n\n    /** ATab 选项卡切换事件 */\n    handleChangeTabs: function handleChangeTabs(key) {\n      // 自动重置scrollTop状态，防止出现白屏\n      getRefPromise(this, key).then(function (editableTable) {\n        editableTable.resetScrollTop();\n      });\n    },\n\n    /** 关闭按钮点击事件 */\n    handleCancel: function handleCancel() {\n      this.close();\n    },\n\n    /** 确定按钮点击事件 */\n    handleOk: function handleOk() {\n      var _this3 = this;\n\n      /** 触发表单验证 */\n      this.getAllTable().then(function (tables) {\n        /** 一次性验证主表和所有的次表 */\n        return validateFormAndTables(_this3.form, tables);\n      }).then(function (allValues) {\n        if (typeof _this3.classifyIntoFormData !== 'function') {\n          throw _this3.throwNotFunction('classifyIntoFormData');\n        }\n\n        var formData = _this3.classifyIntoFormData(allValues); // 发起请求\n\n\n        return _this3.request(formData);\n      }).catch(function (e) {\n        if (e.error === VALIDATE_NO_PASSED) {\n          // 如果有未通过表单验证的子表，就自动跳转到它所在的tab\n          _this3.activeKey = e.index == null ? _this3.activeKey : _this3.refKeys[e.index];\n        } else {\n          console.error(e);\n        }\n      });\n    },\n\n    /* --- throw --- */\n\n    /** not a function */\n    throwNotFunction: function throwNotFunction(name) {\n      return \"\".concat(name, \" \\u672A\\u5B9A\\u4E49\\u6216\\u4E0D\\u662F\\u4E00\\u4E2A\\u51FD\\u6570\");\n    },\n\n    /** not a array */\n    throwNotArray: function throwNotArray(name) {\n      return \"\".concat(name, \" \\u672A\\u5B9A\\u4E49\\u6216\\u4E0D\\u662F\\u4E00\\u4E2A\\u6570\\u7EC4\");\n    }\n  }\n};",null]}