{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\components\\jeecg\\JSuperQuery.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\components\\jeecg\\JSuperQuery.vue","mtime":1648374777538},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport moment from 'moment';\nimport * as utils from '@/utils/util';\nimport { mixinDevice } from '@/utils/mixin';\nimport JDate from '@/components/jeecg/JDate.vue';\nimport JSelectDepart from '@/components/jeecgbiz/JSelectDepart';\nimport JSelectMultiUser from '@/components/jeecgbiz/JSelectMultiUser';\nimport JMultiSelectTag from '@/components/dict/JMultiSelectTag';\nimport JAreaLinkage from '@comp/jeecg/JAreaLinkage';\nexport default {\n  name: 'JSuperQuery',\n  mixins: [mixinDevice],\n  components: {\n    JAreaLinkage: JAreaLinkage,\n    JMultiSelectTag: JMultiSelectTag,\n    JDate: JDate,\n    JSelectDepart: JSelectDepart,\n    JSelectMultiUser: JSelectMultiUser\n  },\n  props: {\n    /*\n     fieldList: [{\n        value:'',\n        text:'',\n        type:'',\n        dictCode:'' // 只要 dictCode 有值，无论 type 是什么，都显示为字典下拉框\n     }]\n     type:date datetime int number string\n    * */\n    fieldList: {\n      type: Array,\n      required: true\n    },\n\n    /*\n    * 这个回调函数接收一个数组参数 即查询条件\n    * */\n    callback: {\n      type: String,\n      required: false,\n      default: 'handleSuperQuery'\n    },\n    // 当前是否在加载中\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    // 保存查询条件的唯一 code，通过该 code 区分\n    // 默认为 null，代表以当前路由全路径为区分Code\n    saveCode: {\n      type: String,\n      default: null\n    }\n  },\n  data: function data() {\n    var h = this.$createElement;\n    return {\n      moment: moment,\n      fieldTreeData: [],\n      prompt: {\n        visible: false,\n        value: ''\n      },\n      visible: false,\n      queryParamsModel: [],\n      treeIcon: h(\"a-icon\", {\n        \"attrs\": {\n          \"type\": \"file-text\"\n        }\n      }),\n      // 保存查询条件的treeData\n      saveTreeData: [],\n      // 保存查询条件的前缀名\n      saveCodeBefore: 'JSuperQuerySaved_',\n      // 查询类型，过滤条件匹配（and、or）\n      matchType: 'and',\n      superQueryFlag: false\n    };\n  },\n  computed: {\n    izMobile: function izMobile() {\n      return this.device === 'mobile';\n    },\n    tooltipProps: function tooltipProps() {\n      return this.izMobile ? {\n        visible: false\n      } : {};\n    },\n    fullSaveCode: function fullSaveCode() {\n      var saveCode = this.saveCode;\n\n      if (saveCode == null || saveCode === '') {\n        saveCode = this.$route.fullPath;\n      }\n\n      return this.saveCodeBefore + saveCode;\n    }\n  },\n  watch: {\n    // 当 saveCode 变化时，重新查询已保存的条件\n    fullSaveCode: {\n      immediate: true,\n      handler: function handler() {\n        var _this = this;\n\n        var list = this.$ls.get(this.fullSaveCode);\n\n        if (list instanceof Array) {\n          this.saveTreeData = list.map(function (i) {\n            return _this.renderSaveTreeData(i);\n          });\n        }\n      }\n    },\n    fieldList: {\n      deep: true,\n      immediate: true,\n      handler: function handler(val) {\n        var mainData = [],\n            subData = [];\n        val.forEach(function (item) {\n          var data = _objectSpread({}, item);\n\n          data.label = data.label || data.text;\n          var hasChildren = data.children instanceof Array;\n          data.disabled = hasChildren;\n          data.selectable = !hasChildren;\n\n          if (hasChildren) {\n            data.children = data.children.map(function (item2) {\n              var child = _objectSpread({}, item2);\n\n              child.label = child.label || child.text;\n              child.label = data.label + '-' + child.label;\n              child.value = data.value + ',' + child.value;\n              child.val = '';\n              return child;\n            });\n            data.val = '';\n            subData.push(data);\n          } else {\n            mainData.push(data);\n          }\n        });\n        this.fieldTreeData = mainData.concat(subData);\n      }\n    }\n  },\n  methods: {\n    show: function show() {\n      if (!this.queryParamsModel || this.queryParamsModel.length === 0) {\n        this.resetLine();\n      }\n\n      this.visible = true;\n    },\n    handleOk: function handleOk() {\n      if (!this.isNullArray(this.queryParamsModel)) {\n        var event = {\n          matchType: this.matchType,\n          params: this.removeEmptyObject(this.queryParamsModel)\n        }; // 移动端模式下关闭弹窗\n\n        if (this.izMobile) {\n          this.visible = false;\n        }\n\n        this.emitCallback(event);\n      } else {\n        this.$message.warn(\"不能查询空条件\");\n      }\n    },\n    emitCallback: function emitCallback() {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _event$params = event.params,\n          params = _event$params === void 0 ? [] : _event$params,\n          _event$matchType = event.matchType,\n          matchType = _event$matchType === void 0 ? this.matchType : _event$matchType;\n      this.superQueryFlag = params && params.length > 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = params[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var param = _step.value;\n\n          if (Array.isArray(param.val)) {\n            param.val = param.val.join(',');\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      console.debug('---高级查询参数--->', {\n        params: params,\n        matchType: matchType\n      });\n      this.$emit(this.callback, params, matchType);\n    },\n    handleCancel: function handleCancel() {\n      this.close();\n    },\n    close: function close() {\n      this.$emit('close');\n      this.visible = false;\n    },\n    handleAdd: function handleAdd() {\n      this.addNewLine();\n    },\n    addNewLine: function addNewLine() {\n      this.queryParamsModel.push({\n        rule: 'eq'\n      });\n    },\n    resetLine: function resetLine() {\n      this.superQueryFlag = false;\n      this.queryParamsModel = [];\n      this.addNewLine();\n    },\n    handleDel: function handleDel(index) {\n      this.queryParamsModel.splice(index, 1);\n    },\n    handleSelected: function handleSelected(node, item) {\n      var _node$dataRef = node.dataRef,\n          type = _node$dataRef.type,\n          options = _node$dataRef.options,\n          dictCode = _node$dataRef.dictCode,\n          dictTable = _node$dataRef.dictTable,\n          customReturnField = _node$dataRef.customReturnField,\n          popup = _node$dataRef.popup;\n      item['type'] = type;\n      item['options'] = options;\n      item['dictCode'] = dictCode;\n      item['dictTable'] = dictTable;\n      item['customReturnField'] = customReturnField;\n\n      if (popup) {\n        item['popup'] = popup;\n      }\n\n      this.$set(item, 'val', undefined);\n    },\n    handleOpen: function handleOpen() {\n      this.show();\n    },\n    handleReset: function handleReset() {\n      this.resetLine();\n      this.emitCallback();\n    },\n    handleSave: function handleSave() {\n      var queryParams = this.removeEmptyObject(this.queryParamsModel);\n\n      if (this.isNullArray(queryParams)) {\n        this.$message.warning('空条件不能保存');\n      } else {\n        this.prompt.value = '';\n        this.prompt.visible = true;\n      }\n    },\n    handlePromptOk: function handlePromptOk() {\n      var _this2 = this;\n\n      var value = this.prompt.value;\n\n      if (!value) {\n        this.$message.warning('保存名称不能为空');\n        return;\n      } // 取出查询条件\n\n\n      var records = this.removeEmptyObject(this.queryParamsModel); // 判断有没有重名的\n\n      var filterList = this.saveTreeData.filter(function (i) {\n        return i.originTitle === value;\n      });\n\n      if (filterList.length > 0) {\n        this.$confirm({\n          content: \"\".concat(value, \" \\u5DF2\\u5B58\\u5728\\uFF0C\\u662F\\u5426\\u8986\\u76D6\\uFF1F\"),\n          onOk: function onOk() {\n            _this2.prompt.visible = false;\n            filterList[0].records = records;\n\n            _this2.saveToLocalStore();\n\n            _this2.$message.success('保存成功');\n          }\n        });\n      } else {\n        // 没有重名的，直接添加\n        this.prompt.visible = false; // 添加到树列表中\n\n        this.saveTreeData.push(this.renderSaveTreeData({\n          title: value,\n          matchType: this.matchType,\n          records: records\n        })); // 保存到 LocalStore\n\n        this.saveToLocalStore();\n        this.$message.success('保存成功');\n      }\n    },\n    handleTreeSelect: function handleTreeSelect(idx, event) {\n      if (event.selectedNodes[0]) {\n        var _event$selectedNodes$ = event.selectedNodes[0].data.props,\n            matchType = _event$selectedNodes$.matchType,\n            records = _event$selectedNodes$.records; // 将保存的matchType取出，兼容旧数据，如果没有保存就还是使用原来的\n\n        this.matchType = matchType || this.matchType;\n        this.queryParamsModel = utils.cloneObject(records);\n      }\n    },\n    handleRemoveSaveTreeItem: function handleRemoveSaveTreeItem(event, vNode) {\n      var _this3 = this;\n\n      // 阻止事件冒泡\n      event.stopPropagation();\n      this.$confirm({\n        content: '是否删除当前查询？',\n        onOk: function onOk() {\n          var eventKey = vNode.eventKey;\n\n          _this3.saveTreeData.splice(Number.parseInt(eventKey.substring(2)), 1);\n\n          _this3.saveToLocalStore();\n        }\n      });\n    },\n    // 将查询保存到 LocalStore 里\n    saveToLocalStore: function saveToLocalStore() {\n      var saveValue = this.saveTreeData.map(function (_ref) {\n        var originTitle = _ref.originTitle,\n            matchType = _ref.matchType,\n            records = _ref.records;\n        return {\n          title: originTitle,\n          matchType: matchType,\n          records: records\n        };\n      });\n      this.$ls.set(this.fullSaveCode, saveValue);\n    },\n    isNullArray: function isNullArray(array) {\n      //判断是不是空数组对象\n      if (!array || array.length === 0) {\n        return true;\n      }\n\n      if (array.length === 1) {\n        var obj = array[0];\n\n        if (!obj.field || obj.val == null || obj.val === '' || !obj.rule) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    // 去掉数组中的空对象\n    removeEmptyObject: function removeEmptyObject(arr) {\n      var array = utils.cloneObject(arr);\n\n      for (var i = 0; i < array.length; i++) {\n        var item = array[i];\n\n        if (item == null || Object.keys(item).length <= 0) {\n          array.splice(i--, 1);\n        } else {\n          if (Array.isArray(item.options)) {\n            // 如果有字典属性，就不需要保存 options 了\n            if (item.dictCode) {\n              // 去掉特殊属性\n              delete item.options;\n            }\n          }\n        }\n      }\n\n      return array;\n    },\n\n    /** 渲染保存查询条件的 title（加个删除按钮） */\n    renderSaveTreeData: function renderSaveTreeData(item) {\n      var _this4 = this;\n\n      var h = this.$createElement;\n      item.icon = this.treeIcon;\n      item.originTitle = item['title'];\n\n      item.title = function (fn, vNode) {\n        var originTitle = vNode.dataRef.originTitle;\n        return h(\"div\", {\n          \"class\": \"j-history-tree-title\"\n        }, [h(\"span\", [originTitle]), h(\"div\", {\n          \"class\": \"j-history-tree-title-closer\",\n          \"on\": {\n            \"click\": function click(e) {\n              return _this4.handleRemoveSaveTreeItem(e, vNode);\n            }\n          }\n        }, [h(\"a-icon\", {\n          \"attrs\": {\n            \"type\": \"close-circle\"\n          }\n        })])]);\n      };\n\n      return item;\n    },\n\n    /** 判断是否允许多选 */\n    allowMultiple: function allowMultiple(item) {\n      return item.rule === 'in';\n    },\n    handleRuleChange: function handleRuleChange(item, newValue) {\n      var oldValue = item.rule;\n      this.$set(item, 'rule', newValue); // 上一个规则是否是 in，且type是字典或下拉\n\n      if (oldValue === 'in') {\n        if (item.dictCode || item.options instanceof Array) {\n          var value = item.val;\n\n          if (typeof item.val === 'string') {\n            value = item.val.split(',')[0];\n          } else if (Array.isArray(item.val)) {\n            value = item.val[0];\n          }\n\n          this.$set(item, 'val', value);\n        }\n      }\n    },\n    handleChangeJPopup: function handleChangeJPopup(item, e, values) {\n      item.val = values[item.popup['destFields']];\n    }\n  }\n};",null]}