{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\views\\user\\Step1.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\views\\user\\Step1.vue","mtime":1648374778168},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getAction,postAction } from '@/api/manage'\nimport { checkOnlyUser } from '@/api/api'\n\nexport default {\n  name: \"Step1\",\n  data() {\n    return {\n      form: this.$form.createForm(this),\n      inputCodeContent: \"\",\n      inputCodeNull: true,\n      verifiedCode: \"\",\n      validatorRules: {\n        username: {rules: [{required: false}, {validator: this.validateInputUsername}]},\n        inputCode: {rules: [{required: true, message: '请输入验证码!'}]},\n      },\n      randCodeImage:'',\n      requestCodeSuccess:true,\n      currdatetime:''\n\n    }\n  },\n  created(){\n    this.handleChangeCheckCode();\n  },\n  methods: {\n    handleChangeCheckCode(){\n      this.currdatetime = new Date().getTime();\n      getAction(`/sys/randomImage/${this.currdatetime}`).then(res=>{\n        if(res.success){\n          this.randCodeImage = res.result\n          this.requestCodeSuccess=true\n        }else{\n          this.$message.error(res.message)\n          this.requestCodeSuccess=false\n        }\n      }).catch(()=>{\n        this.requestCodeSuccess=false\n      })\n    },\n    nextStep() {\n      let that = this\n      this.form.validateFields((err, values) => {\n        if (!err) {\n          let isPhone = false;\n          var params = {}\n          var reg = /^[1-9]\\d*$|^0$/;\n          var username = values.username;\n          if (reg.test(username) == true) {\n            params.phone = username;\n            isPhone = true\n          } else {\n            params.username = username;\n          }\n          that.validateInputCode().then(()=>{\n            getAction(\"/sys/user/querySysUser\", params).then((res) => {\n              if (res.success) {\n                var userList = {\n                  username: res.result.username,\n                  phone: res.result.phone,\n                  isPhone: isPhone\n                };\n                setTimeout(function () {\n                  that.$emit('nextStep', userList)\n                })\n              }\n            });\n          })\n        }\n      })\n\n    },\n    validateInputCode() {\n      return new Promise((resolve,reject)=>{\n        postAction(\"/sys/checkCaptcha\",{\n          captcha:this.inputCodeContent,\n          checkKey:this.currdatetime\n        }).then(res=>{\n          if(res.success){\n            resolve();\n          }else{\n            this.$message.error(res.message)\n            reject();\n          }\n        });\n      })\n    },\n    inputCodeChange(e) {\n      this.inputCodeContent = e.target.value;\n      console.log(this.inputCodeContent)\n      if (!e.target.value || 0 == e.target.value) {\n        this.inputCodeNull = true\n      } else {\n        this.inputCodeContent = this.inputCodeContent.toLowerCase()\n        this.inputCodeNull = false\n      }\n    },\n    generateCode(value) {\n      this.verifiedCode = value.toLowerCase();\n      console.log(this.verifiedCode);\n    },\n    validateInputUsername(rule, value, callback) {\n      console.log(value);\n      var reg = /^[0-9]+.?[0-9]*/;\n      if (!value) {\n        callback(\"请输入用户名和手机号！\");\n      }\n\n      //判断用户输入账号还是手机号码\n      if (reg.test(value)) {\n        var params = {\n          phone: value,\n        };\n        checkOnlyUser(params).then((res) => {\n          if (res.success) {\n            callback(\"用户名不存在!\")\n          } else {\n            callback()\n          }\n        })\n      } else {\n        var params = {\n          username: value,\n        };\n        checkOnlyUser(params).then((res) => {\n          if (res.success) {\n            callback(\"用户名不存在!\")\n          } else {\n            callback()\n          }\n        })\n      }\n    },\n\n  }\n}\n",{"version":3,"sources":["Step1.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"Step1.vue","sourceRoot":"src/views/user","sourcesContent":["<template>\r\n  <div class=\"main\">\r\n\r\n    <a-form style=\"max-width: 500px; margin: 40px auto 0;\" :form=\"form\" @keyup.enter.native=\"nextStep\">\r\n      <a-form-item>\r\n        <a-input\r\n          v-decorator=\"['username',validatorRules.username]\"\r\n          size=\"large\"\r\n          type=\"text\"\r\n          autocomplete=\"false\"\r\n          placeholder=\"请输入用户账号或手机号\">\r\n          <a-icon slot=\"prefix\" type=\"lock\" :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\r\n        </a-input>\r\n      </a-form-item>\r\n      <a-row :gutter=\"0\">\r\n        <a-col :span=\"14\">\r\n          <a-form-item>\r\n            <a-input\r\n              v-decorator=\"['inputCode',validatorRules.inputCode]\"\r\n              size=\"large\"\r\n              type=\"text\"\r\n              @change=\"inputCodeChange\"\r\n              placeholder=\"请输入验证码\">\r\n              <a-icon slot=\"prefix\" v-if=\" inputCodeContent==verifiedCode \" type=\"smile\"\r\n                      :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\r\n              <a-icon slot=\"prefix\" v-else type=\"frown\" :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\r\n            </a-input>\r\n          </a-form-item>\r\n        </a-col>\r\n        <a-col :span=\"10\" style=\"text-align: right\">\r\n          <img v-if=\"requestCodeSuccess\" style=\"margin-top: 2px;\" :src=\"randCodeImage\" @click=\"handleChangeCheckCode\"/>\r\n          <img v-else style=\"margin-top: 2px;\" src=\"../../assets/checkcode.png\" @click=\"handleChangeCheckCode\"/>\r\n        </a-col>\r\n      </a-row>\r\n      <a-form-item :wrapperCol=\"{span: 19, offset: 5}\">\r\n        <router-link style=\"float: left;line-height: 40px;\" :to=\"{ name: 'login' }\">使用已有账户登录</router-link>\r\n        <a-button type=\"primary\" @click=\"nextStep\">下一步</a-button>\r\n      </a-form-item>\r\n    </a-form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import { getAction,postAction } from '@/api/manage'\r\n  import { checkOnlyUser } from '@/api/api'\r\n\r\n  export default {\r\n    name: \"Step1\",\r\n    data() {\r\n      return {\r\n        form: this.$form.createForm(this),\r\n        inputCodeContent: \"\",\r\n        inputCodeNull: true,\r\n        verifiedCode: \"\",\r\n        validatorRules: {\r\n          username: {rules: [{required: false}, {validator: this.validateInputUsername}]},\r\n          inputCode: {rules: [{required: true, message: '请输入验证码!'}]},\r\n        },\r\n        randCodeImage:'',\r\n        requestCodeSuccess:true,\r\n        currdatetime:''\r\n\r\n      }\r\n    },\r\n    created(){\r\n      this.handleChangeCheckCode();\r\n    },\r\n    methods: {\r\n      handleChangeCheckCode(){\r\n        this.currdatetime = new Date().getTime();\r\n        getAction(`/sys/randomImage/${this.currdatetime}`).then(res=>{\r\n          if(res.success){\r\n            this.randCodeImage = res.result\r\n            this.requestCodeSuccess=true\r\n          }else{\r\n            this.$message.error(res.message)\r\n            this.requestCodeSuccess=false\r\n          }\r\n        }).catch(()=>{\r\n          this.requestCodeSuccess=false\r\n        })\r\n      },\r\n      nextStep() {\r\n        let that = this\r\n        this.form.validateFields((err, values) => {\r\n          if (!err) {\r\n            let isPhone = false;\r\n            var params = {}\r\n            var reg = /^[1-9]\\d*$|^0$/;\r\n            var username = values.username;\r\n            if (reg.test(username) == true) {\r\n              params.phone = username;\r\n              isPhone = true\r\n            } else {\r\n              params.username = username;\r\n            }\r\n            that.validateInputCode().then(()=>{\r\n              getAction(\"/sys/user/querySysUser\", params).then((res) => {\r\n                if (res.success) {\r\n                  var userList = {\r\n                    username: res.result.username,\r\n                    phone: res.result.phone,\r\n                    isPhone: isPhone\r\n                  };\r\n                  setTimeout(function () {\r\n                    that.$emit('nextStep', userList)\r\n                  })\r\n                }\r\n              });\r\n            })\r\n          }\r\n        })\r\n\r\n      },\r\n      validateInputCode() {\r\n        return new Promise((resolve,reject)=>{\r\n          postAction(\"/sys/checkCaptcha\",{\r\n            captcha:this.inputCodeContent,\r\n            checkKey:this.currdatetime\r\n          }).then(res=>{\r\n            if(res.success){\r\n              resolve();\r\n            }else{\r\n              this.$message.error(res.message)\r\n              reject();\r\n            }\r\n          });\r\n        })\r\n      },\r\n      inputCodeChange(e) {\r\n        this.inputCodeContent = e.target.value;\r\n        console.log(this.inputCodeContent)\r\n        if (!e.target.value || 0 == e.target.value) {\r\n          this.inputCodeNull = true\r\n        } else {\r\n          this.inputCodeContent = this.inputCodeContent.toLowerCase()\r\n          this.inputCodeNull = false\r\n        }\r\n      },\r\n      generateCode(value) {\r\n        this.verifiedCode = value.toLowerCase();\r\n        console.log(this.verifiedCode);\r\n      },\r\n      validateInputUsername(rule, value, callback) {\r\n        console.log(value);\r\n        var reg = /^[0-9]+.?[0-9]*/;\r\n        if (!value) {\r\n          callback(\"请输入用户名和手机号！\");\r\n        }\r\n\r\n        //判断用户输入账号还是手机号码\r\n        if (reg.test(value)) {\r\n          var params = {\r\n            phone: value,\r\n          };\r\n          checkOnlyUser(params).then((res) => {\r\n            if (res.success) {\r\n              callback(\"用户名不存在!\")\r\n            } else {\r\n              callback()\r\n            }\r\n          })\r\n        } else {\r\n          var params = {\r\n            username: value,\r\n          };\r\n          checkOnlyUser(params).then((res) => {\r\n            if (res.success) {\r\n              callback(\"用户名不存在!\")\r\n            } else {\r\n              callback()\r\n            }\r\n          })\r\n        }\r\n      },\r\n\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}