{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\components\\layouts\\TabLayout.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\components\\layouts\\TabLayout.vue","mtime":1648374777556},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport GlobalLayout from '@/components/page/GlobalLayout'\nimport Contextmenu from '@/components/menu/Contextmenu'\nimport { mixin, mixinDevice } from '@/utils/mixin.js'\nimport { triggerWindowResizeEvent } from '@/utils/util'\n\nconst indexKey = '/dashboard/analysis'\n\nexport default {\n  name: 'TabLayout',\n  components: {\n    GlobalLayout,\n    Contextmenu\n  },\n  mixins: [mixin, mixinDevice],\n  data() {\n    return {\n      pageList: [],\n      linkList: [],\n      activePage: '',\n      menuVisible: false,\n      menuItemList: [\n        { key: '4', icon: 'reload', text: '刷 新' },\n        { key: '1', icon: 'arrow-left', text: '关闭左侧' },\n        { key: '2', icon: 'arrow-right', text: '关闭右侧' },\n        { key: '3', icon: 'close', text: '关闭其它' }\n      ],\n      reloadFlag:true\n    }\n  },\n  /* update_begin author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用 ->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\n  provide(){\n    return{\n      closeCurrent:this.closeCurrent\n    }\n  },\n  /* update_end author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\n  computed: {\n    multipage() {\n      //判断如果是手机模式，自动切换为单页面模式\n      if (this.isMobile()) {\n        return false\n      } else {\n        return this.$store.state.app.multipage\n      }\n    }\n  },\n  created() {\n    if (this.$route.path != indexKey) {\n      this.addIndexToFirst()\n    }\n    // update-begin-author:sunjianlei date:20191223 for: 修复刷新后菜单Tab名字显示异常\n    let storeKey = 'route:title:' + this.$route.fullPath\n    let routeTitle = this.$ls.get(storeKey)\n    if (routeTitle) {\n      this.$route.meta.title = routeTitle\n    }\n    // update-end-author:sunjianlei date:20191223 for: 修复刷新后菜单Tab名字显示异常\n    this.pageList.push(this.$route)\n    this.linkList.push(this.$route.fullPath)\n    this.activePage = this.$route.fullPath\n  },\n  mounted() {\n  },\n  watch: {\n    '$route': function(newRoute) {\n      //console.log(\"新的路由\",newRoute)\n      this.activePage = newRoute.fullPath\n      if (!this.multipage) {\n        this.linkList = [newRoute.fullPath]\n        this.pageList = [Object.assign({},newRoute)]\n      // update-begin-author:taoyan date:20200211 for: TASK #3368 【路由缓存】首页的缓存设置有问题，需要根据后台的路由配置来实现是否缓存\n      } else if(indexKey==newRoute.fullPath) {\n        //首页时 判断是否缓存 没有缓存 刷新之\n        if (newRoute.meta.keepAlive === false) {\n          this.routeReload()\n        }\n      // update-end-author:taoyan date:20200211 for: TASK #3368 【路由缓存】首页的缓存设置有问题，需要根据后台的路由配置来实现是否缓存\n      }else if (this.linkList.indexOf(newRoute.fullPath) < 0) {\n        this.linkList.push(newRoute.fullPath)\n        this.pageList.push(Object.assign({},newRoute))\n        // update-begin-author:sunjianlei date:20200103 for: 如果新增的页面配置了缓存路由，那么就强制刷新一遍\n        if (newRoute.meta.keepAlive) {\n          this.routeReload()\n        }\n        // update-end-author:sunjianlei date:20200103 for: 如果新增的页面配置了缓存路由，那么就强制刷新一遍\n      } else if (this.linkList.indexOf(newRoute.fullPath) >= 0) {\n        let oldIndex = this.linkList.indexOf(newRoute.fullPath)\n        let oldPositionRoute = this.pageList[oldIndex]\n        this.pageList.splice(oldIndex, 1, Object.assign({},newRoute,{meta:oldPositionRoute.meta}))\n      }\n    },\n    'activePage': function(key) {\n      let index = this.linkList.lastIndexOf(key)\n      let waitRouter = this.pageList[index]\n      this.$router.push(Object.assign({},waitRouter));\n      this.changeTitle(waitRouter.meta.title)\n    },\n    'multipage': function(newVal) {\n      if(this.reloadFlag){\n        if (!newVal) {\n          this.linkList = [this.$route.fullPath]\n          this.pageList = [this.$route]\n        }\n      }\n    },\n    // update-begin-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n    device() {\n      if (this.multipage && this.linkList.indexOf(indexKey) === -1) {\n        this.addIndexToFirst()\n      }\n    },\n    // update-end-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n  },\n  methods: {\n    // update-begin-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n    // 将首页添加到第一位\n    addIndexToFirst() {\n      this.pageList.splice(0, 0, {\n        name: 'dashboard-analysis',\n        path: indexKey,\n        fullPath: indexKey,\n        meta: {\n          icon: 'dashboard',\n          title: '首页'\n        }\n      })\n      this.linkList.splice(0, 0, indexKey)\n    },\n    // update-end-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n\n    // update-begin-author:sunjianlei date:20200120 for: 动态更改页面标题\n    changeTitle(title) {\n      let projectTitle = \"Finer 进销存\"\n      // 首页特殊处理\n      if (this.$route.path === indexKey) {\n        document.title = projectTitle\n      } else {\n        document.title = title + ' · ' + projectTitle\n      }\n    },\n    // update-end-author:sunjianlei date:20200120 for: 动态更改页面标题\n\n    changePage(key) {\n      this.activePage = key\n    },\n    tabCallBack() {\n      this.$nextTick(() => {\n        triggerWindowResizeEvent()\n      })\n    },\n    editPage(key, action) {\n      this[action](key)\n    },\n    remove(key) {\n      if (key == indexKey) {\n        this.$message.warning('首页不能关闭!')\n        return\n      }\n      if (this.pageList.length === 1) {\n        this.$message.warning('这是最后一页，不能再关闭了啦')\n        return\n      }\n      console.log(\"this.pageList \",this.pageList );\n      this.pageList = this.pageList.filter(item => item.fullPath !== key)\n      let index = this.linkList.indexOf(key)\n      this.linkList = this.linkList.filter(item => item !== key)\n      index = index >= this.linkList.length ? this.linkList.length - 1 : index\n      this.activePage = this.linkList[index]\n    },\n    onContextmenu(e) {\n      const pagekey = this.getPageKey(e.target)\n      if (pagekey !== null) {\n        e.preventDefault()\n        this.menuVisible = true\n      }\n    },\n    getPageKey(target, depth) {\n      depth = depth || 0\n      if (depth > 2) {\n        return null\n      }\n      let pageKey = target.getAttribute('pagekey')\n      pageKey = pageKey || (target.previousElementSibling ? target.previousElementSibling.getAttribute('pagekey') : null)\n      return pageKey || (target.firstElementChild ? this.getPageKey(target.firstElementChild, ++depth) : null)\n    },\n    onMenuSelect(key, target) {\n      let pageKey = this.getPageKey(target)\n      switch (key) {\n        case '1':\n          this.closeLeft(pageKey)\n          break\n        case '2':\n          this.closeRight(pageKey)\n          break\n        case '3':\n          this.closeOthers(pageKey)\n          break\n        case '4':\n          this.routeReload()\n          break\n        default:\n          break\n      }\n    },\n    /* update_begin author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\n    closeCurrent(){\n      this.remove(this.activePage);\n    },\n    /* update_end author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\n    closeOthers(pageKey) {\n      let index = this.linkList.indexOf(pageKey)\n      if (pageKey == indexKey || pageKey.indexOf('?ticke=')>=0) {\n        this.linkList = this.linkList.slice(index, index + 1)\n        this.pageList = this.pageList.slice(index, index + 1)\n        this.activePage = this.linkList[0]\n      } else {\n        let indexContent = this.pageList.slice(0, 1)[0]\n        this.linkList = this.linkList.slice(index, index + 1)\n        this.pageList = this.pageList.slice(index, index + 1)\n        this.linkList.unshift(indexContent.fullPath)\n        this.pageList.unshift(indexContent)\n        this.activePage = this.linkList[1]\n      }\n    },\n    closeLeft(pageKey) {\n      if (pageKey == indexKey) {\n        return\n      }\n      let tempList = [...this.pageList]\n      let indexContent = tempList.slice(0, 1)[0]\n      let index = this.linkList.indexOf(pageKey)\n      this.linkList = this.linkList.slice(index)\n      this.pageList = this.pageList.slice(index)\n      this.linkList.unshift(indexContent.fullPath)\n      this.pageList.unshift(indexContent)\n      if (this.linkList.indexOf(this.activePage) < 0) {\n        this.activePage = this.linkList[0]\n      }\n    },\n    closeRight(pageKey) {\n      let index = this.linkList.indexOf(pageKey)\n      this.linkList = this.linkList.slice(0, index + 1)\n      this.pageList = this.pageList.slice(0, index + 1)\n      if (this.linkList.indexOf(this.activePage < 0)) {\n        this.activePage = this.linkList[this.linkList.length - 1]\n      }\n    },\n    //update-begin-author:taoyan date:20190430 for:动态路由title显示配置的菜单title而不是其对应路由的title\n    dynamicRouterShow(key,title){\n      let keyIndex = this.linkList.indexOf(key)\n      if(keyIndex>=0){\n        let currRouter = this.pageList[keyIndex]\n        let meta = Object.assign({},currRouter.meta,{title:title})\n        this.pageList.splice(keyIndex, 1, Object.assign({},currRouter,{meta:meta}))\n        if (key === this.activePage) {\n          this.changeTitle(title)\n        }\n      }\n    },\n    //update-end-author:taoyan date:20190430 for:动态路由title显示配置的菜单title而不是其对应路由的title\n\n    //update-begin-author:taoyan date:20191008 for:路由刷新\n    routeReload(){\n      this.reloadFlag = false\n      let ToggleMultipage = \"ToggleMultipage\"\n      this.$store.dispatch(ToggleMultipage,false)\n      this.$nextTick(()=>{\n        this.$store.dispatch(ToggleMultipage,true)\n        this.reloadFlag = true\n      })\n    }\n    //update-end-author:taoyan date:20191008 for:路由刷新\n  }\n}\n",null]}