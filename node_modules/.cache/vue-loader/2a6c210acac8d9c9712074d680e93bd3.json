{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\components\\jeecg\\minipop\\JFilePop.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\components\\jeecg\\minipop\\JFilePop.vue","mtime":1648374777543},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport JUpload from '@/components/jeecg/JUpload'\nimport { getFileAccessHttpUrl } from '@/api/manage';\n\nconst getFileName=(path)=>{\n  if(path.lastIndexOf(\"\\\\\")>=0){\n    let reg=new RegExp(\"\\\\\\\\\",\"g\");\n    path = path.replace(reg,\"/\");\n  }\n  return path.substring(path.lastIndexOf(\"/\")+1);\n}\n\nexport default {\n  name: 'JFilePop',\n  components: { JUpload },\n  props:{\n    title:{\n      type:String,\n      default:'',\n      required:false\n    },\n    position:{\n      type:String,\n      default:'right',\n      required:false\n    },\n    height:{\n      type:Number,\n      default:200,\n      required:false\n    },\n    width:{\n      type:Number,\n      default:520,\n      required:false\n    },\n\n    popContainer:{\n      type:String,\n      default:'',\n      required:false\n    },\n    disabled:{\n      type:Boolean,\n      default:false,\n      required:false\n    }\n  },\n  data(){\n    return {\n      visible:false,\n      filePath:'',\n      id:'',\n      fileType:'file'\n\n    }\n  },\n  methods:{\n    handleChange(value){\n      this.filePath = value;\n    },\n    show(id,value,flag){\n      this.id = id;\n      this.filePath = value;\n      this.visible=true\n      if(flag === 'img'){\n        this.fileType = 'image'\n      }else{\n        this.fileType = 'file'\n      }\n\n    },\n    ok(){\n      if(!this.filePath){\n        this.$message.error(\"未上传任何文件\")\n        return false;\n      }\n      let arr = this.filePath.split(\",\")\n      let obj = {\n        name:getFileName(arr[0]),\n        url:getFileAccessHttpUrl(arr[0]),\n        path:this.filePath,\n        status: 'done',\n        id:this.id\n      }\n      this.$emit('ok',obj)\n      this.visible=false\n    },\n    close(){\n      this.visible=false\n    }\n  }\n}\n",null]}