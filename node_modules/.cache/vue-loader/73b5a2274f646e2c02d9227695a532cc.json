{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\components\\jeecgbiz\\modal\\JSelectDepartModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\components\\jeecgbiz\\modal\\JSelectDepartModal.vue","mtime":1648374777551},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { queryDepartTreeList } from '@/api/api'\nexport default {\n  name: 'JSelectDepartModal',\n  props:['modalWidth','multi','rootOpened','departId'],\n  data(){\n    return {\n      visible:false,\n      confirmLoading:false,\n      treeData:[],\n      autoExpandParent:true,\n      expandedKeys:[],\n      dataList:[],\n      checkedKeys:[],\n      checkedRows:[],\n      searchValue:\"\"\n    }\n  },\n  created(){\n    this.loadDepart();\n  },\n  watch:{\n    departId(){\n      this.initDepartComponent()\n    },\n    visible: {\n      handler() {\n        if (this.departId) {\n          this.checkedKeys = this.departId.split(\",\");\n          // console.log('this.departId', this.departId)\n        } else {\n          this.checkedKeys = [];\n        }\n      }\n    }\n  },\n  methods:{\n    show(){\n      this.visible=true\n      this.checkedRows=[]\n      this.checkedKeys=[]\n    },\n    loadDepart(){\n      queryDepartTreeList().then(res=>{\n        if(res.success){\n          let arr = [...res.result]\n          this.reWriterWithSlot(arr)\n          this.treeData = arr\n          this.initDepartComponent()\n          if(this.rootOpened){\n            this.initExpandedKeys(res.result)\n          }\n        }\n      })\n    },\n    initDepartComponent(){\n      let names = ''\n      if(this.departId){\n        let currDepartId = this.departId\n        for(let item of this.dataList){\n          if(currDepartId.indexOf(item.key)>=0){\n            names+=\",\"+item.title\n          }\n        }\n        if(names){\n          names = names.substring(1)\n        }\n      }\n      this.$emit(\"initComp\",names)\n    },\n    reWriterWithSlot(arr){\n      for(let item of arr){\n        if(item.children && item.children.length>0){\n          this.reWriterWithSlot(item.children)\n          let temp = Object.assign({},item)\n          temp.children = {}\n          this.dataList.push(temp)\n        }else{\n          this.dataList.push(item)\n          item.scopedSlots={ title: 'title' }\n        }\n      }\n    },\n    initExpandedKeys(arr){\n      if(arr && arr.length>0){\n        let keys = []\n        for(let item of arr){\n          if(item.children && item.children.length>0){\n            keys.push(item.id)\n          }\n        }\n        this.expandedKeys=[...keys]\n      }else{\n        this.expandedKeys=[]\n      }\n    },\n    onCheck (checkedKeys,info) {\n      if(!this.multi){\n        let arr = checkedKeys.checked.filter(item => this.checkedKeys.indexOf(item) < 0)\n        this.checkedKeys = [...arr]\n        this.checkedRows = (this.checkedKeys.length === 0) ? [] : [info.node.dataRef]\n      }else{\n        this.checkedKeys = checkedKeys.checked\n        this.checkedRows = this.getCheckedRows(this.checkedKeys)\n      }\n    },\n    onSelect(selectedKeys,info) {\n      let keys = []\n      keys.push(selectedKeys[0])\n      if(!this.checkedKeys || this.checkedKeys.length===0 || !this.multi){\n        this.checkedKeys = [...keys]\n        this.checkedRows=[info.node.dataRef]\n      }else{\n        let currKey = info.node.dataRef.key\n        if(this.checkedKeys.indexOf(currKey)>=0){\n          this.checkedKeys = this.checkedKeys.filter(item=> item !==currKey)\n        }else{\n          this.checkedKeys.push(...keys)\n        }\n      }\n      this.checkedRows = this.getCheckedRows(this.checkedKeys)\n    },\n    onExpand (expandedKeys) {\n      this.expandedKeys = expandedKeys\n      this.autoExpandParent = false\n    },\n    handleSubmit(){\n      if(!this.checkedKeys || this.checkedKeys.length==0){\n        this.$emit(\"ok\",'')\n      }else{\n        this.$emit(\"ok\",this.checkedRows,this.checkedKeys.join(\",\"))\n      }\n      this.handleClear()\n    },\n    handleCancel(){\n      this.handleClear()\n    },\n    handleClear(){\n      this.visible=false\n      this.checkedKeys=[]\n    },\n    getParentKey(currKey,treeData){\n      let parentKey\n      for (let i = 0; i < treeData.length; i++) {\n        const node = treeData[i]\n        if (node.children) {\n          if (node.children.some(item => item.key === currKey)) {\n            parentKey = node.key\n          } else if (this.getParentKey(currKey, node.children)) {\n            parentKey = this.getParentKey(currKey, node.children)\n          }\n        }\n      }\n      return parentKey\n    },\n    onSearch(value){\n      const expandedKeys = this.dataList.map((item) => {\n        if (item.title.indexOf(value) > -1) {\n          return this.getParentKey(item.key,this.treeData)\n        }\n        return null\n      }).filter((item, i, self) => item && self.indexOf(item) === i)\n\n      Object.assign(this, {\n        expandedKeys,\n        searchValue: value,\n        autoExpandParent: true,\n      })\n\n\n    },\n    // 根据 checkedKeys 获取 rows\n    getCheckedRows(checkedKeys) {\n      const forChildren = (list, key) => {\n        for (let item of list) {\n          if (item.id === key) {\n            return item\n          }\n          if (item.children instanceof Array) {\n            let value = forChildren(item.children, key)\n            if (value != null) {\n              return value\n            }\n          }\n        }\n        return null\n      }\n\n      let rows = []\n      for (let key of checkedKeys) {\n        let row = forChildren(this.treeData, key)\n        if (row != null) {\n          rows.push(row)\n        }\n      }\n      return rows\n    }\n  }\n}\n\n",null]}