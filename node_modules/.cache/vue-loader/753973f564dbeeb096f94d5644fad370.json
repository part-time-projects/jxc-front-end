{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\views\\user\\Step1.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\views\\user\\Step1.vue","mtime":1648374778168},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getAction,postAction } from '@/api/manage'\nimport { checkOnlyUser } from '@/api/api'\n\nexport default {\n  name: \"Step1\",\n  data() {\n    return {\n      form: this.$form.createForm(this),\n      inputCodeContent: \"\",\n      inputCodeNull: true,\n      verifiedCode: \"\",\n      validatorRules: {\n        username: {rules: [{required: false}, {validator: this.validateInputUsername}]},\n        inputCode: {rules: [{required: true, message: '请输入验证码!'}]},\n      },\n      randCodeImage:'',\n      requestCodeSuccess:true,\n      currdatetime:''\n\n    }\n  },\n  created(){\n    this.handleChangeCheckCode();\n  },\n  methods: {\n    handleChangeCheckCode(){\n      this.currdatetime = new Date().getTime();\n      getAction(`/sys/randomImage/${this.currdatetime}`).then(res=>{\n        if(res.success){\n          this.randCodeImage = res.result\n          this.requestCodeSuccess=true\n        }else{\n          this.$message.error(res.message)\n          this.requestCodeSuccess=false\n        }\n      }).catch(()=>{\n        this.requestCodeSuccess=false\n      })\n    },\n    nextStep() {\n      let that = this\n      this.form.validateFields((err, values) => {\n        if (!err) {\n          let isPhone = false;\n          var params = {}\n          var reg = /^[1-9]\\d*$|^0$/;\n          var username = values.username;\n          if (reg.test(username) == true) {\n            params.phone = username;\n            isPhone = true\n          } else {\n            params.username = username;\n          }\n          that.validateInputCode().then(()=>{\n            getAction(\"/sys/user/querySysUser\", params).then((res) => {\n              if (res.success) {\n                var userList = {\n                  username: res.result.username,\n                  phone: res.result.phone,\n                  isPhone: isPhone\n                };\n                setTimeout(function () {\n                  that.$emit('nextStep', userList)\n                })\n              }\n            });\n          })\n        }\n      })\n\n    },\n    validateInputCode() {\n      return new Promise((resolve,reject)=>{\n        postAction(\"/sys/checkCaptcha\",{\n          captcha:this.inputCodeContent,\n          checkKey:this.currdatetime\n        }).then(res=>{\n          if(res.success){\n            resolve();\n          }else{\n            this.$message.error(res.message)\n            reject();\n          }\n        });\n      })\n    },\n    inputCodeChange(e) {\n      this.inputCodeContent = e.target.value;\n      console.log(this.inputCodeContent)\n      if (!e.target.value || 0 == e.target.value) {\n        this.inputCodeNull = true\n      } else {\n        this.inputCodeContent = this.inputCodeContent.toLowerCase()\n        this.inputCodeNull = false\n      }\n    },\n    generateCode(value) {\n      this.verifiedCode = value.toLowerCase();\n      console.log(this.verifiedCode);\n    },\n    validateInputUsername(rule, value, callback) {\n      console.log(value);\n      var reg = /^[0-9]+.?[0-9]*/;\n      if (!value) {\n        callback(\"请输入用户名和手机号！\");\n      }\n\n      //判断用户输入账号还是手机号码\n      if (reg.test(value)) {\n        var params = {\n          phone: value,\n        };\n        checkOnlyUser(params).then((res) => {\n          if (res.success) {\n            callback(\"用户名不存在!\")\n          } else {\n            callback()\n          }\n        })\n      } else {\n        var params = {\n          username: value,\n        };\n        checkOnlyUser(params).then((res) => {\n          if (res.success) {\n            callback(\"用户名不存在!\")\n          } else {\n            callback()\n          }\n        })\n      }\n    },\n\n  }\n}\n",null]}