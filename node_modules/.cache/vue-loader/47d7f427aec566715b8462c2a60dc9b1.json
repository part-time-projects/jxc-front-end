{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\bas\\modules\\BasMaterialCategoryModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\bas\\modules\\BasMaterialCategoryModal.vue","mtime":1648374777610},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport { httpAction } from '@/api/manage'\nimport pick from 'lodash.pick'\nimport { validateDuplicateValue } from '@/utils/util'\nimport JDate from '@/components/jeecg/JDate'  \nimport JDictSelectTag from \"@/components/dict/JDictSelectTag\"\nimport JTreeSelect from '@/components/jeecg/JTreeSelect'\n\nexport default {\n  name: \"BasMaterialCategoryModal\",\n  components: { \n    JDate,\n    JDictSelectTag,\n    JTreeSelect\n  },\n  data () {\n    return {\n      action: \"\",\n      form: this.$form.createForm(this),\n      title:\"操作\",\n      width:600,\n      visible: false,\n      model: {},\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 6 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 17 },\n      },\n\n      confirmLoading: false,\n      validatorRules: {\n        name: {\n          rules: [\n            { required: true, message: '请输入名称!'},\n          ]\n        },\n        code: {\n          rules: [\n            { required: true, message: '请输入编码!'},\n          ]\n        },\n        isEnabled: {\n          rules: [\n            { required: true, message: '请输入是否启用!'},\n          ]\n        },\n      },\n      url: {\n        add: \"/bas/basMaterialCategory/add\",\n        edit: \"/bas/basMaterialCategory/edit\",\n      },\n      expandedRowKeys:[],\n      pidField:\"pid\"\n   \n    }\n  },\n\n  computed: {\n    readOnly: function() {\n      return this.action !== \"add\" && this.action !== \"edit\"\n    }\n  },\n\n  created () {\n  },\n  methods: {\n    add (obj) {\n      this.edit(obj);\n    },\n    edit (record) {\n      this.form.resetFields();\n      this.model = Object.assign({}, record);\n      this.visible = true;\n      this.$nextTick(() => {\n        this.form.setFieldsValue(pick(this.model,'pid','name','code','fullname','isEnabled','createBy','createTime','updateBy','updateTime'))\n      })\n    },\n    close () {\n      this.$emit('close');\n      this.visible = false;\n    },\n    handleOk () {\n      const that = this;\n      // 触发表单验证\n      this.form.validateFields((err, values) => {\n        if (!err) {\n          that.confirmLoading = true;\n          let httpurl = '';\n          let method = '';\n          if(!this.model.id){\n            httpurl+=this.url.add;\n            method = 'post';\n          }else{\n            httpurl+=this.url.edit;\n             method = 'put';\n          }\n          let old_pid = this.model[this.pidField]\n          let formData = Object.assign(this.model, values);\n          let new_pid = this.model[this.pidField]\n          console.log(\"表单提交数据\",formData)\n          httpAction(httpurl,formData,method).then((res)=>{\n            if(res.success){\n              that.$message.success(res.message);\n              that.submitSuccess(formData,old_pid==new_pid)\n            }else{\n              that.$message.warning(res.message);\n            }\n          }).finally(() => {\n            that.confirmLoading = false;\n            that.close();\n          })\n        }\n       \n      })\n    },\n    handleCancel () {\n      this.close()\n    },\n    popupCallback(row){\n      this.form.setFieldsValue(pick(row,'pid','name','code','fullname','isEnabled','createBy','createTime','updateBy','updateTime'))\n    },\n    submitSuccess(formData,flag){\n      if(!formData.id){\n        let treeData = this.$refs.treeSelect.getCurrTreeData()\n        this.expandedRowKeys=[]\n        this.getExpandKeysByPid(formData[this.pidField],treeData,treeData)\n        this.$emit('ok',formData,this.expandedRowKeys.reverse());\n      }else{\n        this.$emit('ok',formData,flag);\n      }\n    },\n    getExpandKeysByPid(pid,arr,all){\n      if(pid && arr && arr.length>0){\n        for(let i=0;i<arr.length;i++){\n          if(arr[i].key==pid){\n            this.expandedRowKeys.push(arr[i].key)\n            this.getExpandKeysByPid(arr[i]['parentId'],all,all)\n          }else{\n            this.getExpandKeysByPid(pid,arr[i].children,all)\n          }\n        }\n      }\n    }\n\n  }\n}\n",null]}