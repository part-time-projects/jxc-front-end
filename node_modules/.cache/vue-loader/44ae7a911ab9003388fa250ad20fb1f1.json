{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\components\\tools\\HeaderNotice.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\components\\tools\\HeaderNotice.vue","mtime":1648374777568},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getAction,putAction } from '@/api/manage'\nimport ShowAnnouncement from './ShowAnnouncement'\nimport store from '@/store/'\nimport DynamicNotice from './DynamicNotice'\n\n\nexport default {\n  name: \"HeaderNotice\",\n  components: {\n    DynamicNotice,\n    ShowAnnouncement,\n  },\n  data () {\n    return {\n      loadding: false,\n      url:{\n        listCementByUser:\"/sys/annountCement/listByUser\",\n        editCementSend:\"/sys/sysAnnouncementSend/editByAnntIdAndUserId\",\n        queryById:\"/sys/annountCement/queryById\",\n      },\n      hovered: false,\n      announcement1:[],\n      announcement2:[],\n      msg1Count:\"0\",\n      msg2Count:\"0\",\n      msg1Title:\"通知(0)\",\n      msg2Title:\"\",\n      stopTimer:false,\n      websock: null,\n      lockReconnect:false,\n      heartCheck:null,\n      formData:{},\n      openPath:''\n    }\n  },\n  computed:{\n    msgTotal () {\n      return parseInt(this.msg1Count)+parseInt(this.msg2Count);\n    }\n  },\n  mounted() {\n    this.loadData();\n    //this.timerFun();\n    this.initWebSocket();\n   // this.heartCheckFun();\n  },\n  destroyed: function () { // 离开页面生命周期函数\n    this.websocketclose();\n  },\n  methods: {\n    timerFun() {\n      this.stopTimer = false;\n      let myTimer = setInterval(()=>{\n        // 停止定时器\n        if (this.stopTimer == true) {\n          clearInterval(myTimer);\n          return;\n        }\n        this.loadData()\n      },6000)\n    },\n    loadData (){\n      try {\n        // 获取系统消息\n        getAction(this.url.listCementByUser).then((res) => {\n          if (res.success) {\n            this.announcement1 = res.result.anntMsgList;\n            this.msg1Count = res.result.anntMsgTotal;\n            this.msg1Title = \"通知(\" + res.result.anntMsgTotal + \")\";\n            this.announcement2 = res.result.sysMsgList;\n            this.msg2Count = res.result.sysMsgTotal;\n            this.msg2Title = \"系统消息(\" + res.result.sysMsgTotal + \")\";\n          }\n        }).catch(error => {\n          console.log(\"系统消息通知异常\",error);//这行打印permissionName is undefined\n          this.stopTimer = true;\n          console.log(\"清理timer\");\n        });\n      } catch (err) {\n        this.stopTimer = true;\n        console.log(\"通知异常\",err);\n      }\n    },\n    fetchNotice () {\n      if (this.loadding) {\n        this.loadding = false\n        return\n      }\n      this.loadding = true\n      setTimeout(() => {\n        this.loadding = false\n      }, 200)\n    },\n    showAnnouncement(record){\n      putAction(this.url.editCementSend,{anntId:record.id}).then((res)=>{\n        if(res.success){\n          this.loadData();\n        }\n      });\n      this.hovered = false;\n      if(record.openType==='component'){\n        this.openPath = record.openPage;\n        this.formData = {id:record.busId};\n        this.$refs.showDynamNotice.detail(record.openPage);\n      }else{\n        this.$refs.ShowAnnouncement.detail(record);\n      }\n    },\n    toMyAnnouncement(){\n\n      this.$router.push({\n        path: '/isps/userAnnouncement',\n        name: 'isps-userAnnouncement'\n      });\n    },\n    modalFormOk(){\n    },\n    handleHoverChange (visible) {\n      this.hovered = visible;\n    },\n\n    initWebSocket: function () {\n      // WebSocket与普通的请求所用协议有所不同，ws等同于http，wss等同于https\n      var userId = store.getters.userInfo.id;\n      var url = window._CONFIG['domianURL'].replace(\"https://\",\"wss://\").replace(\"http://\",\"ws://\")+\"/websocket/\"+userId;\n      console.log(url);\n      this.websock = new WebSocket(url);\n      this.websock.onopen = this.websocketOnopen;\n      this.websock.onerror = this.websocketOnerror;\n      this.websock.onmessage = this.websocketOnmessage;\n      this.websock.onclose = this.websocketOnclose;\n    },\n    websocketOnopen: function () {\n      console.log(\"WebSocket连接成功\");\n      //心跳检测重置\n      //this.heartCheck.reset().start();\n    },\n    websocketOnerror: function (e) {\n      console.log(\"WebSocket连接发生错误\");\n      this.reconnect();\n    },\n    websocketOnmessage: function (e) {\n      console.log(\"-----接收消息-------\",e.data);\n      var data = eval(\"(\" + e.data + \")\"); //解析对象\n      if(data.cmd == \"topic\"){\n          //系统通知\n        this.loadData();\n      }else if(data.cmd == \"user\"){\n          //用户消息\n        this.loadData();\n      }\n      //心跳检测重置\n      //this.heartCheck.reset().start();\n    },\n    websocketOnclose: function (e) {\n      console.log(\"connection closed (\" + e.code + \")\");\n      this.reconnect();\n    },\n    websocketSend(text) { // 数据发送\n      try {\n        this.websock.send(text);\n      } catch (err) {\n        console.log(\"send failed (\" + err.code + \")\");\n      }\n    },\n\n    openNotification (data) {\n      var text = data.msgTxt;\n      const key = `open${Date.now()}`;\n      this.$notification.open({\n        message: '消息提醒',\n        placement:'bottomRight',\n        description: text,\n        key,\n        btn: (h)=>{\n          return h('a-button', {\n            props: {\n              type: 'primary',\n              size: 'small',\n            },\n            on: {\n              click: () => this.showDetail(key,data)\n            }\n          }, '查看详情')\n        },\n      });\n    },\n\n    reconnect() {\n      var that = this;\n      if(that.lockReconnect) return;\n      that.lockReconnect = true;\n      //没连接上会一直重连，设置延迟避免请求过多\n      setTimeout(function () {\n        console.info(\"尝试重连...\");\n        that.initWebSocket();\n        that.lockReconnect = false;\n      }, 5000);\n    },\n    heartCheckFun(){\n      var that = this;\n      //心跳检测,每20s心跳一次\n      that.heartCheck = {\n        timeout: 20000,\n        timeoutObj: null,\n        serverTimeoutObj: null,\n        reset: function(){\n          clearTimeout(this.timeoutObj);\n          //clearTimeout(this.serverTimeoutObj);\n          return this;\n        },\n        start: function(){\n          var self = this;\n          this.timeoutObj = setTimeout(function(){\n            //这里发送一个心跳，后端收到后，返回一个心跳消息，\n            //onmessage拿到返回的心跳就说明连接正常\n            that.websocketSend(\"HeartBeat\");\n            console.info(\"客户端发送心跳\");\n            //self.serverTimeoutObj = setTimeout(function(){//如果超过一定时间还没重置，说明后端主动断开了\n            //  that.websock.close();//如果onclose会执行reconnect，我们执行ws.close()就行了.如果直接执行reconnect 会触发onclose导致重连两次\n            //}, self.timeout)\n          }, this.timeout)\n        }\n      }\n    },\n\n\n    showDetail(key,data){\n      this.$notification.close(key);\n      var id = data.msgId;\n      getAction(this.url.queryById,{id:id}).then((res) => {\n        if (res.success) {\n          var record = res.result;\n          this.showAnnouncement(record);\n        }\n      })\n\n    },\n  }\n}\n",{"version":3,"sources":["HeaderNotice.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"HeaderNotice.vue","sourceRoot":"src/components/tools","sourcesContent":["<template>\r\n  <a-popover\r\n    trigger=\"click\"\r\n    placement=\"bottomRight\"\r\n    :autoAdjustOverflow=\"true\"\r\n    :arrowPointAtCenter=\"true\"\r\n    overlayClassName=\"header-notice-wrapper\"\r\n    @visibleChange=\"handleHoverChange\"\r\n    :overlayStyle=\"{ width: '300px', top: '50px' }\">\r\n    <template slot=\"content\">\r\n      <a-spin :spinning=\"loadding\">\r\n        <a-tabs>\r\n          <a-tab-pane :tab=\"msg1Title\" key=\"1\">\r\n            <!--<a-list>\r\n              <a-list-item>\r\n                <a-list-item-meta title=\"你收到了 14 份新周报\" description=\"一年前\">\r\n                  <a-avatar style=\"background-color: white\" slot=\"avatar\" src=\"https://gw.alipayobjects.com/zos/rmsportal/ThXAXghbEsBCCSDihZxY.png\"/>\r\n                </a-list-item-meta>\r\n              </a-list-item>\r\n              <a-list-item>\r\n                <a-list-item-meta title=\"你推荐的 IT大牛 已通过第三轮面试\" description=\"一年前\">\r\n                  <a-avatar style=\"background-color: white\" slot=\"avatar\" src=\"https://gw.alipayobjects.com/zos/rmsportal/OKJXDXrmkNshAMvwtvhu.png\"/>\r\n                </a-list-item-meta>\r\n              </a-list-item>\r\n              <a-list-item>\r\n                <a-list-item-meta title=\"这种模板可以区分多种通知类型\" description=\"一年前\">\r\n                  <a-avatar style=\"background-color: white\" slot=\"avatar\" src=\"https://gw.alipayobjects.com/zos/rmsportal/kISTdvpyTAhtGxpovNWd.png\"/>\r\n                </a-list-item-meta>\r\n              </a-list-item>\r\n            </a-list>-->\r\n            <a-list>\r\n              <a-list-item :key=\"index\" v-for=\"(record, index) in announcement1\">\r\n                <div style=\"margin-left: 5%;width: 80%\">\r\n                  <p><a @click=\"showAnnouncement(record)\">{{ record.titile }}</a></p>\r\n                  <p style=\"color: rgba(0,0,0,.45);margin-bottom: 0px\">{{ record.createTime }} 发布</p>\r\n                </div>\r\n                <div style=\"text-align: right\">\r\n                  <a-tag @click=\"showAnnouncement(record)\" v-if=\"record.priority === 'L'\" color=\"blue\">一般消息</a-tag>\r\n                  <a-tag @click=\"showAnnouncement(record)\" v-if=\"record.priority === 'M'\" color=\"orange\">重要消息</a-tag>\r\n                  <a-tag @click=\"showAnnouncement(record)\" v-if=\"record.priority === 'H'\" color=\"red\">紧急消息</a-tag>\r\n                </div>\r\n              </a-list-item>\r\n              <div style=\"margin-top: 5px;text-align: center\">\r\n                <a-button @click=\"toMyAnnouncement()\" type=\"dashed\" block>查看更多</a-button>\r\n              </div>\r\n            </a-list>\r\n          </a-tab-pane>\r\n          <a-tab-pane :tab=\"msg2Title\" key=\"2\">\r\n            <a-list>\r\n              <a-list-item :key=\"index\" v-for=\"(record, index) in announcement2\">\r\n                <div style=\"margin-left: 5%;width: 80%\">\r\n                  <p><a @click=\"showAnnouncement(record)\">{{ record.titile }}</a></p>\r\n                  <p style=\"color: rgba(0,0,0,.45);margin-bottom: 0px\">{{ record.createTime }} 发布</p>\r\n                </div>\r\n                <div style=\"text-align: right\">\r\n                  <a-tag @click=\"showAnnouncement(record)\" v-if=\"record.priority === 'L'\" color=\"blue\">一般消息</a-tag>\r\n                  <a-tag @click=\"showAnnouncement(record)\" v-if=\"record.priority === 'M'\" color=\"orange\">重要消息</a-tag>\r\n                  <a-tag @click=\"showAnnouncement(record)\" v-if=\"record.priority === 'H'\" color=\"red\">紧急消息</a-tag>\r\n                </div>\r\n              </a-list-item>\r\n              <div style=\"margin-top: 5px;text-align: center\">\r\n                <a-button @click=\"toMyAnnouncement()\" type=\"dashed\" block>查看更多</a-button>\r\n              </div>\r\n            </a-list>\r\n          </a-tab-pane>\r\n        </a-tabs>\r\n      </a-spin>\r\n    </template>\r\n    <span @click=\"fetchNotice\" class=\"header-notice\">\r\n      <a-badge :count=\"msgTotal\">\r\n        <a-icon style=\"font-size: 16px; padding: 4px\" type=\"bell\" />\r\n      </a-badge>\r\n    </span>\r\n    <show-announcement ref=\"ShowAnnouncement\" @ok=\"modalFormOk\"></show-announcement>\r\n    <dynamic-notice ref=\"showDynamNotice\" :path=\"openPath\" :formData=\"formData\"/>\r\n  </a-popover>\r\n</template>\r\n\r\n<script>\r\n  import { getAction,putAction } from '@/api/manage'\r\n  import ShowAnnouncement from './ShowAnnouncement'\r\n  import store from '@/store/'\r\n  import DynamicNotice from './DynamicNotice'\r\n\r\n\r\n  export default {\r\n    name: \"HeaderNotice\",\r\n    components: {\r\n      DynamicNotice,\r\n      ShowAnnouncement,\r\n    },\r\n    data () {\r\n      return {\r\n        loadding: false,\r\n        url:{\r\n          listCementByUser:\"/sys/annountCement/listByUser\",\r\n          editCementSend:\"/sys/sysAnnouncementSend/editByAnntIdAndUserId\",\r\n          queryById:\"/sys/annountCement/queryById\",\r\n        },\r\n        hovered: false,\r\n        announcement1:[],\r\n        announcement2:[],\r\n        msg1Count:\"0\",\r\n        msg2Count:\"0\",\r\n        msg1Title:\"通知(0)\",\r\n        msg2Title:\"\",\r\n        stopTimer:false,\r\n        websock: null,\r\n        lockReconnect:false,\r\n        heartCheck:null,\r\n        formData:{},\r\n        openPath:''\r\n      }\r\n    },\r\n    computed:{\r\n      msgTotal () {\r\n        return parseInt(this.msg1Count)+parseInt(this.msg2Count);\r\n      }\r\n    },\r\n    mounted() {\r\n      this.loadData();\r\n      //this.timerFun();\r\n      this.initWebSocket();\r\n     // this.heartCheckFun();\r\n    },\r\n    destroyed: function () { // 离开页面生命周期函数\r\n      this.websocketclose();\r\n    },\r\n    methods: {\r\n      timerFun() {\r\n        this.stopTimer = false;\r\n        let myTimer = setInterval(()=>{\r\n          // 停止定时器\r\n          if (this.stopTimer == true) {\r\n            clearInterval(myTimer);\r\n            return;\r\n          }\r\n          this.loadData()\r\n        },6000)\r\n      },\r\n      loadData (){\r\n        try {\r\n          // 获取系统消息\r\n          getAction(this.url.listCementByUser).then((res) => {\r\n            if (res.success) {\r\n              this.announcement1 = res.result.anntMsgList;\r\n              this.msg1Count = res.result.anntMsgTotal;\r\n              this.msg1Title = \"通知(\" + res.result.anntMsgTotal + \")\";\r\n              this.announcement2 = res.result.sysMsgList;\r\n              this.msg2Count = res.result.sysMsgTotal;\r\n              this.msg2Title = \"系统消息(\" + res.result.sysMsgTotal + \")\";\r\n            }\r\n          }).catch(error => {\r\n            console.log(\"系统消息通知异常\",error);//这行打印permissionName is undefined\r\n            this.stopTimer = true;\r\n            console.log(\"清理timer\");\r\n          });\r\n        } catch (err) {\r\n          this.stopTimer = true;\r\n          console.log(\"通知异常\",err);\r\n        }\r\n      },\r\n      fetchNotice () {\r\n        if (this.loadding) {\r\n          this.loadding = false\r\n          return\r\n        }\r\n        this.loadding = true\r\n        setTimeout(() => {\r\n          this.loadding = false\r\n        }, 200)\r\n      },\r\n      showAnnouncement(record){\r\n        putAction(this.url.editCementSend,{anntId:record.id}).then((res)=>{\r\n          if(res.success){\r\n            this.loadData();\r\n          }\r\n        });\r\n        this.hovered = false;\r\n        if(record.openType==='component'){\r\n          this.openPath = record.openPage;\r\n          this.formData = {id:record.busId};\r\n          this.$refs.showDynamNotice.detail(record.openPage);\r\n        }else{\r\n          this.$refs.ShowAnnouncement.detail(record);\r\n        }\r\n      },\r\n      toMyAnnouncement(){\r\n\r\n        this.$router.push({\r\n          path: '/isps/userAnnouncement',\r\n          name: 'isps-userAnnouncement'\r\n        });\r\n      },\r\n      modalFormOk(){\r\n      },\r\n      handleHoverChange (visible) {\r\n        this.hovered = visible;\r\n      },\r\n\r\n      initWebSocket: function () {\r\n        // WebSocket与普通的请求所用协议有所不同，ws等同于http，wss等同于https\r\n        var userId = store.getters.userInfo.id;\r\n        var url = window._CONFIG['domianURL'].replace(\"https://\",\"wss://\").replace(\"http://\",\"ws://\")+\"/websocket/\"+userId;\r\n        console.log(url);\r\n        this.websock = new WebSocket(url);\r\n        this.websock.onopen = this.websocketOnopen;\r\n        this.websock.onerror = this.websocketOnerror;\r\n        this.websock.onmessage = this.websocketOnmessage;\r\n        this.websock.onclose = this.websocketOnclose;\r\n      },\r\n      websocketOnopen: function () {\r\n        console.log(\"WebSocket连接成功\");\r\n        //心跳检测重置\r\n        //this.heartCheck.reset().start();\r\n      },\r\n      websocketOnerror: function (e) {\r\n        console.log(\"WebSocket连接发生错误\");\r\n        this.reconnect();\r\n      },\r\n      websocketOnmessage: function (e) {\r\n        console.log(\"-----接收消息-------\",e.data);\r\n        var data = eval(\"(\" + e.data + \")\"); //解析对象\r\n        if(data.cmd == \"topic\"){\r\n            //系统通知\r\n          this.loadData();\r\n        }else if(data.cmd == \"user\"){\r\n            //用户消息\r\n          this.loadData();\r\n        }\r\n        //心跳检测重置\r\n        //this.heartCheck.reset().start();\r\n      },\r\n      websocketOnclose: function (e) {\r\n        console.log(\"connection closed (\" + e.code + \")\");\r\n        this.reconnect();\r\n      },\r\n      websocketSend(text) { // 数据发送\r\n        try {\r\n          this.websock.send(text);\r\n        } catch (err) {\r\n          console.log(\"send failed (\" + err.code + \")\");\r\n        }\r\n      },\r\n\r\n      openNotification (data) {\r\n        var text = data.msgTxt;\r\n        const key = `open${Date.now()}`;\r\n        this.$notification.open({\r\n          message: '消息提醒',\r\n          placement:'bottomRight',\r\n          description: text,\r\n          key,\r\n          btn: (h)=>{\r\n            return h('a-button', {\r\n              props: {\r\n                type: 'primary',\r\n                size: 'small',\r\n              },\r\n              on: {\r\n                click: () => this.showDetail(key,data)\r\n              }\r\n            }, '查看详情')\r\n          },\r\n        });\r\n      },\r\n\r\n      reconnect() {\r\n        var that = this;\r\n        if(that.lockReconnect) return;\r\n        that.lockReconnect = true;\r\n        //没连接上会一直重连，设置延迟避免请求过多\r\n        setTimeout(function () {\r\n          console.info(\"尝试重连...\");\r\n          that.initWebSocket();\r\n          that.lockReconnect = false;\r\n        }, 5000);\r\n      },\r\n      heartCheckFun(){\r\n        var that = this;\r\n        //心跳检测,每20s心跳一次\r\n        that.heartCheck = {\r\n          timeout: 20000,\r\n          timeoutObj: null,\r\n          serverTimeoutObj: null,\r\n          reset: function(){\r\n            clearTimeout(this.timeoutObj);\r\n            //clearTimeout(this.serverTimeoutObj);\r\n            return this;\r\n          },\r\n          start: function(){\r\n            var self = this;\r\n            this.timeoutObj = setTimeout(function(){\r\n              //这里发送一个心跳，后端收到后，返回一个心跳消息，\r\n              //onmessage拿到返回的心跳就说明连接正常\r\n              that.websocketSend(\"HeartBeat\");\r\n              console.info(\"客户端发送心跳\");\r\n              //self.serverTimeoutObj = setTimeout(function(){//如果超过一定时间还没重置，说明后端主动断开了\r\n              //  that.websock.close();//如果onclose会执行reconnect，我们执行ws.close()就行了.如果直接执行reconnect 会触发onclose导致重连两次\r\n              //}, self.timeout)\r\n            }, this.timeout)\r\n          }\r\n        }\r\n      },\r\n\r\n\r\n      showDetail(key,data){\r\n        this.$notification.close(key);\r\n        var id = data.msgId;\r\n        getAction(this.url.queryById,{id:id}).then((res) => {\r\n          if (res.success) {\r\n            var record = res.result;\r\n            this.showAnnouncement(record);\r\n          }\r\n        })\r\n\r\n      },\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"css\">\r\n  .header-notice-wrapper {\r\n    top: 50px !important;\r\n  }\r\n</style>\r\n<style lang=\"less\" scoped>\r\n  .header-notice{\r\n    display: inline-block;\r\n    transition: all 0.3s;\r\n\r\n    span {\r\n      vertical-align: initial;\r\n    }\r\n  }\r\n</style>"]}]}