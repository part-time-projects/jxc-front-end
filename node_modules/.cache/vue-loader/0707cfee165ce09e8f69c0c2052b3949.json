{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\views\\system\\modules\\SysCheckRuleModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\views\\system\\modules\\SysCheckRuleModal.vue","mtime":1648374778159},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport pick from 'lodash.pick'\nimport { httpAction } from '@/api/manage'\nimport { validateDuplicateValue, alwaysResolve, failedSymbol } from '@/utils/util'\nimport { FormTypes } from '@/utils/JEditableTableUtil'\nimport JEditableTable from '@comp/jeecg/JEditableTable'\n\nexport default {\n  name: 'SysCheckRuleModal',\n  components: {\n    JEditableTable,\n    'my-action-button': {\n      props: { rowEvent: Object, allowEmpty: Boolean },\n      methods: {\n        confirmIsShow() {\n          const { index, allValues: { inputValues } } = this.rowEvent\n          let value = inputValues[index]\n          return value.digits || value.pattern\n        },\n        handleLineAdd() {\n          const { target } = this.rowEvent\n          target.add()\n        },\n        handleLineDelete() {\n          const { rowId, target } = this.rowEvent\n          target.removeRows(rowId)\n        },\n        renderDeleteButton() {\n          if (this.allowEmpty || this.rowEvent.index > 0) {\n            if (this.confirmIsShow()) {\n              return (\n                <a-popconfirm title=\"确定要删除吗？\" onConfirm={this.handleLineDelete}>\n                  <a-button icon=\"minus\"/>\n                </a-popconfirm>\n              )\n            } else {\n              return (\n                <a-button icon=\"minus\" onClick={this.handleLineDelete}/>\n              )\n            }\n          }\n          return ''\n        },\n      },\n      render() {\n        return (\n          <div>\n            <a-button onClick={this.handleLineAdd} icon=\"plus\"/>\n            &nbsp;\n            {this.renderDeleteButton()}\n          </div>\n        )\n      }\n    }\n  },\n  data() {\n    return {\n      title: '操作',\n      visible: false,\n      model: {},\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 5 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n      },\n      confirmLoading: false,\n      form: this.$form.createForm(this),\n      validatorRules: {\n        ruleName: { rules: [{ required: true, message: '请输入规则名称!' },] },\n        ruleCode: {\n          rules: [\n            { required: true, message: '请输入规则Code!' },\n            { validator: (rule, value, callback) => validateDuplicateValue('sys_check_rule', 'rule_code', value, this.model.id, callback) }\n  ]\n        },\n      },\n      tabs: {\n        activeKey: 'design',\n        global: {\n          key: 'global',\n          columns: [\n            {\n              title: '优先级',\n              key: 'priority',\n              width: '15%',\n              type: FormTypes.select,\n              defaultValue: '1',\n              options: [\n                { title: '优先运行', value: '1' },\n                { title: '最后运行', value: '0' },\n              ],\n              validateRules: []\n            },\n            {\n              title: '规则（正则表达式）',\n              key: 'pattern',\n              width: '50%',\n              type: FormTypes.input,\n              validateRules: [\n                { required: true, message: '规则不能为空' },\n                { handler: this.validatePatternHandler },\n              ]\n            },\n            {\n              title: '提示文本',\n              key: 'message',\n              width: '20%',\n              type: FormTypes.input,\n              validateRules: [\n                { required: true, message: '${title}不能为空' },\n              ]\n            },\n            {\n              title: '操作',\n              key: 'action',\n              width: '15%',\n              slotName: 'action',\n              type: FormTypes.slot\n            }\n          ],\n          dataSource: [],\n        },\n        design: {\n          key: 'design',\n          columns: [\n            {\n              title: '位数',\n              key: 'digits',\n              width: '15%',\n              type: FormTypes.inputNumber,\n              validateRules: [\n                { required: true, message: '${title}不能为空' },\n                { pattern: /^[1-9]\\d*$/, message: '请输入零以上的正整数' },\n              ]\n            },\n            {\n              title: '规则（正则表达式）',\n              key: 'pattern',\n              width: '50%',\n              type: FormTypes.input,\n              validateRules: [\n                { required: true, message: '规则不能为空' },\n                { handler: this.validatePatternHandler }\n              ]\n            },\n            {\n              title: '提示文本',\n              key: 'message',\n              width: '20%',\n              type: FormTypes.input,\n              validateRules: [\n                { required: true, message: '${title}不能为空' },\n              ]\n            },\n            {\n              title: '操作',\n              key: 'action',\n              width: '15%',\n              slotName: 'action',\n              type: FormTypes.slot\n            },\n          ],\n          dataSource: [],\n        }\n      },\n      url: {\n        add: '/sys/checkRule/add',\n        edit: '/sys/checkRule/edit',\n      },\n    }\n  },\n  created() {\n  },\n  methods: {\n\n    validatePatternHandler(type, value, row, column, callback, target) {\n      if (type === 'blur' || type === 'getValues') {\n        try {\n          new RegExp(value)\n          callback(true)\n        } catch (e) {\n          callback(false, '请输入正确的正则表达式')\n        }\n      } else {\n        callback(true) // 不填写或者填写 null 代表不进行任何操作\n      }\n    },\n\n    add() {\n      this.edit({})\n    },\n    edit(record) {\n      this.form.resetFields()\n      this.tabs.activeKey = this.tabs.design.key\n      this.tabs.global.dataSource = []\n      this.tabs.design.dataSource = [{ digits: '', pattern: '', message: '' }]\n      this.model = Object.assign({}, record)\n      this.visible = true\n      this.$nextTick(() => {\n        this.form.setFieldsValue(pick(this.model, 'ruleName', 'ruleCode', 'ruleDescription'))\n        // 子表数据\n        let ruleJson = this.model.ruleJson\n        if (ruleJson) {\n          let ruleList = JSON.parse(ruleJson)\n          // 筛选出全局规则和局部规则\n          let global = [], design = [], priority = '1'\n          ruleList.forEach(rule => {\n            if (rule.digits === '*') {\n              global.push(Object.assign(rule, { priority }))\n            } else {\n              priority = '0'\n              design.push(rule)\n            }\n          })\n          this.tabs.global.dataSource = global\n          this.tabs.design.dataSource = design\n        }\n      })\n    },\n    close() {\n      this.$emit('close')\n      this.visible = false\n    },\n    handleOk() {\n      Promise.all([\n        // 主表单校验\n        alwaysResolve(new Promise((resolve, reject) => {\n          this.form.validateFields((error, values) => error ? reject(error) : resolve(values))\n        })),\n        // 局部规则子表校验\n        alwaysResolve(this.$refs.designTable.getValuesPromise),\n        // 全局规则子表校验\n        alwaysResolve(this.$refs.globalTable.getValuesPromise),\n      ]).then(results => {\n        let [mainResult, designResult, globalResult] = results\n\n        if (mainResult.type === failedSymbol) {\n          return Promise.reject('主表校验未通过')\n        } else if (designResult.type === failedSymbol) {\n          this.tabs.activeKey = this.tabs.design.key\n          return Promise.reject('局部规则子表校验未通过')\n        } else if (globalResult.type === failedSymbol) {\n          this.tabs.activeKey = this.tabs.global.key\n          return Promise.reject('全局规则子表校验未通过')\n        } else {\n          // 所有校验已通过，这一步是整合数据\n          let mainValues = mainResult.data, globalValues = globalResult.data, designValues = designResult.data\n\n          // 整合两个子表的数据\n          let firstGlobal = [], afterGlobal = []\n          globalValues.forEach(v => {\n            v.digits = '*'\n            if (v.priority === '1') {\n              firstGlobal.push(v)\n            } else {\n              afterGlobal.push(v)\n            }\n          })\n          let concatValues = firstGlobal.concat(designValues).concat(afterGlobal)\n          let subValues = concatValues.map(i => pick(i, 'digits', 'pattern', 'message'))\n\n          // 生成 formData，用于传入后台\n          let ruleJson = JSON.stringify(subValues)\n          let formData = Object.assign(this.model, mainValues, { ruleJson })\n\n          // 判断请求方式和请求地址，并发送请求\n          let method = 'post', httpUrl = this.url.add\n          if (this.model.id) {\n            method = 'put'\n            httpUrl = this.url.edit\n          }\n          this.confirmLoading = true\n          return httpAction(httpUrl, formData, method)\n        }\n      }).then((res) => {\n        if (res.success) {\n          this.$message.success(res.message)\n          this.$emit('ok')\n          this.close()\n        } else {\n          this.$message.warning(res.message)\n        }\n      }).catch(e => {\n        console.error(e)\n      }).finally(() => {\n        this.confirmLoading = false\n      })\n    },\n    handleCancel() {\n      this.close()\n    },\n\n  }\n}\n",{"version":3,"sources":["SysCheckRuleModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"SysCheckRuleModal.vue","sourceRoot":"src/views/system/modules","sourcesContent":["<template>\r\n  <a-modal\r\n    :title=\"title\"\r\n    :width=\"1000\"\r\n    :visible=\"visible\"\r\n    :confirmLoading=\"confirmLoading\"\r\n    @ok=\"handleOk\"\r\n    @cancel=\"handleCancel\"\r\n    cancelText=\"关闭\">\r\n\r\n    <a-spin :spinning=\"confirmLoading\">\r\n      <a-form :form=\"form\">\r\n\r\n        <a-form-item\r\n          :labelCol=\"labelCol\"\r\n          :wrapperCol=\"wrapperCol\"\r\n          label=\"规则名称\">\r\n          <a-input placeholder=\"请输入规则名称\" v-decorator=\"['ruleName', validatorRules.ruleName]\"/>\r\n        </a-form-item>\r\n        <a-form-item\r\n          :labelCol=\"labelCol\"\r\n          :wrapperCol=\"wrapperCol\"\r\n          label=\"规则Code\">\r\n          <a-input placeholder=\"请输入规则Code\" v-decorator=\"['ruleCode', validatorRules.ruleCode]\"/>\r\n        </a-form-item>\r\n        <a-form-item\r\n          :labelCol=\"labelCol\"\r\n          :wrapperCol=\"wrapperCol\"\r\n          label=\"规则描述\">\r\n          <a-textarea placeholder=\"请输入规则描述\" v-decorator=\"['ruleDescription', {}]\"/>\r\n        </a-form-item>\r\n\r\n      </a-form>\r\n      <!-- 规则设计 -->\r\n      <a-tabs v-model=\"tabs.activeKey\">\r\n        <a-tab-pane tab=\"局部规则\" :key=\"tabs.design.key\" forceRender>\r\n          <a-alert type=\"info\" showIcon message=\"局部规则按照你输入的位数有序的校验。\"/>\r\n          <j-editable-table\r\n            ref=\"designTable\"\r\n            dragSort\r\n            rowNumber\r\n            :maxHeight=\"240\"\r\n            :columns=\"tabs.design.columns\"\r\n            :dataSource=\"tabs.design.dataSource\"\r\n            style=\"margin-top: 8px;\"\r\n          >\r\n\r\n            <template #action=\"props\">\r\n              <my-action-button :rowEvent=\"props\"/>\r\n            </template>\r\n\r\n          </j-editable-table>\r\n        </a-tab-pane>\r\n        <a-tab-pane tab=\"全局规则\" :key=\"tabs.global.key\" forceRender>\r\n          <j-editable-table\r\n            ref=\"globalTable\"\r\n            dragSort\r\n            rowNumber\r\n            actionButton\r\n            :maxHeight=\"240\"\r\n            :columns=\"tabs.global.columns\"\r\n            :dataSource=\"tabs.global.dataSource\"\r\n          >\r\n\r\n            <template #actionButtonAfter>\r\n              <a-alert type=\"info\" showIcon message=\"全局规则可校验用户输入的所有字符；全局规则的优先级比局部规则的要高。\" style=\"margin-bottom: 8px;\"/>\r\n            </template>\r\n\r\n            <template #action=\"props\">\r\n              <my-action-button :rowEvent=\"props\" allowEmpty/>\r\n            </template>\r\n\r\n          </j-editable-table>\r\n        </a-tab-pane>\r\n      </a-tabs>\r\n    </a-spin>\r\n  </a-modal>\r\n</template>\r\n\r\n<script>\r\n  import pick from 'lodash.pick'\r\n  import { httpAction } from '@/api/manage'\r\n  import { validateDuplicateValue, alwaysResolve, failedSymbol } from '@/utils/util'\r\n  import { FormTypes } from '@/utils/JEditableTableUtil'\r\n  import JEditableTable from '@comp/jeecg/JEditableTable'\r\n\r\n  export default {\r\n    name: 'SysCheckRuleModal',\r\n    components: {\r\n      JEditableTable,\r\n      'my-action-button': {\r\n        props: { rowEvent: Object, allowEmpty: Boolean },\r\n        methods: {\r\n          confirmIsShow() {\r\n            const { index, allValues: { inputValues } } = this.rowEvent\r\n            let value = inputValues[index]\r\n            return value.digits || value.pattern\r\n          },\r\n          handleLineAdd() {\r\n            const { target } = this.rowEvent\r\n            target.add()\r\n          },\r\n          handleLineDelete() {\r\n            const { rowId, target } = this.rowEvent\r\n            target.removeRows(rowId)\r\n          },\r\n          renderDeleteButton() {\r\n            if (this.allowEmpty || this.rowEvent.index > 0) {\r\n              if (this.confirmIsShow()) {\r\n                return (\r\n                  <a-popconfirm title=\"确定要删除吗？\" onConfirm={this.handleLineDelete}>\r\n                    <a-button icon=\"minus\"/>\r\n                  </a-popconfirm>\r\n                )\r\n              } else {\r\n                return (\r\n                  <a-button icon=\"minus\" onClick={this.handleLineDelete}/>\r\n                )\r\n              }\r\n            }\r\n            return ''\r\n          },\r\n        },\r\n        render() {\r\n          return (\r\n            <div>\r\n              <a-button onClick={this.handleLineAdd} icon=\"plus\"/>\r\n              &nbsp;\r\n              {this.renderDeleteButton()}\r\n            </div>\r\n          )\r\n        }\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        title: '操作',\r\n        visible: false,\r\n        model: {},\r\n        labelCol: {\r\n          xs: { span: 24 },\r\n          sm: { span: 5 },\r\n        },\r\n        wrapperCol: {\r\n          xs: { span: 24 },\r\n          sm: { span: 16 },\r\n        },\r\n        confirmLoading: false,\r\n        form: this.$form.createForm(this),\r\n        validatorRules: {\r\n          ruleName: { rules: [{ required: true, message: '请输入规则名称!' },] },\r\n          ruleCode: {\r\n            rules: [\r\n              { required: true, message: '请输入规则Code!' },\r\n              { validator: (rule, value, callback) => validateDuplicateValue('sys_check_rule', 'rule_code', value, this.model.id, callback) }\r\n    ]\r\n          },\r\n        },\r\n        tabs: {\r\n          activeKey: 'design',\r\n          global: {\r\n            key: 'global',\r\n            columns: [\r\n              {\r\n                title: '优先级',\r\n                key: 'priority',\r\n                width: '15%',\r\n                type: FormTypes.select,\r\n                defaultValue: '1',\r\n                options: [\r\n                  { title: '优先运行', value: '1' },\r\n                  { title: '最后运行', value: '0' },\r\n                ],\r\n                validateRules: []\r\n              },\r\n              {\r\n                title: '规则（正则表达式）',\r\n                key: 'pattern',\r\n                width: '50%',\r\n                type: FormTypes.input,\r\n                validateRules: [\r\n                  { required: true, message: '规则不能为空' },\r\n                  { handler: this.validatePatternHandler },\r\n                ]\r\n              },\r\n              {\r\n                title: '提示文本',\r\n                key: 'message',\r\n                width: '20%',\r\n                type: FormTypes.input,\r\n                validateRules: [\r\n                  { required: true, message: '${title}不能为空' },\r\n                ]\r\n              },\r\n              {\r\n                title: '操作',\r\n                key: 'action',\r\n                width: '15%',\r\n                slotName: 'action',\r\n                type: FormTypes.slot\r\n              }\r\n            ],\r\n            dataSource: [],\r\n          },\r\n          design: {\r\n            key: 'design',\r\n            columns: [\r\n              {\r\n                title: '位数',\r\n                key: 'digits',\r\n                width: '15%',\r\n                type: FormTypes.inputNumber,\r\n                validateRules: [\r\n                  { required: true, message: '${title}不能为空' },\r\n                  { pattern: /^[1-9]\\d*$/, message: '请输入零以上的正整数' },\r\n                ]\r\n              },\r\n              {\r\n                title: '规则（正则表达式）',\r\n                key: 'pattern',\r\n                width: '50%',\r\n                type: FormTypes.input,\r\n                validateRules: [\r\n                  { required: true, message: '规则不能为空' },\r\n                  { handler: this.validatePatternHandler }\r\n                ]\r\n              },\r\n              {\r\n                title: '提示文本',\r\n                key: 'message',\r\n                width: '20%',\r\n                type: FormTypes.input,\r\n                validateRules: [\r\n                  { required: true, message: '${title}不能为空' },\r\n                ]\r\n              },\r\n              {\r\n                title: '操作',\r\n                key: 'action',\r\n                width: '15%',\r\n                slotName: 'action',\r\n                type: FormTypes.slot\r\n              },\r\n            ],\r\n            dataSource: [],\r\n          }\r\n        },\r\n        url: {\r\n          add: '/sys/checkRule/add',\r\n          edit: '/sys/checkRule/edit',\r\n        },\r\n      }\r\n    },\r\n    created() {\r\n    },\r\n    methods: {\r\n\r\n      validatePatternHandler(type, value, row, column, callback, target) {\r\n        if (type === 'blur' || type === 'getValues') {\r\n          try {\r\n            new RegExp(value)\r\n            callback(true)\r\n          } catch (e) {\r\n            callback(false, '请输入正确的正则表达式')\r\n          }\r\n        } else {\r\n          callback(true) // 不填写或者填写 null 代表不进行任何操作\r\n        }\r\n      },\r\n\r\n      add() {\r\n        this.edit({})\r\n      },\r\n      edit(record) {\r\n        this.form.resetFields()\r\n        this.tabs.activeKey = this.tabs.design.key\r\n        this.tabs.global.dataSource = []\r\n        this.tabs.design.dataSource = [{ digits: '', pattern: '', message: '' }]\r\n        this.model = Object.assign({}, record)\r\n        this.visible = true\r\n        this.$nextTick(() => {\r\n          this.form.setFieldsValue(pick(this.model, 'ruleName', 'ruleCode', 'ruleDescription'))\r\n          // 子表数据\r\n          let ruleJson = this.model.ruleJson\r\n          if (ruleJson) {\r\n            let ruleList = JSON.parse(ruleJson)\r\n            // 筛选出全局规则和局部规则\r\n            let global = [], design = [], priority = '1'\r\n            ruleList.forEach(rule => {\r\n              if (rule.digits === '*') {\r\n                global.push(Object.assign(rule, { priority }))\r\n              } else {\r\n                priority = '0'\r\n                design.push(rule)\r\n              }\r\n            })\r\n            this.tabs.global.dataSource = global\r\n            this.tabs.design.dataSource = design\r\n          }\r\n        })\r\n      },\r\n      close() {\r\n        this.$emit('close')\r\n        this.visible = false\r\n      },\r\n      handleOk() {\r\n        Promise.all([\r\n          // 主表单校验\r\n          alwaysResolve(new Promise((resolve, reject) => {\r\n            this.form.validateFields((error, values) => error ? reject(error) : resolve(values))\r\n          })),\r\n          // 局部规则子表校验\r\n          alwaysResolve(this.$refs.designTable.getValuesPromise),\r\n          // 全局规则子表校验\r\n          alwaysResolve(this.$refs.globalTable.getValuesPromise),\r\n        ]).then(results => {\r\n          let [mainResult, designResult, globalResult] = results\r\n\r\n          if (mainResult.type === failedSymbol) {\r\n            return Promise.reject('主表校验未通过')\r\n          } else if (designResult.type === failedSymbol) {\r\n            this.tabs.activeKey = this.tabs.design.key\r\n            return Promise.reject('局部规则子表校验未通过')\r\n          } else if (globalResult.type === failedSymbol) {\r\n            this.tabs.activeKey = this.tabs.global.key\r\n            return Promise.reject('全局规则子表校验未通过')\r\n          } else {\r\n            // 所有校验已通过，这一步是整合数据\r\n            let mainValues = mainResult.data, globalValues = globalResult.data, designValues = designResult.data\r\n\r\n            // 整合两个子表的数据\r\n            let firstGlobal = [], afterGlobal = []\r\n            globalValues.forEach(v => {\r\n              v.digits = '*'\r\n              if (v.priority === '1') {\r\n                firstGlobal.push(v)\r\n              } else {\r\n                afterGlobal.push(v)\r\n              }\r\n            })\r\n            let concatValues = firstGlobal.concat(designValues).concat(afterGlobal)\r\n            let subValues = concatValues.map(i => pick(i, 'digits', 'pattern', 'message'))\r\n\r\n            // 生成 formData，用于传入后台\r\n            let ruleJson = JSON.stringify(subValues)\r\n            let formData = Object.assign(this.model, mainValues, { ruleJson })\r\n\r\n            // 判断请求方式和请求地址，并发送请求\r\n            let method = 'post', httpUrl = this.url.add\r\n            if (this.model.id) {\r\n              method = 'put'\r\n              httpUrl = this.url.edit\r\n            }\r\n            this.confirmLoading = true\r\n            return httpAction(httpUrl, formData, method)\r\n          }\r\n        }).then((res) => {\r\n          if (res.success) {\r\n            this.$message.success(res.message)\r\n            this.$emit('ok')\r\n            this.close()\r\n          } else {\r\n            this.$message.warning(res.message)\r\n          }\r\n        }).catch(e => {\r\n          console.error(e)\r\n        }).finally(() => {\r\n          this.confirmLoading = false\r\n        })\r\n      },\r\n      handleCancel() {\r\n        this.close()\r\n      },\r\n\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"less\" scoped></style>"]}]}