{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\finance\\modules\\OtherReceiptModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\finance\\modules\\OtherReceiptModal.vue","mtime":1648374777624},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport pick from 'lodash.pick'\nimport { FormTypes,getRefPromise,VALIDATE_NO_PASSED, validateFormAndTables } from '@/utils/JEditableTableUtil'\nimport { JEditableTableMixin } from '@/mixins/JEditableTableMixin'\nimport JDate from '@/components/jeecg/JDate'\nimport JUpload from '@/components/jeecg/JUpload'\nimport JDictSelectTag from \"@/components/dict/JDictSelectTag\"\nimport { putAction } from '@api/manage'\nimport { billModalMixin } from '../../mixins/billModalMixin'\nimport { getFormatDate } from '../../utils/util'\nimport { validateEntryNo, validateByIsRubric } from '../../utils/editableTableValidate'\n\nexport default {\n  name: 'OtherReceiptModal',\n  mixins: [JEditableTableMixin, billModalMixin],\n  components: {\n    JDate,\n    JUpload,\n    JDictSelectTag,\n  },\n\n  data() {\n    return {\n      width: '1200px',\n      moreStatus: false,\n\n       // 新增时子表默认添加几行空数据\n      addDefaultRowNum: 1,\n      validatorRules: {\n        billNo: {rules: [\n            {required: true, message: '请输入单据编号!'},\n          ]},\n        billDate: {rules: [\n            {required: true, message: '请输入单据日期!'},\n          ]},\n        customerId: {rules: [\n            {required: true, message: '请选择客户!'},\n          ]},\n        amt: {rules: []},\n        deductedAmt: {rules: []},\n        checkedAmt: {rules: []},\n        attachment: {rules: []},\n        remark: {rules: []},\n        billProcStatus: {rules: []},\n        isApproved: {rules: []},\n        isClosed: {rules: []},\n        isVoided: {rules: []},\n        effectiveTime: {rules: []},\n        approverId: {rules: []},\n        flowId: {rules: []},\n        createTime: {rules: []},\n        createBy: {rules: []},\n        sysOrgCode: {rules: []},\n        updateTime: {rules: []},\n        updateBy: {rules: []},\n      },\n      refKeys: ['finReceiptEntry', ],\n      tableKeys:['finReceiptEntry', ],\n      activeKey: 'finReceiptEntry',\n      // 收款明细\n      finReceiptEntryTable: {\n        loading: false,\n        dataSource: [],\n        columns: [\n          {\n            title: '分录号',\n            key: 'entryNo',\n            type: FormTypes.inputNumber,\n            width:\"60px\",\n            placeholder: '请输入${title}',\n            defaultValue: '',\n            validateRules: [\n              { required: true, message: '${title}不能为空' },\n              { pattern: /^[1-9]\\d*$/, message: '请输入零以上的正整数' },\n              { handler: validateEntryNo}],\n          },\n          {\n            title: '结算方式',\n            key: 'settleMethod',\n            type: FormTypes.select,\n            dictCode:\"x_settle_method\",\n            width:\"150px\",\n            defaultValue: '',\n            options:[],\n            validateRules: [{ required: true, message: '${title}不能为空' }],\n          },\n          {\n            title: '资金账户',\n            key: 'bankAccountId',\n            type: FormTypes.select,\n            dictCode:\"bas_bank_account,account_no,id\",\n            width:\"260px\",\n            defaultValue: '',\n            options:[],\n          },\n          {\n            title: '金额',\n            key: 'amt',\n            type: FormTypes.inputNumber,\n            width:\"120px\",\n            defaultValue: '',\n            validateRules: [\n              { required: true, message: '${title}不能为空' },\n              { handler: validateByIsRubric}\n            ],\n          },\n          {\n            title: '备注',\n            key: 'remark',\n            type: FormTypes.input,\n            width:\"200px\",\n            defaultValue: '',\n          },\n          {\n            title: '备注2',\n            key: 'remark2',\n            type: FormTypes.input,\n            width:\"200px\",\n            defaultValue: '',\n          },\n          {\n            title: '备注3',\n            key: 'remark3',\n            type: FormTypes.input,\n            width:\"200px\",\n            defaultValue: '',\n          },\n        ]\n      },\n      url: {\n        add: \"/finance/finReceipt/add\",\n        edit: \"/finance/finReceipt/edit\",\n        approve: \"/finance/finReceipt/approve\",\n        finReceiptEntry: {\n          list: '/finance/finReceipt/queryFinReceiptEntryByMainId'\n        },\n      }\n    }\n  },\n\n  methods: {\n    getAllTable() {\n      let values = this.tableKeys.map(key => getRefPromise(this, key));\n      return Promise.all(values)\n    },\n\n    addInit() {\n      //其他收款\n      this.model.receiptType = '199';\n      this.model.isRubric = 0;\n      //处理状态：编辑中\n      this.model.billProcStatus = '12';\n      this.model.amt = 0;\n      this.model.deductedAmt = 0;\n      this.model.checkedAmt = 0;\n\n      // 请求后台的填值规则接口地址\n      const url = '/sys/fillRule/executeRuleByCode/';\n      const ruleCode = 'receipt_bill_no';\n      const that = this\n      putAction(url + ruleCode, {}).then(res => {\n        // 执行成功，获取返回的值，并赋到页面上\n        if (res.success) {\n          that.$nextTick(() => {\n            that.form.setFieldsValue({'billNo':res.result, 'billDate':getFormatDate()});\n          })\n        }\n      })\n    },\n\n    /** 调用完edit()方法之后会自动调用此方法 */\n    editAfter() {\n      if (this.action === 'add') {\n        this.addInit()\n      }\n      let fieldval = pick(this.model,'billNo','billDate','customerId','isRubric','amt','checkedAmt','deductedAmt','attachmentId','remark','billProcStatus','isApproved','isClosed','isVoided','effectiveTime','approverId','flowId','createTime','createBy','sysOrgCode','updateTime','updateBy')\n      this.$nextTick(() => {\n        this.form.setFieldsValue(fieldval)\n      });\n      // 加载子表数据\n      if (this.model.id) {\n        let params = { id: this.model.id };\n        this.requestSubTableData(this.url.finReceiptEntry.list, params, this.finReceiptEntryTable);\n      }\n    },\n    /** 整理成formData */\n    classifyIntoFormData(allValues) {\n      let main = Object.assign(this.model, allValues.formValue);\n\n      return {\n        ...main, // 展开\n        finReceiptEntryList: allValues.tablesValue[0].values,\n      }\n    },\n    validateError(msg){\n      this.$message.error(msg);\n    },\n    popupCallback(row){\n      this.form.setFieldsValue(pick(row,'billNo','billDate','customerId','isRubric','amt','checkedAmt','deductedAmt','attachmentId','remark','billProcStatus','isApproved','isClosed','isVoided','effectiveTime','approverId','flowId','createTime','createBy','sysOrgCode','updateTime','updateBy'))\n    },\n\n    onEntryDeleted(deleteIds) {\n      this.calcTotalAmt();\n    },\n\n    //单元值改变一个字符就触发一次\n    onValueChange(event) {\n      const { type, row, column, value, target } = event;\n      if (column.key === \"amt\") {\n        this.calcTotalAmt();\n      }\n    },\n\n    calcTotalAmt() {\n      let { error, values } = this.$refs.finReceiptEntry.getValuesSync({ validate: false});\n      let total = 0;\n      for (let v of values) {\n        let amt = Number(v['amt']);\n        if (!isNaN(amt)) {\n          total += amt;\n        }\n      }\n\n      const that = this;\n      that.$nextTick(() => {\n        that.form.setFieldsValue({'amt':total});\n      })\n    },\n\n  }\n\n}\n",null]}