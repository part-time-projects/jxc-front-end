{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\components\\dict\\JDictSelectTag.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\components\\dict\\JDictSelectTag.vue","mtime":1648374777524},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n  import {ajaxGetDictItems,getDictItemsFromCache} from '@/api/api'\n\n  export default {\n    name: \"JDictSelectTag\",\n    props: {\n      dictCode: String,\n      placeholder: String,\n      triggerChange: Boolean,\n      disabled: Boolean,\n      value: [String, Number],\n      type: String\n    },\n    data() {\n      return {\n        dictOptions: [],\n        tagType:\"\"\n      }\n    },\n    watch:{\n      dictCode:{\n        immediate:true,\n        handler() {\n          this.initDictData()\n        },\n      }\n    },\n    created() {\n      // console.log(this.dictCode);\n      if(!this.type || this.type===\"list\"){\n        this.tagType = \"select\"\n      }else{\n        this.tagType = this.type\n      }\n      //获取字典数据\n      // this.initDictData();\n    },\n    computed: {\n      getValueSting(){\n        return this.value != null ? this.value.toString() : null;\n      },\n    },\n    methods: {\n      initDictData() {\n        //优先从缓存中读取字典配置\n        if(getDictItemsFromCache(this.dictCode)){\n          this.dictOptions = getDictItemsFromCache(this.dictCode);\n          return\n        }\n\n        //根据字典Code, 初始化字典数组\n        ajaxGetDictItems(this.dictCode, null).then((res) => {\n          if (res.success) {\n//                console.log(res.result);\n            this.dictOptions = res.result;\n          }\n        })\n      },\n      handleInput(e) {\n        let val;\n        if(this.tagType==\"radio\"){\n          val = e.target.value\n        }else{\n          val = e\n        }\n        console.log(val);\n        if(this.triggerChange){\n          this.$emit('change', val);\n        }else{\n          this.$emit('input', val);\n        }\n      },\n      setCurrentDictOptions(dictOptions){\n        this.dictOptions = dictOptions\n      },\n      getCurrentDictOptions(){\n        return this.dictOptions\n      }\n    }\n  }\n",{"version":3,"sources":["JDictSelectTag.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAoBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"JDictSelectTag.vue","sourceRoot":"src/components/dict","sourcesContent":["<template>\r\n  <a-radio-group v-if=\"tagType=='radio'\" @change=\"handleInput\" :value=\"getValueSting\" :disabled=\"disabled\">\r\n    <a-radio v-for=\"(item, key) in dictOptions\" :key=\"key\" :value=\"item.value\">{{ item.text }}</a-radio>\r\n  </a-radio-group>\r\n\r\n  <a-radio-group v-else-if=\"tagType=='radioButton'\"  buttonStyle=\"solid\" @change=\"handleInput\" :value=\"getValueSting\" :disabled=\"disabled\">\r\n    <a-radio-button v-for=\"(item, key) in dictOptions\" :key=\"key\" :value=\"item.value\">{{ item.text }}</a-radio-button>\r\n  </a-radio-group>\r\n\r\n  <a-select v-else-if=\"tagType=='select'\" :getPopupContainer = \"(target) => target.parentNode\" :placeholder=\"placeholder\" :disabled=\"disabled\" :value=\"getValueSting\" @change=\"handleInput\">\r\n    <a-select-option :value=\"undefined\">请选择</a-select-option>\r\n    <a-select-option v-for=\"(item, key) in dictOptions\" :key=\"key\" :value=\"item.value\">\r\n      <span style=\"display: inline-block;width: 100%\" :title=\" item.text || item.label \">\r\n        {{ item.text || item.label }}\r\n      </span>\r\n    </a-select-option>\r\n  </a-select>\r\n</template>\r\n\r\n<script>\r\n  import {ajaxGetDictItems,getDictItemsFromCache} from '@/api/api'\r\n\r\n  export default {\r\n    name: \"JDictSelectTag\",\r\n    props: {\r\n      dictCode: String,\r\n      placeholder: String,\r\n      triggerChange: Boolean,\r\n      disabled: Boolean,\r\n      value: [String, Number],\r\n      type: String\r\n    },\r\n    data() {\r\n      return {\r\n        dictOptions: [],\r\n        tagType:\"\"\r\n      }\r\n    },\r\n    watch:{\r\n      dictCode:{\r\n        immediate:true,\r\n        handler() {\r\n          this.initDictData()\r\n        },\r\n      }\r\n    },\r\n    created() {\r\n      // console.log(this.dictCode);\r\n      if(!this.type || this.type===\"list\"){\r\n        this.tagType = \"select\"\r\n      }else{\r\n        this.tagType = this.type\r\n      }\r\n      //获取字典数据\r\n      // this.initDictData();\r\n    },\r\n    computed: {\r\n      getValueSting(){\r\n        return this.value != null ? this.value.toString() : null;\r\n      },\r\n    },\r\n    methods: {\r\n      initDictData() {\r\n        //优先从缓存中读取字典配置\r\n        if(getDictItemsFromCache(this.dictCode)){\r\n          this.dictOptions = getDictItemsFromCache(this.dictCode);\r\n          return\r\n        }\r\n\r\n        //根据字典Code, 初始化字典数组\r\n        ajaxGetDictItems(this.dictCode, null).then((res) => {\r\n          if (res.success) {\r\n//                console.log(res.result);\r\n            this.dictOptions = res.result;\r\n          }\r\n        })\r\n      },\r\n      handleInput(e) {\r\n        let val;\r\n        if(this.tagType==\"radio\"){\r\n          val = e.target.value\r\n        }else{\r\n          val = e\r\n        }\r\n        console.log(val);\r\n        if(this.triggerChange){\r\n          this.$emit('change', val);\r\n        }else{\r\n          this.$emit('input', val);\r\n        }\r\n      },\r\n      setCurrentDictOptions(dictOptions){\r\n        this.dictOptions = dictOptions\r\n      },\r\n      getCurrentDictOptions(){\r\n        return this.dictOptions\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n</style>"]}]}