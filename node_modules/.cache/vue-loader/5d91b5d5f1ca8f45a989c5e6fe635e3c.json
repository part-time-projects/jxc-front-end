{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\stock\\modules\\OtherOutBillModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\stock\\modules\\OtherOutBillModal.vue","mtime":1648374777646},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport pick from 'lodash.pick'\nimport { FormTypes,getRefPromise,VALIDATE_NO_PASSED, validateFormAndTables } from '@/utils/JEditableTableUtil'\nimport { JEditableTableMixin } from '@/mixins/JEditableTableMixin'\nimport JDate from '@/components/jeecg/JDate'\nimport JUpload from '@/components/jeecg/JUpload'\nimport JSelectUserByDep from '@/components/jeecgbiz/JSelectUserByDep'\nimport JDictSelectTag from \"@/components/dict/JDictSelectTag\"\nimport { getAction, putAction } from '@api/manage'\nimport {getFormatDate} from '../../utils/util'\nimport Vue from \"vue\";\nimport OnlCgreportSelectModal from '../../components/OnlCgreportSelectModal'\n\nexport default {\n  name: 'OtherOutBillModal',\n  mixins: [JEditableTableMixin],\n  components: {\n    JDate,\n    JUpload,\n    JSelectUserByDep,\n    JDictSelectTag,\n    OnlCgreportSelectModal\n  },\n  data() {\n    return {\n      action: '',\n      moreStatus: false,\n      width: '1200px',\n      spans: {\n        labelCol1: { span: 2 },\n        wrapperCol1: { span: 22 },\n        labelCol2: { span: 4 },\n        wrapperCol2: { span: 20 },\n        labelCol3: { span: 6 },\n        wrapperCol3: { span: 18 },\n        labelCol6: { span: 12 },\n        wrapperCol6: { span: 12 }\n       },\n\n      // 新增时子表默认添加几行空数据\n      addDefaultRowNum: 1,\n      validatorRules: {\n        stockIoType: {rules: [\n        ]},\n        billNo: {rules: [\n          {required: true, message: '请输入单据编号!'},\n        ]},\n        billDate: {rules: [\n          {required: true, message: '请输入单据日期!'},\n        ]},\n        sourceType: {rules: [\n        ]},\n        sourceId: {rules: [\n        ]},\n        sourceNo: {rules: [\n        ]},\n        clerkId: {rules: [\n        ]},\n        handlerId: {rules: [\n        ]},\n        hasRp: {rules: [\n        ]},\n        isRubric: {rules: [\n        ]},\n        isSameSettle: {rules: [\n        ]},\n        supplierId: {rules: [\n        ]},\n        customerId: {rules: [\n        ]},\n        attachment: {rules: [\n        ]},\n        remark: {rules: [\n        ]},\n        billProcStatus: {rules: [\n        ]},\n        approverId: {rules: [\n        ]},\n        flowId: {rules: [\n        ]},\n        isApproved: {rules: [\n        ]},\n        effectiveTime: {rules: [\n        ]},\n        isVoided: {rules: [\n        ]},\n        isClosed: {rules: [\n        ]},\n        sysOrgCode: {rules: [\n        ]},\n        createBy: {rules: [\n        ]},\n        createTime: {rules: [\n        ]},\n        updateBy: {rules: [\n        ]},\n        updateTime: {rules: [\n        ]},\n      },\n      refKeys: ['stkIoBillEntry', ],\n      tableKeys:['stkIoBillEntry', ],\n      activeKey: 'stkIoBillEntry',\n      // 明细\n      stkIoBillEntryTable: {\n        loading: false,\n        dataSource: [],\n        columns: [\n          {\n            title: '分录号',\n            key: 'entryNo',\n            type: FormTypes.inputNumber,\n            width:\"60px\",\n            validateRules: [\n              { required: true, message: '${title}不能为空' },\n              { pattern: /^[1-9]\\d*$/, message: '请输入零以上的正整数' },\n              { handler: this.validateEntryNoHandler}],\n          },\n          { //sourceType、sourceEntryId、sourceEntryNo应一起考虑\n            title: '源单分录号',\n            key: 'sourceEntryNo',\n            type: FormTypes.input,\n            width:\"180px\",\n            defaultValue: '',\n            disabled: true,\n          },\n          {\n            title: '物料',\n            key: 'materialId',\n            type: FormTypes.sel_search,\n            dictCode:\"bas_material,name,id\",\n            width:\"200px\",\n            placeholder: '请输入${title}',\n            defaultValue: '',\n            validateRules: [{ required: true, message: '${title}不能为空' }],\n            options:[],\n          },\n          {\n            title: '仓库',\n            key: 'warehouseId',\n            type: FormTypes.select,\n            dictCode:\"bas_warehouse,name,id\",\n            width:\"150px\",\n            placeholder: '请输入${title}',\n            defaultValue: '',\n            options:[],\n            validateRules: [{ required: true, message: '${title}不能为空' }],\n          },\n          {\n            title: '批次号',\n            key: 'batchNo',\n            type: FormTypes.input,\n            width:\"200px\",\n            placeholder: '请输入${title}',\n            defaultValue: '',\n            validateRules: [{ required: true, message: '${title}不能为空' }],\n          },\n          {\n            title: '',\n            key: 'batchNoSelectModal',\n            type: FormTypes.slot,\n            slotName: 'batchNoSelectModal',\n            orgFields: \"material_id,warehouse_id,batch_no,unit_id,unit_id,qty,cost,id\",\n            destFields: \"materialId,warehouseId,batchNo,unitId,inventoryUnitId,inventoryQty,inventoryCost,inventoryId\",\n            width:\"45px\",\n          },\n          {\n            title: '库存单位',\n            key: 'inventoryUnitId',\n            type: FormTypes.select,\n            dictCode:\"bas_measure_unit,name,id\",\n            width:\"100px\",\n            disabled:true,\n          },\n          {\n            title: '库存数量',\n            key: 'inventoryQty',\n            type: FormTypes.input,\n            statistics: \"true\",\n            width:\"100px\",\n            disabled:true,\n          },\n          {\n            title: '出库单位',\n            key: 'unitId',\n            type: FormTypes.select,\n            dictCode:\"bas_measure_unit,name,id\",\n            width:\"100px\",\n            placeholder: '请输入${title}',\n            defaultValue: '',\n            validateRules: [{ required: true, message: '${title}不能为空' }],\n            options:[],\n          },\n          {\n            title: '出库数量',\n            key: 'qty',\n            type: FormTypes.inputNumber,\n            statistics: \"true\",\n            width:\"100px\",\n            placeholder: '请输入${title}',\n            defaultValue: '',\n            validateRules:[\n              { required: true, message: '${title}不能为空' },\n              { handler: this.validateQtyHandler}]\n          },\n          {\n            title: '出库成本',\n            key: 'cost',\n            type: FormTypes.inputNumber,\n            statistics: \"true\",\n            width:\"100px\",\n            placeholder: '请输入${title}',\n            defaultValue: '',\n            disabled: true,\n          },\n          {\n            title: '库存批次id',\n            key: 'inventoryId',\n            type: FormTypes.hidden,\n            width:\"10px\",\n            disabled:true,\n          },\n          {\n            title: '库存成本',\n            key: 'inventoryCost',\n            type: FormTypes.input,\n            statistics: \"true\",\n            width:\"100px\",\n            disabled:true,\n          },\n          {\n            title: '备注',\n            key: 'remark',\n            type: FormTypes.input,\n            width:\"200px\",\n            placeholder: '请输入${title}',\n            defaultValue: '',\n          },\n          {\n            title: '备注2',\n            key: 'remark2',\n            type: FormTypes.input,\n            width:\"200px\",\n            placeholder: '请输入${title}',\n            defaultValue: '',\n          },\n          {\n            title: '备注3',\n            key: 'remark3',\n            type: FormTypes.input,\n            width:\"200px\",\n            placeholder: '请输入${title}',\n            defaultValue: '',\n          },\n        ],\n        settingColumns: []\n      },\n      url: {\n        add: \"/stock/stkIoBill/add\",\n        edit: \"/stock/stkIoBill/edit\",\n        approve: \"/stock/stkIoBill/approve\",\n        stkIoBillEntry: {\n          list: '/stock/stkIoBill/queryEntryByMainId',\n          editingList: '/stock/stkIoBill/queryEditingEntryByMainId'\n        },\n      }\n    }\n  },\n\n  computed: {\n    readOnly: function() {\n      return this.action !== \"add\" && this.action !== \"edit\";\n    }\n  },\n\n  methods: {\n    getAllTable() {\n      let values = this.tableKeys.map(key => getRefPromise(this, key))\n      return Promise.all(values)\n    },\n\n    addInit() {\n      //销售出库\n      this.model.stockIoType = '299'\n      this.model.isRubric = 0\n      //是否有往来\n      this.model.hasRp = 0\n      //结算是否同出库（或取自系统参数）\n      this.model.isSameSettle = 0\n      //处理状态：编辑中\n      this.model.billProcStatus = '12'\n\n      // 请求后台的填值规则接口地址\n      const url = '/sys/fillRule/executeRuleByCode/'\n      const ruleCode = 'stock_io_bill_no'\n      const that = this\n      putAction(url + ruleCode, {}).then(res => {\n        // 执行成功，获取返回的值，并赋到页面上\n        if (res.success) {\n          that.model.billNo = res.result;\n          that.$nextTick(() => {\n            that.form.setFieldsValue({'billNo':res.result, 'billDate':getFormatDate()})\n          })\n        }\n      })\n    },\n    /** 调用完edit()方法之后会自动调用此方法 */\n    editAfter() {\n      if (this.action === 'add') {\n          this.addInit()\n      }\n\n      let fieldval = pick(this.model,'billNo','billDate','sourceType','sourceId','sourceNo','clerkId','handlerId','isRubric','supplierId','customerId','attachment','remark','billProcStatus','approverId','flowId','isApproved','effectiveTime','isVoided','isClosed','sysOrgCode','createBy','createTime','updateBy','updateTime')\n      this.$nextTick( ()=>this.form.setFieldsValue(fieldval) );\n      // 加载子表数据\n      if (this.model.id) {\n        let params = { id: this.model.id }\n        let url = this.readOnly ? this.url.stkIoBillEntry.list : this.url.stkIoBillEntry.editingList;\n        this.requestSubTableData(url, params, this.stkIoBillEntryTable);\n      }\n    },\n    /** 整理成formData */\n    classifyIntoFormData(allValues) {\n      let main = Object.assign(this.model, allValues.formValue)\n\n      return {\n        ...main, // 展开\n        stkIoBillEntryList: allValues.tablesValue[0].values,\n      }\n    },\n    validateError(msg){\n      this.$message.error(msg)\n    },\n    popupCallback(row){\n      this.form.setFieldsValue(pick(row,'billNo','billDate','sourceType','sourceId','sourceNo','clerkId','handlerId','isRubric','supplierId','customerId','attachment','remark','billProcStatus','approverId','flowId','isApproved','effectiveTime','isVoided','isClosed','sysOrgCode','createBy','createTime','updateBy','updateTime'))\n    },\n\n    handleSave() {\n      this.handleOk()\n    },\n    handleSubmit() {\n      //处理状态=编辑完成\n      this.form.setFieldsValue({billProcStatus:'13'})\n\n      /** 触发表单验证 */\n      this.getAllTable().then(tables => {\n        /** 一次性验证主表和所有的次表 */\n        return validateFormAndTables(this.form, tables)\n      }).then(allValues => {\n        if (typeof this.classifyIntoFormData !== 'function') {\n          throw this.throwNotFunction('classifyIntoFormData')\n        }\n        let formData = this.classifyIntoFormData(allValues)\n        // 发起请求\n        return this.request(formData)\n      }).catch(e => {\n        //处理状态=编辑中\n        this.form.setFieldsValue({billProcStatus:'12'})\n\n        if (e.error === VALIDATE_NO_PASSED) {\n          // 如果有未通过表单验证的子表，就自动跳转到它所在的tab\n          this.activeKey = e.index == null ? this.activeKey : this.refKeys[e.index]\n        } else {\n          console.error(e)\n        }\n      })\n    },\n\n    handleApproved() {\n      const that = this;\n      putAction(that.url.approve, {id: that.model.id}).then((res) => {\n        if (res.success) {\n          that.$message.success(res.message);\n          that.$emit('ok')\n          that.close()\n        } else {\n          that.$message.warning(res.message);\n        }\n      })\n    },\n\n    handleToggleMore() {\n      this.moreStatus = !this.moreStatus\n    },\n\n    //列设置更改事件\n    onColSettingsChange (checkedValues) {\n      let key = this.$route.name+\"/stkIoBillEntryTable:colsettings\";\n      Vue.ls.set(key, checkedValues, 7*24*60*60*1000)\n      this.stkIoBillEntryTable.settingColumns = checkedValues;\n      this.stkIoBillEntryTable.columns.forEach (function (item,i,array ) {\n        if (checkedValues.includes(item.key)) {\n          if (item.typeDef !== undefined && item.typeDef !== null\n            && item.typeDef !== \"\" && item.typeDef !== FormTypes.hidden) {\n            item.type = item.typeDef;\n          }\n        } else if (item.type !== FormTypes.hidden) {\n          item.typeDef = item.type;\n          item.type = FormTypes.hidden;\n        }\n      });\n    },\n\n    initColumns(){\n      //权限过滤（列权限控制时打开，修改第二个参数为授权码前缀）\n      //this.defColumns = colAuthFilter(this.defColumns,'testdemo:');\n\n      const key = this.$route.name+\"/stkIoBillEntryTable:colsettings\";\n      let colSettings = Vue.ls.get(key);\n      let that = this;\n      if (colSettings == null) {\n        this.stkIoBillEntryTable.columns.forEach(function (item,i,array ) {\n          that.stkIoBillEntryTable.settingColumns.push(item.key);\n        })\n      }else{\n        this.stkIoBillEntryTable.settingColumns = colSettings;\n        this.stkIoBillEntryTable.columns.forEach(function (item,i,array ) {\n          if (colSettings.includes(item.key)) {\n            if (item.typeDef !== undefined && item.typeDef !== null\n              && item.typeDef !== \"\" && item.typeDef !== FormTypes.hidden) {\n              item.type = item.typeDef;\n            }\n          } else {\n            item.typeDef = item.type;\n            item.type = FormTypes.hidden;\n          }\n        });\n      }\n    },\n\n    onOutEntryAdded(event){\n      const { row, target } = event\n      let { values } = target.getValuesSync({ validate: false });\n      let maxEntryNo = 0;\n      for (let val of values) {\n        let entryNo = Number(val['entryNo']);\n        if (!isNaN(entryNo) && entryNo > maxEntryNo) maxEntryNo = entryNo;\n      }\n      maxEntryNo += 10;\n      target.setValues([{rowKey: row.id, values: {entryNo: maxEntryNo}}]);\n    },\n\n    //单元值改变一个字符就触发一次\n    onValueChange(event) {\n      const { type, row, column, value, target } = event\n\n      //触发：物料ID、仓库id、批次号、出库数量触发，前三者引起库存数量、库存成本等变化，\n      //      这都需要重新计算，所以：简化为每次change都计算。\n      //联动：出库成本\n      let qty = Number(value),\n          inventoryQty = Number(row.inventoryQty),\n          inventoryConst = Number(row.inventoryCost);\n      if (!isNaN(qty) && !isNaN(inventoryQty) && !isNaN(inventoryConst) && inventoryQty>0 &&\n          row.unitId && row.unitId!==\"\" && row.inventoryUnitId && row.inventoryUnitId!==\"\") {\n        const key = row.unitId + \"/\" + row.inventoryUnitId;\n        let rate = row.unitId===row.inventoryUnitId ? 1 : Vue.ls.get(key);\n        if (rate==null) {\n          const url = '/bas/basMeasureUnit/getRate';\n          const params = {toId: row.unitId, fromId: row.inventoryUnitId};\n          getAction(url, params).then(res => {\n            if (res.success) {\n              rate = res.result;\n              Vue.ls.set(key, rate, 7*24*60*60*1000)\n\n              let cost = inventoryConst * qty / (inventoryQty * rate);\n              cost = cost.toFixed(2)\n              target.setValues([{rowKey: row.id, values: {cost: cost}}]);\n            }\n          });\n        }\n        else {\n          let cost = inventoryConst * qty / (inventoryQty * rate);\n          cost = cost.toFixed(2);\n          target.setValues([{rowKey: row.id, values: {cost: cost}}]);\n        }\n      }\n    },\n\n    handleBatchNoSelect(props){\n      let row = props.getValue();\n      let orgFields = props.column.orgFields.split(',');\n      let destFields = props.column.destFields.split(',');\n      let queryParams = {};\n      for(let i = 0; i < orgFields.length; i++) {\n        queryParams[orgFields[i]] = row[destFields[i]];\n      }\n      this.$refs.selectModal.initQueryParams(queryParams);\n      this.$refs.selectModal.visible = true;\n    },\n\n    handleBatchNoSelectCallback(props, selectedRows){\n      let { rowId, target } = props;\n      let orgFields = props.column.orgFields.split(',');\n      let destFields = props.column.destFields.split(',');\n      for(let i = 0; i < selectedRows.length; i++) {\n        let values = {};\n        for(let j = 0; j < orgFields.length; j++) {\n          values[destFields[j]] = selectedRows[i][orgFields[j]];\n        }\n\n        if (i===0) {\n          target.setValues([{rowKey: rowId, values: values}]);\n        } else {\n          target.add();\n          let rowId2 = target.rows[target.rows.length - 1].id;\n          target.setValues([{rowKey: rowId2, values: values}]);\n        }\n      }\n    },\n\n    validateEntryNoHandler(type, value, row, column, callback, target) {\n      if (type !== 'blur') {\n        callback();//无参或者null：不做操作\n        return;\n      }\n\n      let { values } = target.getValuesSync({ validate: false });\n      let count = 0;\n      for (let val of values) {\n        if (Number(val['entryNo']) === Number(value)) {\n          if (++count >= 2) {\n            callback(false, '${title}不能重复');\n            return;\n          }\n        }\n      }\n      callback(true); //true：通过验证\n    },\n\n    validateQtyHandler(type, value, row, column, callback, target) {\n      if (type !== 'blur') {\n        callback();\n        return;\n      }\n\n      let { values } = target.getValuesSync({ validate: false, rowIds: [row.id]});\n      let inventoryQty = Number(values[0].inventoryQty);\n      let qty = Number(value);\n      if (isNaN(qty) || isNaN(inventoryQty)) {\n        callback();\n        return;\n      }\n      if (qty > inventoryQty) {\n        callback(false, '不能大于库存数量！');\n        return;\n      }\n\n      let inventoryId = values[0].inventoryId;\n      if (!inventoryId) {\n        callback();\n        return;\n      }\n      let totalQty = 0;\n      let obj = target.getValuesSync({ validate: false});\n      values = obj.values;\n      for(let v of values) {\n        qty = Number(v.qty);\n        if (!isNaN(qty)) totalQty += qty;\n      }\n      if (totalQty > inventoryQty) {\n        callback(false, '该库存批次的出库数量合计不能大于库存数量！');\n      } else {\n        callback(true);\n      }\n    },\n  },\n\n  created() {\n    this.initColumns();\n  },\n}\n",null]}