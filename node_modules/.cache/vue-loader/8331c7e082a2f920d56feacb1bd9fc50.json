{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\components\\OnlCgreportSelectModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\components\\OnlCgreportSelectModal.vue","mtime":1648374777614},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport '@/assets/less/TableExpand.less'\nimport { getAction } from '@/api/manage'\nimport { filterMultiDictText } from '@/components/dict/JDictSelectUtil'\nimport {filterObj} from '@/utils/util';\n\nexport default {\n  name: \"OnlCgreportSelectModal\",\n  mixins: [],\n  components: {\n  },\n\n  props: {\n    title: {\n      type: String,\n      default: '选择'\n    },\n    reportId: {\n      type: String,\n      required: true\n    },\n    params: {//对应sqlParams\n      type: Object,\n      default:() => ({}) //函数体需带括号\n      },\n    multiSelectable: {\n      type: Boolean,\n      default: false\n    },\n    width: {\n      type: Number,\n      default: 1000\n    },\n    fullscreen: {\n      type: Boolean,\n      default: false\n    },\n    switchFullscreen: {\n      type: Boolean,\n      default: true\n    },\n  },\n\n  data() {\n    return {\n      visible: false,\n      //报表定义中的查询字段\n      queryFields: [],\n      //查询参数，多个页面的查询参数用 ReportId 作为键来区分\n      queryParamsMap: {},\n      //报表定义SQL中嵌入的参数\n      sqlParams:{},\n      sorter: {\n        column: '',\n        order: 'desc',\n      },\n      dictOptions: {},\n      toggleSearchStatus: false, //搜索 展开/关闭\n      description: '',\n      url: {\n        getColumnsAndData: '/online/cgreport/api/getColumnsAndData/',\n        getqueryFields: '/online/cgreport/api/getQueryInfo/',\n        getSqlParams:'/online/cgreport/api/getParamsInfo/'\n      },\n      table: {\n        loading: true,\n        // 表头\n        columns: [],\n        //数据集\n        dataSource: [],\n        // 选择器\n        selectedRowKeys: [],\n        selectionRows: [],\n        scroll: { x: true },\n        // 分页参数\n        pagination: {\n          current: 1,\n          pageSize: 10,\n          pageSizeOptions: ['10', '20', '30'],\n          showTotal: (total, range) => {\n            return range[0] + '-' + range[1] + ' 共' + total + '条'\n          },\n          showQuickJumper: true,\n          showSizeChanger: true,\n          total: 0\n        }\n      },\n      cgreportHeadName:\"\"\n    }\n  },\n\n  mounted() {\n    this.initSqlParams();\n    this.initQueryFields();\n  },\n\n  computed: {\n    queryParams: {\n      get() {\n        return this.queryParamsMap[this.reportId]\n      },\n      set(newVal) {\n        this.$set(this.queryParamsMap, this.reportId, newVal)\n      }\n    }\n  },\n  methods: {\n    //报表定义SQL中嵌入的参数\n    initSqlParams(){\n      this.sqlParams={}\n      getAction(`${this.url.getSqlParams}${this.reportId}`).then((res) => {\n        if (res.success) {\n          if(res.result && res.result.length>0){\n            for(let i of res.result){\n              //参数来自引用本Modal时设置的属性\n              this.sqlParams['self_'+i.paramName] = (!this.params[i.paramName]) ? \"\" : this.params[i.paramName];\n            }\n          }\n        } else {\n          this.$message.warning(res.message)\n        }\n        // this.loadData()\n      })\n    },\n\n    //报表的动态查询参数\n    initQueryFields() {\n      getAction(`${this.url.getqueryFields}${this.reportId}`).then((res) => {\n        if (res.success) {\n          this.queryFields = res.result\n        } else {\n          this.$message.warning(res.message)\n        }\n        this.loadData()\n      })\n    },\n\n    //显示本Modal前，调用本函数传递引用页面form或table值作为查询条件参数；\n    //readonly为true，表示传入的有值参数不能修改。\n    initQueryParams(queryParams, readOnly = true) {\n      let queryFields = [];\n      for(let item of this.queryFields) {\n        item.readOnly = false;\n        if (readOnly){\n          for(let x in queryParams){\n            if (item.field === x) {\n              if (queryParams[x]) item.readOnly = queryParams[x]!=='';\n              break;\n            }\n          }\n        }\n        queryFields.push(item);\n      }\n      this.queryFields = queryFields;\n      this.queryParams = queryParams;\n      this.loadData();\n    },\n\n    loadData(arg) {\n      if (arg === 1) {\n        this.table.pagination.current = 1\n      }\n      let params = this.getQueryParams();//查询条件\n      this.table.loading = true\n\n      getAction(`${this.url.getColumnsAndData}${this.reportId}`, params).then(res => {\n        if (res.success) {\n          let { data, columns, cgreportHeadName, dictOptions, fieldHrefSlots } = res.result\n\n          this.dictOptions = dictOptions\n          for(let a=0;a<columns.length;a++){\n            if(columns[a].customRender){\n              let field_name = columns[a].customRender;\n              columns[a].customRender = (t => t ? filterMultiDictText(this.dictOptions[field_name], t + '') : t)\n            }\n          }\n          this.table.columns = [...columns]\n          this.cgreportHeadName = cgreportHeadName\n          this.fieldHrefSlots = fieldHrefSlots\n          if (data) {\n            this.table.pagination.total = Number(data.total)\n            this.table.dataSource = data.records\n          } else {\n            this.table.pagination.total = 0\n            this.table.dataSource = []\n          }\n\n        }else{\n          this.$message.warn('查询失败：'+res.message)\n        }\n\n      }).catch((e) => {\n        console.error(e)\n        this.$message.error('查询失败')\n      }).finally(() => {\n        this.table.loading = false\n      })\n    },\n    getQueryParams() {\n      let param = Object.assign({}, this.queryParams, this.sorter,this.sqlParams);\n      param.pageNo = this.table.pagination.current;\n      param.pageSize = this.table.pagination.pageSize;\n      return filterObj(param);\n    },\n    searchByQuery() {\n      this.loadData(1);\n    },\n    searchReset() {\n      let queryParams = {};\n      for(let item of this.queryFields) {\n        if (item.readOnly)  queryParam[item.field] = this.queryParams[item.field];\n      }\n      this.queryParams = queryParams;\n      this.loadData(1);\n    },\n    handleToggleSearch() {\n      this.toggleSearchStatus = !this.toggleSearchStatus;\n    },\n    handleChangeInTableSelect(selectedRowKeys, selectionRows) {\n      this.table.selectedRowKeys = selectedRowKeys\n      this.table.selectionRows = selectionRows\n    },\n    handleChangeInTable(pagination, filters, sorter) {\n      //分页、排序、筛选变化时触发\n      if (Object.keys(sorter).length > 0) {\n        this.sorter.column = sorter.field\n        this.sorter.order = 'ascend' === sorter.order ? 'asc' : 'desc'\n      } else {\n        this.sorter.column = null\n        this.sorter.order = null\n      }\n      this.table.pagination = pagination\n      this.loadData()\n    },\n\n    handleOk(){\n      this.$emit(\"callback\", this.table.selectionRows);\n    }\n  }\n}\n",null]}