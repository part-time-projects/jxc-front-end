{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\components\\jeecg\\JSuperQuery.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\components\\jeecg\\JSuperQuery.vue","mtime":1648374777538},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport moment from 'moment'\nimport * as utils from '@/utils/util'\nimport { mixinDevice } from '@/utils/mixin'\nimport JDate from '@/components/jeecg/JDate.vue'\nimport JSelectDepart from '@/components/jeecgbiz/JSelectDepart'\nimport JSelectMultiUser from '@/components/jeecgbiz/JSelectMultiUser'\nimport JMultiSelectTag from '@/components/dict/JMultiSelectTag'\nimport JAreaLinkage from '@comp/jeecg/JAreaLinkage'\n\nexport default {\n  name: 'JSuperQuery',\n  mixins: [mixinDevice],\n  components: { JAreaLinkage, JMultiSelectTag, JDate, JSelectDepart, JSelectMultiUser },\n  props: {\n    /*\n     fieldList: [{\n        value:'',\n        text:'',\n        type:'',\n        dictCode:'' // 只要 dictCode 有值，无论 type 是什么，都显示为字典下拉框\n     }]\n     type:date datetime int number string\n    * */\n    fieldList: {\n      type: Array,\n      required: true\n    },\n    /*\n    * 这个回调函数接收一个数组参数 即查询条件\n    * */\n    callback: {\n      type: String,\n      required: false,\n      default: 'handleSuperQuery'\n    },\n\n    // 当前是否在加载中\n    loading: {\n      type: Boolean,\n      default: false\n    },\n\n    // 保存查询条件的唯一 code，通过该 code 区分\n    // 默认为 null，代表以当前路由全路径为区分Code\n    saveCode: {\n      type: String,\n      default: null\n    }\n\n  },\n  data() {\n    return {\n      moment,\n      fieldTreeData: [],\n\n      prompt: {\n        visible: false,\n        value: ''\n      },\n\n      visible: false,\n      queryParamsModel: [],\n      treeIcon: <a-icon type=\"file-text\"/>,\n      // 保存查询条件的treeData\n      saveTreeData: [],\n      // 保存查询条件的前缀名\n      saveCodeBefore: 'JSuperQuerySaved_',\n      // 查询类型，过滤条件匹配（and、or）\n      matchType: 'and',\n      superQueryFlag: false,\n    }\n  },\n  computed: {\n    izMobile() {\n      return this.device === 'mobile'\n    },\n    tooltipProps() {\n      return this.izMobile ? { visible: false } : {}\n    },\n    fullSaveCode() {\n      let saveCode = this.saveCode\n      if (saveCode == null || saveCode === '') {\n        saveCode = this.$route.fullPath\n      }\n      return this.saveCodeBefore + saveCode\n    },\n  },\n  watch: {\n    // 当 saveCode 变化时，重新查询已保存的条件\n    fullSaveCode: {\n      immediate: true,\n      handler() {\n        let list = this.$ls.get(this.fullSaveCode)\n        if (list instanceof Array) {\n          this.saveTreeData = list.map(i => this.renderSaveTreeData(i))\n        }\n      }\n    },\n    fieldList: {\n      deep: true,\n      immediate: true,\n      handler(val) {\n        let mainData = [], subData = []\n        val.forEach(item => {\n          let data = { ...item }\n          data.label = data.label || data.text\n          let hasChildren = (data.children instanceof Array)\n          data.disabled = hasChildren\n          data.selectable = !hasChildren\n          if (hasChildren) {\n            data.children = data.children.map(item2 => {\n              let child = { ...item2 }\n              child.label = child.label || child.text\n              child.label = data.label + '-' + child.label\n              child.value = data.value + ',' + child.value\n              child.val = ''\n              return child\n            })\n            data.val = ''\n            subData.push(data)\n          } else {\n            mainData.push(data)\n          }\n        })\n        this.fieldTreeData = mainData.concat(subData)\n      }\n    }\n  },\n\n  methods: {\n    show() {\n      if (!this.queryParamsModel || this.queryParamsModel.length === 0) {\n        this.resetLine()\n      }\n      this.visible = true\n    },\n    handleOk() {\n      if (!this.isNullArray(this.queryParamsModel)) {\n        let event = {\n          matchType: this.matchType,\n          params: this.removeEmptyObject(this.queryParamsModel)\n        }\n        // 移动端模式下关闭弹窗\n        if (this.izMobile) {\n          this.visible = false\n        }\n        this.emitCallback(event)\n      } else {\n        this.$message.warn(\"不能查询空条件\")\n      }\n    },\n    emitCallback(event = {}) {\n      let { params = [], matchType = this.matchType } = event\n      this.superQueryFlag = (params && params.length > 0)\n      for (let param of params) {\n        if (Array.isArray(param.val)) {\n          param.val = param.val.join(',')\n        }\n      }\n      console.debug('---高级查询参数--->', { params, matchType })\n      this.$emit(this.callback, params, matchType)\n    },\n    handleCancel() {\n      this.close()\n    },\n    close() {\n      this.$emit('close')\n      this.visible = false\n    },\n    handleAdd() {\n      this.addNewLine()\n    },\n    addNewLine() {\n      this.queryParamsModel.push({ rule: 'eq' })\n    },\n    resetLine() {\n      this.superQueryFlag = false\n      this.queryParamsModel = []\n      this.addNewLine()\n    },\n    handleDel(index) {\n      this.queryParamsModel.splice(index, 1)\n    },\n    handleSelected(node, item) {\n      let { type, options, dictCode, dictTable, customReturnField, popup } = node.dataRef\n      item['type'] = type\n      item['options'] = options\n      item['dictCode'] = dictCode\n      item['dictTable'] = dictTable\n      item['customReturnField'] = customReturnField\n      if (popup) {\n        item['popup'] = popup\n      }\n      this.$set(item, 'val', undefined)\n    },\n    handleOpen() {\n      this.show()\n    },\n    handleReset() {\n      this.resetLine()\n      this.emitCallback()\n    },\n    handleSave() {\n      let queryParams = this.removeEmptyObject(this.queryParamsModel)\n      if (this.isNullArray(queryParams)) {\n        this.$message.warning('空条件不能保存')\n      } else {\n        this.prompt.value = ''\n        this.prompt.visible = true\n      }\n    },\n    handlePromptOk() {\n      let { value } = this.prompt\n      if(!value){\n        this.$message.warning('保存名称不能为空')\n        return\n      }\n      // 取出查询条件\n      let records = this.removeEmptyObject(this.queryParamsModel)\n      // 判断有没有重名的\n      let filterList = this.saveTreeData.filter(i => i.originTitle === value)\n      if (filterList.length > 0) {\n        this.$confirm({\n          content: `${value} 已存在，是否覆盖？`,\n          onOk: () => {\n            this.prompt.visible = false\n            filterList[0].records = records\n            this.saveToLocalStore()\n            this.$message.success('保存成功')\n          }\n        })\n      } else {\n        // 没有重名的，直接添加\n        this.prompt.visible = false\n        // 添加到树列表中\n        this.saveTreeData.push(this.renderSaveTreeData({\n          title: value,\n          matchType: this.matchType,\n          records: records\n        }))\n        // 保存到 LocalStore\n        this.saveToLocalStore()\n        this.$message.success('保存成功')\n      }\n    },\n    handleTreeSelect(idx, event) {\n      if (event.selectedNodes[0]) {\n        let { matchType, records } = event.selectedNodes[0].data.props\n        // 将保存的matchType取出，兼容旧数据，如果没有保存就还是使用原来的\n        this.matchType = matchType || this.matchType\n        this.queryParamsModel = utils.cloneObject(records)\n      }\n    },\n    handleRemoveSaveTreeItem(event, vNode) {\n      // 阻止事件冒泡\n      event.stopPropagation()\n\n      this.$confirm({\n        content: '是否删除当前查询？',\n        onOk: () => {\n          let { eventKey } = vNode\n          this.saveTreeData.splice(Number.parseInt(eventKey.substring(2)), 1)\n          this.saveToLocalStore()\n        },\n      })\n    },\n\n    // 将查询保存到 LocalStore 里\n    saveToLocalStore() {\n      let saveValue = this.saveTreeData.map(({ originTitle, matchType, records }) => ({ title: originTitle, matchType, records }))\n      this.$ls.set(this.fullSaveCode, saveValue)\n    },\n\n    isNullArray(array) {\n      //判断是不是空数组对象\n      if (!array || array.length === 0) {\n        return true\n      }\n      if (array.length === 1) {\n        let obj = array[0]\n        if (!obj.field || (obj.val == null || obj.val === '') || !obj.rule) {\n          return true\n        }\n      }\n      return false\n    },\n    // 去掉数组中的空对象\n    removeEmptyObject(arr) {\n      let array = utils.cloneObject(arr)\n      for (let i = 0; i < array.length; i++) {\n        let item = array[i]\n        if (item == null || Object.keys(item).length <= 0) {\n          array.splice(i--, 1)\n        } else {\n          if (Array.isArray(item.options)) {\n            // 如果有字典属性，就不需要保存 options 了\n            if (item.dictCode) {\n              // 去掉特殊属性\n              delete item.options\n            }\n          }\n        }\n      }\n      return array\n    },\n\n    /** 渲染保存查询条件的 title（加个删除按钮） */\n    renderSaveTreeData(item) {\n      item.icon = this.treeIcon\n      item.originTitle = item['title']\n      item.title = (fn, vNode) => {\n        let { originTitle } = vNode.dataRef\n        return (\n          <div class=\"j-history-tree-title\">\n            <span>{originTitle}</span>\n\n            <div class=\"j-history-tree-title-closer\" onClick={e => this.handleRemoveSaveTreeItem(e, vNode)}>\n              <a-icon type=\"close-circle\"/>\n            </div>\n          </div>\n        )\n      }\n      return item\n    },\n\n    /** 判断是否允许多选 */\n    allowMultiple(item) {\n      return item.rule === 'in'\n    },\n\n    handleRuleChange(item, newValue) {\n      let oldValue = item.rule\n      this.$set(item, 'rule', newValue)\n      // 上一个规则是否是 in，且type是字典或下拉\n      if (oldValue === 'in') {\n        if (item.dictCode || item.options instanceof Array) {\n          let value = item.val\n          if (typeof item.val === 'string') {\n            value = item.val.split(',')[0]\n          } else if (Array.isArray(item.val)) {\n            value = item.val[0]\n          }\n          this.$set(item, 'val', value)\n        }\n      }\n    },\n\n    handleChangeJPopup(item, e, values) {\n      item.val = values[item.popup['destFields']]\n    },\n\n  }\n}\n",null]}