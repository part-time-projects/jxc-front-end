{"remainingRequest":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\finance\\modules\\ReceivableCheckModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ideaworkspace\\jxc-front-end\\src\\views\\erp\\finance\\modules\\ReceivableCheckModal.vue","mtime":1648374777628},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648365139913},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1648365068269},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648365135345},{"path":"D:\\ideaworkspace\\jxc-front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648364957239}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport pick from 'lodash.pick'\nimport JDate from '@/components/jeecg/JDate'\nimport JDictSelectTag from \"@/components/dict/JDictSelectTag\"\nimport { getAction, putAction, httpAction } from '@api/manage'\nimport splitPane from 'vue-splitpane';\nimport { getFormatDate } from \"../../utils/util\"\nimport RpCheckEntryList from \"./RpCheck/RpCheckEntryList\";\nimport RpCheckReceivableList from \"./RpCheck/RpCheckReceivableList\";\nimport RpCheckReceiptList from \"./RpCheck/RpCheckReceiptList\";\n\nexport default {\n  name: 'ReceivableCheckModal',\n  mixins: [],\n  components: {\n    JDate,\n    JDictSelectTag,\n    RpCheckReceivableList,\n    RpCheckReceiptList,\n    RpCheckEntryList,\n    splitPane\n  },\n\n  data() {\n    return {\n      action: \"\",\n      title: '操作',\n      width: '1200px',\n      visible: false,\n      form: this.$form.createForm(this),\n      confirmLoading: false,\n      model: {},\n\n      moreStatus: false,\n      spans: {\n        labelCol: { span: 3 },\n        wrapperCol: { span: 21 },\n        labelCol1: { span: 2 },\n        wrapperCol1: { span: 22 },\n        labelCol2: { span: 4 },\n        wrapperCol2: { span: 20 },\n        labelCol3: { span: 6 },\n        wrapperCol3: { span: 18 },\n        labelCol6: { span: 12 },\n        wrapperCol6: { span: 12 }\n      },\n\n      validatorRules: {\n        billNo: {rules: [{required: true, message: '请输入单据编号!'}]},\n        billDate: {rules: [{required: true, message: '请输入单据日期!'}]},\n        receivableCheckType: {rules: []},\n        customerId: {rules: []},\n        remark: {rules: []},\n        billProcStatus: {rules: []},\n        isApproved: {rules: []},\n        isClosed: {rules: []},\n        isVoided: {rules: []},\n        effectiveTime: {rules: []},\n        approverId: {rules: []},\n        flowId: {rules: []},\n        createTime: {rules: []},\n        createBy: {rules: []},\n        sysOrgCode: {rules: []},\n        updateTime: {rules: []},\n        updateBy: {rules: []},\n      },\n\n      totalAmt1:0,\n      entryCount1: 0,\n      ReceivableCount: 0,\n      selectedEntryCount1: 0,\n      selectedReceivableCount: 0,\n      totalAmt2:0,\n      entryCount2: 0,\n      paymentCount: 0,\n      selectedEntryCount2: 0,\n      selectedReceiptCount: 0,\n\n      url: {\n        add: \"/finance/finReceivableCheck/add\",\n        edit: \"/finance/finReceivableCheck/edit\",\n        approve: \"/finance/finReceivableCheck/approve\",\n        finRpCheckEntry: {\n          list: '/finance/finReceivableCheck/queryFinReceivableCheckEntryByMainId'\n        },\n      }\n    }\n  },\n\n  computed: {\n    readOnly: function() {\n      return this.action !== \"add\" && this.action !== \"edit\"\n    },\n    /**\n     * @return {number}\n     */\n    ReceivableHeight: function () {\n      let a = this.ReceivableCount === 0 ? 4.5:this.ReceivableCount,\n          b = this.entryCount1 === 0 ? 4.5:this.entryCount1;\n      return (a > b ? a : b) * 38 + 150;\n    },\n    splitPaneHeight: function () {\n      let a = this.paymentCount === 0 ? 4.5:this.paymentCount,\n        b = this.entryCount2 === 0 ? 4.5:this.entryCount2;\n      return this.ReceivableHeight + (a > b ? a : b) * 38 + 180;\n    },\n  },\n\n  methods: {\n    addInit() {\n      this.model = {};\n      //应收核销类型：收款核应收\n      this.model.receivableCheckType = '101';\n      //处理状态：编辑中\n      this.model.billProcStatus = '12';\n\n      // 请求后台的填值规则接口地址\n      const url = '/sys/fillRule/executeRuleByCode/'\n      const ruleCode = 'receivable_check_bill_no'\n      const that = this\n      putAction(url + ruleCode, {}).then(res => {\n        // 执行成功，获取返回的值，并赋到页面上\n        if (res.success) {\n          that.$nextTick(() => {\n            that.form.setFieldsValue({'billNo':res.result, 'billDate':getFormatDate()})\n          })\n        }\n      })\n    },\n\n    /** 列表点击新增按钮时调用此方法 */\n    add() {\n      this.addInit();\n      this.edit(this.model);\n    },\n\n    resetModal() {\n      // reset modal\n      this.entryCount1 = 0;\n      this.selectedEntryCount1= 0;\n      this.selectedReceivableCount = 0;\n      this.entryCount2 = 0;\n      this.selectedEntryCount2 = 0;\n      this.selectedReceiptCount = 0;\n      this.form.resetFields();\n      this.$nextTick(() => {\n        this.$refs.rpCheckEntryList1.resetTable();\n        this.$refs.rpCheckEntryList2.resetTable();\n        if (!this.readOnly) {\n          this.$refs.rpCheckReceivableList.resetTable();\n          this.$refs.rpCheckReceiptList.resetTable();\n        }\n      });\n    },\n\n    /** 列表点击了编辑（修改）按钮时调用此方法 */\n    edit(record) {\n      this.resetModal();\n\n      this.model = Object.assign({}, record);\n      this.visible = true;\n      this.$nextTick(() => {\n        this.form.setFieldsValue(pick(this.model,'billNo','billDate','customerId','remark','billProcStatus','isApproved','isClosed','isVoided','effectiveTime','approverId','flowId','createTime','createBy','sysOrgCode','updateTime','updateBy'))\n      })\n\n      // 加载子表数据\n      this.$nextTick(() => {\n        if (this.model.id) {\n          queryCheckEntry(this);\n          this.onCustomerChange(this.model.customerId);\n        }\n      });\n\n      /** 查询数据 */\n      function queryCheckEntry(that) {\n        let url = that.url.finRpCheckEntry.list;\n        let params = { id: that.model.id };\n        that.$refs.rpCheckEntryList1.loading = true;\n        that.$refs.rpCheckEntryList2.loading = true;\n        getAction(url, params).then(res => {\n          let rows1 = [], rows2 = [];\n          for (let row of res.result || []) {\n            if (row.checkSide === \"1\")\n              rows1.push(row)\n            else\n              rows2.push(row);\n          }\n          that.$refs.rpCheckEntryList1.dataSource = rows1;\n          that.$refs.rpCheckEntryList2.dataSource = rows2;\n        }).finally(() => {\n          that.$refs.rpCheckEntryList1.loading = false;\n          that.$refs.rpCheckEntryList2.loading = false;\n        });\n      }\n    },\n\n    onCustomerChange(val){\n      if (!this.readOnly && val) {\n        let params = {customerId: val};\n        this.$refs.rpCheckReceivableList.queryParam = params;\n        this.$refs.rpCheckReceivableList.loadData(1);\n        this.$refs.rpCheckReceiptList.queryParam = params;\n        this.$refs.rpCheckReceiptList.loadData(1);\n      }\n    },\n\n    onReceivableDataSourceChange() {\n      this.ReceivableCount = this.$refs.rpCheckReceivableList.dataSource.length;\n      this.makeAdded(this.$refs.rpCheckReceivableList, this.$refs.rpCheckEntryList1);\n    },\n\n    //注意：\n    // rpCheckReceivableList与rpCheckReceiptList的loadData(),由于其中getAction是异步执行，\n    // 所以如果在其后调用本函数将无效（此时rpCheckReceivableList.dataSource还是空的）。\n    makeAdded(fromComponent, toComponent) {\n      let rows = [];\n      let change = false;\n      for (let fromRecord of fromComponent.dataSource) {\n        let added = false;\n        for (let toRecord of toComponent.dataSource) {\n          if (fromRecord.id === toRecord.sourceId) {\n            added = true;\n            if (fromRecord.added !== \"是\") {\n              fromRecord.added = \"是\";\n              change = true;\n            }\n            break;\n          }\n        }\n        // 以前是added，但现在不是\n        if (!added && fromRecord.added === \"是\") {\n          fromRecord.added = \"\";\n          change = true;\n        }\n        rows.push(fromRecord);\n      }\n      if (change) {\n        //避免循环触发dataSourceChange\n        fromComponent.disableDataSourceChange = true;\n        fromComponent.dataSource = rows;\n      }\n    },\n\n    onReceivableSelectChange(){\n      let count = 0;\n      for (let row of  this.$refs.rpCheckReceivableList.selectionRows) {\n        if (row.added !== \"是\") count++;\n      }\n      this.selectedReceivableCount = count;\n    },\n\n    onEntryList1SelectChange() {\n      this.selectedEntryCount1 = this.$refs.rpCheckEntryList1.selectedRowKeys.length;\n    },\n\n    onEntryList1DataSourceChange(){\n      this.entryCount1 = this.$refs.rpCheckEntryList1.dataSource.length;\n    },\n\n    onReceiptDataSourceChange() {\n      this.paymentCount = this.$refs.rpCheckReceiptList.dataSource.length;\n      this.makeAdded(this.$refs.rpCheckReceiptList, this.$refs.rpCheckEntryList2);\n    },\n\n    onReceiptSelectChange(){\n      let count = 0;\n      for (let row of this.$refs.rpCheckReceiptList.selectionRows) {\n        if (row.added !== \"是\") count++;\n      }\n      this.selectedReceiptCount = count;\n    },\n\n    onEntryList2SelectChange() {\n      this.selectedEntryCount2 = this.$refs.rpCheckEntryList2.selectedRowKeys.length;\n    },\n\n    onEntryList2DataSourceChange(){\n      this.entryCount2 = this.$refs.rpCheckEntryList2.dataSource.length;\n    },\n\n    handleEntryList1Add() {\n      let maxEntryNo = 100;\n      for(let row of this.$refs.rpCheckEntryList1.dataSource) {\n        if (maxEntryNo < row.entryNo)  maxEntryNo = row.entryNo;\n      }\n\n      let rows = [];\n      for (let row of this.$refs.rpCheckReceivableList.selectionRows) {\n        if (row.added !== \"是\") {\n          rows.push({\n            entryNo: ++maxEntryNo,\n            checkSide: \"1\",\n            sourceType: \"fin_receivable\",\n            sourceId: row.id,\n            sourceNo: row.billNo,\n            uncheckedAmt: row.uncheckedAmt,\n            amt: row.uncheckedAmt\n          });\n        }\n      }\n      this.$refs.rpCheckEntryList1.dataSource.push(...rows);\n      this.selectedReceivableCount = 0;\n      this.$refs.rpCheckReceivableList.selectedRowKeys = [];\n      this.$refs.rpCheckReceivableList.selectionRows = [];\n      this.makeAdded(this.$refs.rpCheckReceivableList, this.$refs.rpCheckEntryList1);\n    },\n\n    handleEntryList1Remove() {\n      if (this.$refs.rpCheckEntryList1.selectionRows === 0) return;\n\n      let rows = [];\n      for (let row of this.$refs.rpCheckEntryList1.dataSource) {\n        let removedRow = {sourceId:\"\"};\n        for (removedRow of this.$refs.rpCheckEntryList1.selectionRows) {\n          //移除的\n          if (row.sourceId === removedRow.sourceId) break;\n        }\n        //不移除的\n        if (row.sourceId !== removedRow.sourceId) rows.push(row);\n      }\n      this.$refs.rpCheckEntryList1.dataSource = rows;\n      this.selectedEntryCount1 = 0;\n      this.$refs.rpCheckEntryList1.selectedRowKeys = [];\n      this.$refs.rpCheckEntryList1.selectionRows = [];\n      this.makeAdded(this.$refs.rpCheckReceivableList, this.$refs.rpCheckEntryList1);\n    },\n\n    handleEntryList2Add() {\n      let maxEntryNo = 200;\n      for(let row of this.$refs.rpCheckEntryList2.dataSource) {\n        if (maxEntryNo < row.entryNo)  maxEntryNo = row.entryNo;\n      }\n\n      let rows = [];\n      for (let row of this.$refs.rpCheckReceiptList.selectionRows) {\n        if (row.added !== \"是\") {\n          rows.push({\n            entryNo: ++maxEntryNo,\n            checkSide: \"2\",\n            sourceType: \"fin_receipt..102\",\n            sourceId: row.id,\n            sourceNo: row.billNo,\n            uncheckedAmt: row.uncheckedAmt,\n            amt: row.uncheckedAmt\n          });\n        }\n      }\n      this.$refs.rpCheckEntryList2.dataSource.push(...rows);\n      this.selectedReceiptCount = 0;\n      this.$refs.rpCheckReceiptList.selectedRowKeys = [];\n      this.$refs.rpCheckReceiptList.selectionRows = [];\n      this.makeAdded(this.$refs.rpCheckReceiptList, this.$refs.rpCheckEntryList2);\n    },\n\n    handleEntryList2Remove() {\n      if (this.$refs.rpCheckEntryList2.selectionRows === 0) return;\n\n      let rows = [];\n      for (let row of this.$refs.rpCheckEntryList2.dataSource) {\n        let removedRow = {sourceId:\"\"};\n        for (removedRow of this.$refs.rpCheckEntryList2.selectionRows) {\n          //移除的\n          if (row.sourceId === removedRow.sourceId) break;\n        }\n        //不移除的\n        if (row.sourceId !== removedRow.sourceId) rows.push(row);\n      }\n      this.$refs.rpCheckEntryList2.dataSource = rows;\n      this.selectedEntryCount2 = 0;\n      this.$refs.rpCheckEntryList2.selectedRowKeys = [];\n      this.$refs.rpCheckEntryList2.selectionRows = [];\n      this.makeAdded(this.$refs.rpCheckReceiptList, this.$refs.rpCheckEntryList2);\n    },\n\n    /** 关闭弹窗，并将所有JEditableTable实例回归到初始状态 */\n    close() {\n      this.visible = false\n      this.$emit('close')\n    },\n\n    handleOk () {\n      // 触发表单验证\n      this.form.validateFields((err, values) => {\n        if (!err) {\n          let formData = this.classifyIntoFormData(values);\n          return this.request(formData, false)\n        }\n      })\n    },\n\n    /** 整理成formData */\n    classifyIntoFormData(formValue) {\n      let main = Object.assign(this.model, formValue)\n      return {\n        ...main, // 展开\n        finReceivableCheckEntryList: this.$refs.rpCheckEntryList1.dataSource.concat(this.$refs.rpCheckEntryList2.dataSource),\n      }\n    },\n\n    /** 发起请求，自动判断是执行新增还是修改操作 */\n    request(formData, isSubmit) {\n      let url = this.url.add, method = 'post'\n      if (this.model.id) {\n        url = this.url.edit\n        method = 'put'\n      }\n\n      this.confirmLoading = true;\n      httpAction(url, formData, method).then((res) => {\n        if (res.success) {\n          this.$message.success(res.message)\n          this.$emit('ok')\n          this.close()\n        } else {\n          this.$message.warning(res.message)\n        }\n      }).catch(e => {\n         if (isSubmit)  this.form.setFieldsValue({billProcStatus:'12'});\n      }).finally(() => {\n        this.confirmLoading = false\n      })\n    },\n\n\n    handleCancel () {\n      this.close()\n    },\n    handleSave() {\n      this.handleOk()\n    },\n\n    handleSubmit() {\n      //处理状态=编辑完成\n      this.form.setFieldsValue({billProcStatus:'13'})\n\n      //出错时要恢复billProcStatus为\"12\"，所以下面未直接调用handleSave()！\n      // 触发表单验证\n      this.form.validateFields((err, values) => {\n        if (!err) {\n          let formData = this.classifyIntoFormData(values);\n          return this.request(formData, true)\n        }\n      })\n    },\n\n    handleApproved() {\n      const that = this;\n      putAction(that.url.approve, {id: that.model.id}).then((res) => {\n        if (res.success) {\n          that.$message.success(res.message);\n          that.$emit('ok')\n          that.close()\n        } else {\n          that.$message.warning(res.message);\n        }\n      })\n    },\n\n    popupCallback(row){\n      this.form.setFieldsValue(pick(row,'billNo','billDate','customerId','remark','billProcStatus','isApproved','isClosed','isVoided','effectiveTime','approverId','flowId','createTime','createBy','sysOrgCode','updateTime','updateBy'))\n    },\n\n  }\n}\n",null]}